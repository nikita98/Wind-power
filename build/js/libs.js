"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"==("undefined"==typeof module?"undefined":_typeof(module))&&"object"==_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(e,t){function n(e,t,n){var r,i=(t=t||se).createElement("script");if(i.text=e,n)for(r in xe)n[r]&&(i[r]=n[r]);t.head.appendChild(i).parentNode.removeChild(i)}function r(e){return null==e?e+"":"object"==("undefined"==typeof e?"undefined":_typeof(e))||"function"==typeof e?fe[pe.call(e)]||"object":"undefined"==typeof e?"undefined":_typeof(e)}function i(e){var t=!!e&&"length"in e&&e.length,n=r(e);return!ye(e)&&!be(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function o(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function s(e,t,n){return ye(t)?we.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?we.grep(e,function(e){return e===t!==n}):"string"!=typeof t?we.grep(e,function(e){return de.call(t,e)>-1!==n}):we.filter(t,e,n)}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function l(e){var t={};return we.each(e.match(_e)||[],function(e,n){t[n]=!0}),t}function c(e){return e}function u(e){throw e}function d(e,t,n,r){var i;try{e&&ye(i=e.promise)?i.call(e).done(t).fail(n):e&&ye(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function f(){se.removeEventListener("DOMContentLoaded",f),e.removeEventListener("load",f),we.ready()}function p(e,t){return t.toUpperCase()}function h(e){return e.replace(Oe,"ms-").replace(Re,p)}function v(){this.expando=we.expando+v.uid++}function g(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Fe.test(e)?JSON.parse(e):e)}function m(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Be,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=g(n)}catch(e){}We.set(e,t,n)}else n=void 0;return n}function y(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return we.css(e,t,"")},l=a(),c=n&&n[3]||(we.cssNumber[t]?"":"px"),u=(we.cssNumber[t]||"px"!==c&&+l)&&ze.exec(we.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)we.style(e,t,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;u*=2,we.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=i)),i}function b(e){var t,n=e.ownerDocument,r=e.nodeName,i=Ke[r];return i||(t=n.body.appendChild(n.createElement(r)),i=we.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Ke[r]=i,i)}function x(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Ie.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Xe(r)&&(i[o]=b(r))):"none"!==n&&(i[o]="none",Ie.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function w(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&o(e,t)?we.merge([e],n):n}function C(e,t){for(var n=0,r=e.length;n<r;n++)Ie.set(e[n],"globalEval",!t||Ie.get(t[n],"globalEval"))}function T(e,t,n,i,o){for(var s,a,l,c,u,d,f=t.createDocumentFragment(),p=[],h=0,v=e.length;h<v;h++)if((s=e[h])||0===s)if("object"===r(s))we.merge(p,s.nodeType?[s]:s);else if(Ze.test(s)){for(a=a||f.appendChild(t.createElement("div")),l=(Ye.exec(s)||["",""])[1].toLowerCase(),c=Je[l]||Je._default,a.innerHTML=c[1]+we.htmlPrefilter(s)+c[2],d=c[0];d--;)a=a.lastChild;we.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(s));for(f.textContent="",h=0;s=p[h++];)if(i&&we.inArray(s,i)>-1)o&&o.push(s);else if(u=we.contains(s.ownerDocument,s),a=w(f.appendChild(s),"script"),u&&C(a),n)for(d=0;s=a[d++];)Ge.test(s.type||"")&&n.push(s);return f}function k(){return!0}function j(){return!1}function S(){try{return se.activeElement}catch(e){}}function q(e,t,n,r,i,o){var s,a;if("object"==("undefined"==typeof t?"undefined":_typeof(t))){"string"!=typeof n&&(r=r||n,n=void 0);for(a in t)q(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=j;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return we().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=we.guid++)),e.each(function(){we.event.add(this,t,i,r,n)})}function N(e,t){return o(e,"table")&&o(11!==t.nodeType?t:t.firstChild,"tr")?we(e).children("tbody")[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function D(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function A(e,t){var n,r,i,o,s,a,l,c;if(1===t.nodeType){if(Ie.hasData(e)&&(o=Ie.access(e),s=Ie.set(t,o),c=o.events)){delete s.handle,s.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)we.event.add(t,i,c[i][n])}We.hasData(e)&&(a=We.access(e),l=we.extend({},a),We.set(t,l))}}function _(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Qe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function H(e,t,r,i){t=ce.apply([],t);var o,s,a,l,c,u,d=0,f=e.length,p=f-1,h=t[0],v=ye(h);if(v||f>1&&"string"==typeof h&&!me.checkClone&&st.test(h))return e.each(function(n){var o=e.eq(n);v&&(t[0]=h.call(this,n,o.html())),H(o,t,r,i)});if(f&&(o=T(t,e[0].ownerDocument,!1,e,i),s=o.firstChild,1===o.childNodes.length&&(o=s),s||i)){for(l=(a=we.map(w(o,"script"),E)).length;d<f;d++)c=o,d!==p&&(c=we.clone(c,!0,!0),l&&we.merge(a,w(c,"script"))),r.call(e[d],c,d);if(l)for(u=a[a.length-1].ownerDocument,we.map(a,D),d=0;d<l;d++)c=a[d],Ge.test(c.type||"")&&!Ie.access(c,"globalEval")&&we.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?we._evalUrl&&we._evalUrl(c.src):n(c.textContent.replace(at,""),u,c))}return e}function L(e,t,n){for(var r,i=t?we.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||we.cleanData(w(r)),r.parentNode&&(n&&we.contains(r.ownerDocument,r)&&C(w(r,"script")),r.parentNode.removeChild(r));return e}function P(e,t,n){var r,i,o,s,a=e.style;return(n=n||ct(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||we.contains(e.ownerDocument,e)||(s=we.style(e,t)),!me.pixelBoxStyles()&&lt.test(s)&&ut.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function O(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function R(e){if(e in gt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=vt.length;n--;)if((e=vt[n]+t)in gt)return e}function M(e){var t=we.cssProps[e];return t||(t=we.cssProps[e]=R(e)||e),t}function I(e,t,n){var r=ze.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function W(e,t,n,r,i,o){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=we.css(e,n+Ue[s],!0,i)),r?("content"===n&&(l-=we.css(e,"padding"+Ue[s],!0,i)),"margin"!==n&&(l-=we.css(e,"border"+Ue[s]+"Width",!0,i))):(l+=we.css(e,"padding"+Ue[s],!0,i),"padding"!==n?l+=we.css(e,"border"+Ue[s]+"Width",!0,i):a+=we.css(e,"border"+Ue[s]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))),l}function F(e,t,n){var r=ct(e),i=P(e,t,r),o="border-box"===we.css(e,"boxSizing",!1,r),s=o;if(lt.test(i)){if(!n)return i;i="auto"}return s=s&&(me.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===we.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(i=parseFloat(i)||0)+W(e,t,n||(o?"border":"content"),s,r,i)+"px"}function B(e,t,n,r,i){return new B.prototype.init(e,t,n,r,i)}function $(){yt&&(!1===se.hidden&&e.requestAnimationFrame?e.requestAnimationFrame($):e.setTimeout($,we.fx.interval),we.fx.tick())}function z(){return e.setTimeout(function(){mt=void 0}),mt=Date.now()}function U(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=Ue[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function X(e,t,n){for(var r,i=(Q.tweeners[t]||[]).concat(Q.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function V(e,t,n){var r,i,o,s,a,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,v=e.nodeType&&Xe(e),g=Ie.get(e,"fxshow");n.queue||(null==(s=we._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,we.queue(e,"fx").length||s.empty.fire()})}));for(r in t)if(i=t[r],bt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;v=!0}p[r]=g&&g[r]||we.style(e,r)}if((l=!we.isEmptyObject(t))||!we.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=Ie.get(e,"display")),"none"===(u=we.css(e,"display"))&&(c?u=c:(x([e],!0),c=e.style.display||c,u=we.css(e,"display"),x([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===we.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(r in p)l||(g?"hidden"in g&&(v=g.hidden):g=Ie.access(e,"fxshow",{display:c}),o&&(g.hidden=!v),v&&x([e],!0),f.done(function(){v||x([e]),Ie.remove(e,"fxshow");for(r in p)we.style(e,r,p[r])})),l=X(v?g[r]:0,r,f),r in g||(g[r]=l.start,v&&(l.end=l.start,l.start=0))}}function K(e,t){var n,r,i,o,s;for(n in e)if(r=h(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=we.cssHooks[r])&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function Q(e,t,n){var r,i,o=0,s=Q.prefilters.length,a=we.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=mt||z(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(r);return a.notifyWith(e,[c,r,n]),r<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:we.extend({},t),opts:we.extend(!0,{specialEasing:{},easing:we.easing._default},n),originalProperties:t,originalOptions:n,startTime:mt||z(),duration:n.duration,tweens:[],createTween:function(t,n){var r=we.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(K(u,c.opts.specialEasing);o<s;o++)if(r=Q.prefilters[o].call(c,e,u,c.opts))return ye(r.stop)&&(we._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return we.map(u,X,c),ye(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),we.fx.timer(we.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function Y(e){return(e.match(_e)||[]).join(" ")}function G(e){return e.getAttribute&&e.getAttribute("class")||""}function J(e){return Array.isArray(e)?e:"string"==typeof e?e.match(_e)||[]:[]}function Z(e,t,n,i){var o;if(Array.isArray(t))we.each(t,function(t,r){n||At.test(e)?i(e,r):Z(e+"["+("object"==("undefined"==typeof r?"undefined":_typeof(r))&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==r(t))i(e,t);else for(o in t)Z(e+"["+o+"]",t[o],n,i)}function ee(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(_e)||[];if(ye(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function te(e,t,n,r){function i(a){var l;return o[a]=!0,we.each(e[a]||[],function(e,a){var c=a(t,n,r);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),l}var o={},s=e===$t;return i(t.dataTypes[0])||!o["*"]&&i("*")}function ne(e,t){var n,r,i=we.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&we.extend(!0,e,r),e}function re(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}function ie(e,t,n,r){var i,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(i in c)if((a=i.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[i]:!0!==c[i]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var oe=[],se=e.document,ae=Object.getPrototypeOf,le=oe.slice,ce=oe.concat,ue=oe.push,de=oe.indexOf,fe={},pe=fe.toString,he=fe.hasOwnProperty,ve=he.toString,ge=ve.call(Object),me={},ye=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},be=function(e){return null!=e&&e===e.window},xe={type:!0,src:!0,noModule:!0},we=function Jt(e,t){return new Jt.fn.init(e,t)},Ce=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;we.fn=we.prototype={jquery:"3.3.1",constructor:we,length:0,toArray:function(){return le.call(this)},get:function(e){return null==e?le.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=we.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return we.each(this,e)},map:function(e){return this.pushStack(we.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(le.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ue,sort:oe.sort,splice:oe.splice},we.extend=we.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==("undefined"==typeof s?"undefined":_typeof(s))||ye(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(r=e[t])&&(c&&r&&(we.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&we.isPlainObject(n)?n:{},s[t]=we.extend(c,o,r)):void 0!==r&&(s[t]=r));return s},we.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==pe.call(e)||(t=ae(e))&&("function"!=typeof(n=he.call(t,"constructor")&&t.constructor)||ve.call(n)!==ge))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){n(e)},each:function(e,t){var n,r=0;if(i(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(Ce,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?we.merge(n,"string"==typeof e?[e]:e):ue.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:de.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,s=e.length,a=!n;o<s;o++)(r=!t(e[o],o))!==a&&i.push(e[o]);return i},map:function(e,t,n){var r,o,s=0,a=[];if(i(e))for(r=e.length;s<r;s++)null!=(o=t(e[s],s,n))&&a.push(o);else for(s in e)null!=(o=t(e[s],s,n))&&a.push(o);return ce.apply([],a)},guid:1,support:me}),"function"==typeof Symbol&&(we.fn[Symbol.iterator]=oe[Symbol.iterator]),we.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){fe["[object "+t+"]"]=t.toLowerCase()});var Te=function(e){function t(e,t,n,r){var i,o,s,a,l,c,u,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:F)!==H&&_(t),t=t||H,P)){if(11!==h&&(l=me.exec(e)))if(i=l[1]){if(9===h){if(!(s=t.getElementById(i)))return n;if(s.id===i)return n.push(s),n}else if(f&&(s=f.getElementById(i))&&I(t,s)&&s.id===i)return n.push(s),n}else{if(l[2])return J.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&C.getElementsByClassName&&t.getElementsByClassName)return J.apply(n,t.getElementsByClassName(i)),n}if(C.qsa&&!X[e+" "]&&(!O||!O.test(e))){if(1!==h)f=t,u=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(we,Ce):t.setAttribute("id",a=W),o=(c=S(e)).length;o--;)c[o]="#"+a+" "+p(c[o]);u=c.join(","),f=ye.test(e)&&d(t.parentNode)||t}if(u)try{return J.apply(n,f.querySelectorAll(u)),n}catch(e){}finally{a===W&&t.removeAttribute("id")}}}return N(e.replace(ae,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[W]=!0,e}function i(e){var t=H.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)T.attrHandle[n[r]]=t}function s(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ke(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function d(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=$++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,l){var c,u,d,f=[B,a];if(l){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(d=t[W]||(t[W]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=u[o])&&c[0]===B&&c[1]===a)return f[2]=c[2];if(u[o]=f,f[2]=e(t,n,l))return!0}return!1}}function v(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),c&&t.push(a)));return s}function y(e,t,n,i,o,s){return i&&!i[W]&&(i=y(i)),o&&!o[W]&&(o=y(o,s)),r(function(r,s,a,l){var c,u,d,f=[],p=[],h=s.length,v=r||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!r&&t?v:m(v,f,e,a,l),b=n?o||(r?e:h||i)?[]:s:y;if(n&&n(y,b,a,l),i)for(c=m(b,p),i(c,[],a,l),u=c.length;u--;)(d=c[u])&&(b[p[u]]=!(y[p[u]]=d));if(r){if(o||e){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);o(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=o?ee(r,d):f[u])>-1&&(r[c]=!(s[c]=d))}}else b=m(b===s?b.splice(h,b.length):b),o?o(null,s,b,l):J.apply(s,b)})}function b(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],s=o||T.relative[" "],a=o?1:0,l=h(function(e){return e===t},s,!0),c=h(function(e){return ee(t,e)>-1},s,!0),u=[function(e,n,r){var i=!o&&(r||n!==E)||((t=n).nodeType?l(e,n,r):c(e,n,r));return t=null,i}];a<i;a++)if(n=T.relative[e[a].type])u=[h(v(u),n)];else{if((n=T.filter[e[a].type].apply(null,e[a].matches))[W]){for(r=++a;r<i&&!T.relative[e[r].type];r++);return y(a>1&&v(u),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),n,a<r&&b(e.slice(a,r)),r<i&&b(e=e.slice(r)),r<i&&p(e))}u.push(n)}return v(u)}function x(e,n){var i=n.length>0,o=e.length>0,s=function(r,s,a,l,c){var u,d,f,p=0,h="0",v=r&&[],g=[],y=E,b=r||o&&T.find.TAG("*",c),x=B+=null==y?1:Math.random()||.1,w=b.length;for(c&&(E=s===H||s||c);h!==w&&null!=(u=b[h]);h++){if(o&&u){for(d=0,s||u.ownerDocument===H||(_(u),a=!P);f=e[d++];)if(f(u,s||H,a)){l.push(u);break}c&&(B=x)}i&&((u=!f&&u)&&p--,r&&v.push(u))}if(p+=h,i&&h!==p){for(d=0;f=n[d++];)f(v,g,s,a);if(r){if(p>0)for(;h--;)v[h]||g[h]||(g[h]=Y.call(l));g=m(g)}J.apply(l,g),c&&!r&&g.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(B=x,E=y),v};return i?r(s):s}var w,C,T,k,j,S,q,N,E,D,A,_,H,L,P,O,R,M,I,W="sizzle"+1*new Date,F=e.document,B=0,$=0,z=n(),U=n(),X=n(),V=function(e,t){return e===t&&(A=!0),0},K={}.hasOwnProperty,Q=[],Y=Q.pop,G=Q.push,J=Q.push,Z=Q.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ae=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ue=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(oe),fe=new RegExp("^"+re+"$"),pe={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ve=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),xe=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Ce=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Te=function(){_()},ke=h(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{J.apply(Q=Z.call(F.childNodes),F.childNodes),Q[F.childNodes.length].nodeType}catch(e){J={apply:Q.length?function(e,t){G.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}C=t.support={},j=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},_=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:F;return r!==H&&9===r.nodeType&&r.documentElement?(H=r,L=H.documentElement,P=!j(H),F!==H&&(n=H.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Te,!1):n.attachEvent&&n.attachEvent("onunload",Te)),C.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),C.getElementsByTagName=i(function(e){return e.appendChild(H.createComment("")),!e.getElementsByTagName("*").length}),C.getElementsByClassName=ge.test(H.getElementsByClassName),C.getById=i(function(e){return L.appendChild(e).id=W,!H.getElementsByName||!H.getElementsByName(W).length}),C.getById?(T.filter.ID=function(e){var t=e.replace(be,xe);return function(e){return e.getAttribute("id")===t}},T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&P){var n=t.getElementById(e);return n?[n]:[]}}):(T.filter.ID=function(e){var t=e.replace(be,xe);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&P){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),T.find.TAG=C.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):C.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=C.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&P)return t.getElementsByClassName(e)},R=[],O=[],(C.qsa=ge.test(H.querySelectorAll))&&(i(function(e){L.appendChild(e).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&O.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||O.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+W+"-]").length||O.push("~="),e.querySelectorAll(":checked").length||O.push(":checked"),e.querySelectorAll("a#"+W+"+*").length||O.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=H.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&O.push("name"+ne+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&O.push(":enabled",":disabled"),L.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&O.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),O.push(",.*:")})),(C.matchesSelector=ge.test(M=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&i(function(e){C.disconnectedMatch=M.call(e,"*"),M.call(e,"[s!='']:x"),R.push("!=",oe)}),O=O.length&&new RegExp(O.join("|")),R=R.length&&new RegExp(R.join("|")),t=ge.test(L.compareDocumentPosition),I=t||ge.test(L.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!C.sortDetached&&t.compareDocumentPosition(e)===n?e===H||e.ownerDocument===F&&I(F,e)?-1:t===H||t.ownerDocument===F&&I(F,t)?1:D?ee(D,e)-ee(D,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!i||!o)return e===H?-1:t===H?1:i?-1:o?1:D?ee(D,e)-ee(D,t):0;if(i===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?s(a[r],l[r]):a[r]===F?-1:l[r]===F?1:0},H):H},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==H&&_(e),n=n.replace(ue,"='$1']"),C.matchesSelector&&P&&!X[n+" "]&&(!R||!R.test(n))&&(!O||!O.test(n)))try{var r=M.call(e,n);if(r||C.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,H,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==H&&_(e),I(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==H&&_(e);var n=T.attrHandle[t.toLowerCase()],r=n&&K.call(T.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==r?r:C.attributes||!P?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(we,Ce)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!C.detectDuplicates,D=!C.sortStable&&e.slice(0),e.sort(V),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return D=null,e},k=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=k(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=k(t);return n},(T=t.selectors={cacheLength:50,createPseudo:r,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(be,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,v=o!==s?"nextSibling":"previousSibling",g=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(o){for(;v;){for(f=t;f=f[v];)if(a?f.nodeName.toLowerCase()===m:1===f.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(b=(p=(c=(u=(d=(f=g)[W]||(f[W]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===B&&c[1])&&c[2],f=p&&g.childNodes[p];f=++p&&f&&f[v]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[B,p,b];break}}else if(y&&(b=p=(c=(u=(d=(f=t)[W]||(f[W]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===B&&c[1]),!1===b)for(;(f=++p&&f&&f[v]||(b=p=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==m:1!==f.nodeType)||!++b||(y&&((u=(d=f[W]||(f[W]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[B,b]),f!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[W]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),s=i.length;s--;)e[r=ee(e,i[s])]=!(t[r]=i[s])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=q(e.replace(ae,"$1"));return i[W]?r(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,xe),function(t){return(t.textContent||t.innerText||k(t)).indexOf(e)>-1}}),lang:r(function(e){
return fe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,xe).toLowerCase(),function(t){var n;do if(n=P?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===H.activeElement&&(!H.hasFocus||H.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return ve.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[n<0?n+t:n]}),even:u(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=T.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})T.pseudos[w]=l(w);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,S=t.tokenize=function(e,n){var r,i,o,s,a,l,c,u=U[e+" "];if(u)return n?0:u.slice(0);for(a=e,l=[],c=T.preFilter;a;){r&&!(i=le.exec(a))||(i&&(a=a.slice(i[0].length)||a),l.push(o=[])),r=!1,(i=ce.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ae," ")}),a=a.slice(r.length));for(s in T.filter)!(i=pe[s].exec(a))||c[s]&&!(i=c[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?t.error(e):U(e,l).slice(0)},q=t.compile=function(e,t){var n,r=[],i=[],o=X[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)(o=b(t[n]))[W]?r.push(o):i.push(o);(o=X(e,x(i,r))).selector=e}return o},N=t.select=function(e,t,n,r){var i,o,s,a,l,c="function"==typeof e&&e,u=!r&&S(e=c.selector||e);if(n=n||[],1===u.length){if((o=u[0]=u[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&P&&T.relative[o[1].type]){if(!(t=(T.find.ID(s.matches[0].replace(be,xe),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=pe.needsContext.test(e)?0:o.length;i--&&(s=o[i],!T.relative[a=s.type]);)if((l=T.find[a])&&(r=l(s.matches[0].replace(be,xe),ye.test(o[0].type)&&d(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&p(o)))return J.apply(n,r),n;break}}return(c||q(e,u))(r,t,!P,n,!t||ye.test(e)&&d(t.parentNode)||t),n},C.sortStable=W.split("").sort(V).join("")===W,C.detectDuplicates=!!A,_(),C.sortDetached=i(function(e){return 1&e.compareDocumentPosition(H.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),C.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);we.find=Te,we.expr=Te.selectors,we.expr[":"]=we.expr.pseudos,we.uniqueSort=we.unique=Te.uniqueSort,we.text=Te.getText,we.isXMLDoc=Te.isXML,we.contains=Te.contains,we.escapeSelector=Te.escape;var ke=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&we(e).is(n))break;r.push(e)}return r},je=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Se=we.expr.match.needsContext,qe=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;we.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?we.find.matchesSelector(r,e)?[r]:[]:we.find.matches(e,we.grep(t,function(e){return 1===e.nodeType}))},we.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(we(e).filter(function(){for(t=0;t<r;t++)if(we.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)we.find(e,i[t],n);return r>1?we.uniqueSort(n):n},filter:function(e){return this.pushStack(s(this,e||[],!1))},not:function(e){return this.pushStack(s(this,e||[],!0))},is:function(e){return!!s(this,"string"==typeof e&&Se.test(e)?we(e):e||[],!1).length}});var Ne,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(we.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Ne,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof we?t[0]:t,we.merge(this,we.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:se,!0)),qe.test(r[1])&&we.isPlainObject(t))for(r in t)ye(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=se.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ye(e)?void 0!==n.ready?n.ready(e):e(we):we.makeArray(e,this)}).prototype=we.fn,Ne=we(se);var De=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};we.fn.extend({has:function(e){var t=we(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(we.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&we(e);if(!Se.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&we.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?we.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?de.call(we(e),this[0]):de.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(we.uniqueSort(we.merge(this.get(),we(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),we.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ke(e,"parentNode")},parentsUntil:function(e,t,n){return ke(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return ke(e,"nextSibling")},prevAll:function(e){return ke(e,"previousSibling")},nextUntil:function(e,t,n){return ke(e,"nextSibling",n)},prevUntil:function(e,t,n){return ke(e,"previousSibling",n)},siblings:function(e){return je((e.parentNode||{}).firstChild,e)},children:function(e){return je(e.firstChild)},contents:function(e){return o(e,"iframe")?e.contentDocument:(o(e,"template")&&(e=e.content||e),we.merge([],e.childNodes))}},function(e,t){we.fn[e]=function(n,r){var i=we.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=we.filter(r,i)),this.length>1&&(Ae[e]||we.uniqueSort(i),De.test(e)&&i.reverse()),this.pushStack(i)}});var _e=/[^\x20\t\r\n\f]+/g;we.Callbacks=function(e){e="string"==typeof e?l(e):we.extend({},e);var t,n,i,o,s=[],a=[],c=-1,u=function(){for(o=o||e.once,i=t=!0;a.length;c=-1)for(n=a.shift();++c<s.length;)!1===s[c].apply(n[0],n[1])&&e.stopOnFalse&&(c=s.length,n=!1);e.memory||(n=!1),t=!1,o&&(s=n?[]:"")},d={add:function(){return s&&(n&&!t&&(c=s.length-1,a.push(n)),function i(t){we.each(t,function(t,n){ye(n)?e.unique&&d.has(n)||s.push(n):n&&n.length&&"string"!==r(n)&&i(n)})}(arguments),n&&!t&&u()),this},remove:function(){return we.each(arguments,function(e,t){for(var n;(n=we.inArray(t,s,n))>-1;)s.splice(n,1),n<=c&&c--}),this},has:function(e){return e?we.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return o=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return o=a=[],n||t||(s=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!i}};return d},we.extend({Deferred:function(t){var n=[["notify","progress",we.Callbacks("memory"),we.Callbacks("memory"),2],["resolve","done",we.Callbacks("once memory"),we.Callbacks("once memory"),0,"resolved"],["reject","fail",we.Callbacks("once memory"),we.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return we.Deferred(function(t){we.each(n,function(n,r){var i=ye(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&ye(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){function o(t,n,r,i){return function(){var a=this,l=arguments,d=function p(){var e,p;if(!(t<s)){if((e=r.apply(a,l))===n.promise())throw new TypeError("Thenable self-resolution");p=e&&("object"==("undefined"==typeof e?"undefined":_typeof(e))||"function"==typeof e)&&e.then,ye(p)?i?p.call(e,o(s,n,c,i),o(s,n,u,i)):(s++,p.call(e,o(s,n,c,i),o(s,n,u,i),o(s,n,c,n.notifyWith))):(r!==c&&(a=void 0,l=[e]),(i||n.resolveWith)(a,l))}},f=i?d:function(){try{d()}catch(e){we.Deferred.exceptionHook&&we.Deferred.exceptionHook(e,f.stackTrace),t+1>=s&&(r!==u&&(a=void 0,l=[e]),n.rejectWith(a,l))}};t?f():(we.Deferred.getStackHook&&(f.stackTrace=we.Deferred.getStackHook()),e.setTimeout(f))}}var s=0;return we.Deferred(function(e){n[0][3].add(o(0,e,ye(i)?i:c,e.notifyWith)),n[1][3].add(o(0,e,ye(t)?t:c)),n[2][3].add(o(0,e,ye(r)?r:u))}).promise()},promise:function(e){return null!=e?we.extend(e,i):i}},o={};return we.each(n,function(e,t){var s=t[2],a=t[5];i[t[1]]=s.add,a&&s.add(function(){r=a},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),s.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=le.call(arguments),o=we.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?le.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(d(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||ye(i[n]&&i[n].then)))return o.then();for(;n--;)d(i[n],s(n),o.reject);return o.promise()}});var He=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;we.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&He.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},we.readyException=function(t){e.setTimeout(function(){throw t})};var Le=we.Deferred();we.fn.ready=function(e){return Le.then(e)["catch"](function(e){we.readyException(e)}),this},we.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--we.readyWait:we.isReady)||(we.isReady=!0,!0!==e&&--we.readyWait>0||Le.resolveWith(se,[we]))}}),we.ready.then=Le.then,"complete"===se.readyState||"loading"!==se.readyState&&!se.documentElement.doScroll?e.setTimeout(we.ready):(se.addEventListener("DOMContentLoaded",f),e.addEventListener("load",f));var Pe=function Zt(e,t,n,i,o,s,a){var l=0,c=e.length,u=null==n;if("object"===r(n)){o=!0;for(l in n)Zt(e,t,l,n[l],!0,s,a)}else if(void 0!==i&&(o=!0,ye(i)||(a=!0),u&&(a?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(we(e),n)})),t))for(;l<c;l++)t(e[l],n,a?i:i.call(e[l],l,t(e[l],n)));return o?e:u?t.call(e):c?t(e[0],n):s},Oe=/^-ms-/,Re=/-([a-z])/g,Me=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};v.uid=1,v.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Me(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[h(t)]=n;else for(r in t)i[h(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][h(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(h):(t=h(t))in r?[t]:t.match(_e)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||we.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!we.isEmptyObject(t)}};var Ie=new v,We=new v,Fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Be=/[A-Z]/g;we.extend({hasData:function(e){return We.hasData(e)||Ie.hasData(e)},data:function(e,t,n){return We.access(e,t,n)},removeData:function(e,t){We.remove(e,t)},_data:function(e,t,n){return Ie.access(e,t,n)},_removeData:function(e,t){Ie.remove(e,t)}}),we.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=We.get(o),1===o.nodeType&&!Ie.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=h(r.slice(5)),m(o,r,i[r]));Ie.set(o,"hasDataAttrs",!0)}return i}return"object"==("undefined"==typeof e?"undefined":_typeof(e))?this.each(function(){We.set(this,e)}):Pe(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=We.get(o,e)))return n;if(void 0!==(n=m(o,e)))return n}else this.each(function(){We.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){We.remove(this,e)})}}),we.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Ie.get(e,t),n&&(!r||Array.isArray(n)?r=Ie.access(e,t,we.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=we.queue(e,t),r=n.length,i=n.shift(),o=we._queueHooks(e,t),s=function(){we.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ie.get(e,n)||Ie.access(e,n,{empty:we.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",n])})})}}),we.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?we.queue(this[0],e):void 0===t?this:this.each(function(){var n=we.queue(this,e,t);we._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&we.dequeue(this,e)})},dequeue:function(e){return this.each(function(){we.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=we.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Ie.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var $e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ze=new RegExp("^(?:([+-])=|)("+$e+")([a-z%]*)$","i"),Ue=["Top","Right","Bottom","Left"],Xe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&we.contains(e.ownerDocument,e)&&"none"===we.css(e,"display")},Ve=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i},Ke={};we.fn.extend({show:function(){return x(this,!0)},hide:function(){return x(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Xe(this)?we(this).show():we(this).hide()})}});var Qe=/^(?:checkbox|radio)$/i,Ye=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ge=/^$|^module$|\/(?:java|ecma)script/i,Je={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Je.optgroup=Je.option,Je.tbody=Je.tfoot=Je.colgroup=Je.caption=Je.thead,Je.th=Je.td;var Ze=/<|&#?\w+;/;!function(){var e=se.createDocumentFragment().appendChild(se.createElement("div")),t=se.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),me.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",me.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var et=se.documentElement,tt=/^key/,nt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,rt=/^([^.]*)(?:\.(.+)|)/;we.event={global:{},add:function(e,t,n,r,i){var o,s,a,l,c,u,d,f,p,h,v,g=Ie.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&we.find.matchesSelector(et,i),n.guid||(n.guid=we.guid++),(l=g.events)||(l=g.events={}),(s=g.handle)||(s=g.handle=function(t){return"undefined"!=typeof we&&we.event.triggered!==t.type?we.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(_e)||[""]).length;c--;)p=v=(a=rt.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),p&&(d=we.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,d=we.event.special[p]||{},u=we.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&we.expr.match.needsContext.test(i),namespace:h.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(p,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,u):f.push(u),we.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,c,u,d,f,p,h,v,g=Ie.hasData(e)&&Ie.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(_e)||[""]).length;c--;)if(a=rt.exec(t[c])||[],p=v=a[1],h=(a[2]||"").split(".").sort(),p){for(d=we.event.special[p]||{},f=l[p=(r?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)u=f[o],!i&&v!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));s&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,g.handle)||we.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)we.event.remove(e,p+t[c],n,r,!0);we.isEmptyObject(l)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=we.event.fix(e),l=new Array(arguments.length),c=(Ie.get(this,"events")||{})[a.type]||[],u=we.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=we.event.handlers.call(this,a,c),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((we.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?we(i,this).index(c)>-1:we.find(i,this,null,[c]).length),s[i]&&o.push(r);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(we.Event.prototype,e,{enumerable:!0,configurable:!0,get:ye(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[we.expando]?e:new we.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==S()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===S()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&o(this,"input"))return this.click(),!1},_default:function(e){return o(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},we.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},we.Event=function(e,t){return this instanceof we.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?k:j,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&we.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[we.expando]=!0,void 0):new we.Event(e,t)},we.Event.prototype={constructor:we.Event,isDefaultPrevented:j,isPropagationStopped:j,isImmediatePropagationStopped:j,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=k,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=k,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=k,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},we.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&tt.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&nt.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},we.event.addProp),we.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){we.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||we.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),we.fn.extend({on:function(e,t,n,r){return q(this,e,t,n,r)},one:function(e,t,n,r){return q(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,we(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==("undefined"==typeof e?"undefined":_typeof(e))){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=j),this.each(function(){we.event.remove(this,e,n,t)})}});var it=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ot=/<script|<style|<link/i,st=/checked\s*(?:[^=]|=\s*.checked.)/i,at=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;we.extend({htmlPrefilter:function(e){return e.replace(it,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),l=we.contains(e.ownerDocument,e);if(!(me.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||we.isXMLDoc(e)))for(s=w(a),r=0,i=(o=w(e)).length;r<i;r++)_(o[r],s[r]);if(t)if(n)for(o=o||w(e),s=s||w(a),r=0,i=o.length;r<i;r++)A(o[r],s[r]);else A(e,a);return(s=w(a,"script")).length>0&&C(s,!l&&w(e,"script")),a},cleanData:function(e){for(var t,n,r,i=we.event.special,o=0;void 0!==(n=e[o]);o++)if(Me(n)){if(t=n[Ie.expando]){if(t.events)for(r in t.events)i[r]?we.event.remove(n,r):we.removeEvent(n,r,t.handle);n[Ie.expando]=void 0}n[We.expando]&&(n[We.expando]=void 0)}}}),we.fn.extend({detach:function(e){return L(this,e,!0)},remove:function(e){return L(this,e)},text:function(e){return Pe(this,function(e){return void 0===e?we.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return H(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||N(this,e).appendChild(e)})},prepend:function(){return H(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=N(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return H(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return H(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(we.cleanData(w(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return we.clone(this,e,t)})},html:function(e){return Pe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ot.test(e)&&!Je[(Ye.exec(e)||["",""])[1].toLowerCase()]){e=we.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(we.cleanData(w(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return H(this,arguments,function(t){var n=this.parentNode;we.inArray(this,e)<0&&(we.cleanData(w(this)),n&&n.replaceChild(t,this))},e)}}),we.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){we.fn[e]=function(e){for(var n,r=[],i=we(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),we(i[s])[t](n),ue.apply(r,n.get());return this.pushStack(r)}});var lt=new RegExp("^("+$e+")(?!px)[a-z%]+$","i"),ct=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},ut=new RegExp(Ue.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",et.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);r="1%"!==t.top,a=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),i=36===n(t.width),c.style.position="absolute",o=36===c.offsetWidth||"absolute",et.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var r,i,o,s,a,l=se.createElement("div"),c=se.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",me.clearCloneStyle="content-box"===c.style.backgroundClip,we.extend(me,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),a},scrollboxSize:function(){return t(),o}}))}();var dt=/^(none|table(?!-c[ea]).+)/,ft=/^--/,pt={position:"absolute",visibility:"hidden",display:"block"},ht={letterSpacing:"0",fontWeight:"400"},vt=["Webkit","Moz","ms"],gt=se.createElement("div").style;we.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=P(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=h(t),l=ft.test(t),c=e.style;if(l||(t=M(a)),s=we.cssHooks[t]||we.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:c[t];"string"==(o="undefined"==typeof n?"undefined":_typeof(n))&&(i=ze.exec(n))&&i[1]&&(n=y(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(we.cssNumber[a]?"":"px")),me.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,s,a=h(t);return ft.test(t)||(t=M(a)),(s=we.cssHooks[t]||we.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=P(e,t,r)),"normal"===i&&t in ht&&(i=ht[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),we.each(["height","width"],function(e,t){we.cssHooks[t]={get:function(e,n,r){if(n)return!dt.test(we.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?F(e,t,r):Ve(e,pt,function(){return F(e,t,r)})},set:function(e,n,r){var i,o=ct(e),s="border-box"===we.css(e,"boxSizing",!1,o),a=r&&W(e,t,r,s,o);return s&&me.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-W(e,t,"border",!1,o)-.5)),a&&(i=ze.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=we.css(e,t)),I(e,n,a)}}}),we.cssHooks.marginLeft=O(me.reliableMarginLeft,function(e,t){if(t)return(parseFloat(P(e,"marginLeft"))||e.getBoundingClientRect().left-Ve(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),we.each({margin:"",padding:"",border:"Width"},function(e,t){we.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Ue[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(we.cssHooks[e+t].set=I)}),we.fn.extend({css:function(e,t){return Pe(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=ct(e),i=t.length;s<i;s++)o[t[s]]=we.css(e,t[s],!1,r);return o}return void 0!==n?we.style(e,t,n):we.css(e,t)},e,t,arguments.length>1)}}),we.Tween=B,B.prototype={constructor:B,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||we.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(we.cssNumber[n]?"":"px")},cur:function(){var e=B.propHooks[this.prop];return e&&e.get?e.get(this):B.propHooks._default.get(this)},run:function(e){var t,n=B.propHooks[this.prop];return this.options.duration?this.pos=t=we.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=we.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){we.fx.step[e.prop]?we.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[we.cssProps[e.prop]]&&!we.cssHooks[e.prop]?e.elem[e.prop]=e.now:we.style(e.elem,e.prop,e.now+e.unit)}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},we.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},we.fx=B.prototype.init,we.fx.step={};var mt,yt,bt=/^(?:toggle|show|hide)$/,xt=/queueHooks$/;we.Animation=we.extend(Q,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return y(n.elem,e,ze.exec(t),n),n}]},tweener:function(e,t){ye(e)?(t=e,e=["*"]):e=e.match(_e);for(var n,r=0,i=e.length;r<i;r++)n=e[r],Q.tweeners[n]=Q.tweeners[n]||[],Q.tweeners[n].unshift(t)},prefilters:[V],prefilter:function(e,t){t?Q.prefilters.unshift(e):Q.prefilters.push(e)}}),we.speed=function(e,t,n){var r=e&&"object"==("undefined"==typeof e?"undefined":_typeof(e))?we.extend({},e):{complete:n||!n&&t||ye(e)&&e,duration:e,easing:n&&t||t&&!ye(t)&&t};return we.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in we.fx.speeds?r.duration=we.fx.speeds[r.duration]:r.duration=we.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){ye(r.old)&&r.old.call(this),r.queue&&we.dequeue(this,r.queue)},r},we.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Xe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=we.isEmptyObject(e),o=we.speed(t,n,r),s=function(){
var t=Q(this,we.extend({},e),o);(i||Ie.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=we.timers,s=Ie.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&xt.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||we.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ie.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=we.timers,s=r?r.length:0;for(n.finish=!0,we.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),we.each(["toggle","show","hide"],function(e,t){var n=we.fn[t];we.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(U(t,!0),e,r,i)}}),we.each({slideDown:U("show"),slideUp:U("hide"),slideToggle:U("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){we.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),we.timers=[],we.fx.tick=function(){var e,t=0,n=we.timers;for(mt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||we.fx.stop(),mt=void 0},we.fx.timer=function(e){we.timers.push(e),we.fx.start()},we.fx.interval=13,we.fx.start=function(){yt||(yt=!0,$())},we.fx.stop=function(){yt=null},we.fx.speeds={slow:600,fast:200,_default:400},we.fn.delay=function(t,n){return t=we.fx?we.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=se.createElement("input"),t=se.createElement("select").appendChild(se.createElement("option"));e.type="checkbox",me.checkOn=""!==e.value,me.optSelected=t.selected,(e=se.createElement("input")).value="t",e.type="radio",me.radioValue="t"===e.value}();var wt,Ct=we.expr.attrHandle;we.fn.extend({attr:function(e,t){return Pe(this,we.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){we.removeAttr(this,e)})}}),we.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?we.prop(e,t,n):(1===o&&we.isXMLDoc(e)||(i=we.attrHooks[t.toLowerCase()]||(we.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void we.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=we.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!me.radioValue&&"radio"===t&&o(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(_e);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?we.removeAttr(e,n):e.setAttribute(n,n),n}},we.each(we.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Ct[t]||we.find.attr;Ct[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=Ct[s],Ct[s]=i,i=null!=n(e,t,r)?s:null,Ct[s]=o),i}});var Tt=/^(?:input|select|textarea|button)$/i,kt=/^(?:a|area)$/i;we.fn.extend({prop:function(e,t){return Pe(this,we.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[we.propFix[e]||e]})}}),we.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&we.isXMLDoc(e)||(t=we.propFix[t]||t,i=we.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=we.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||kt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),me.optSelected||(we.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),we.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){we.propFix[this.toLowerCase()]=this}),we.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,l=0;if(ye(e))return this.each(function(t){we(this).addClass(e.call(this,t,G(this)))});if((t=J(e)).length)for(;n=this[l++];)if(i=G(n),r=1===n.nodeType&&" "+Y(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=Y(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,l=0;if(ye(e))return this.each(function(t){we(this).removeClass(e.call(this,t,G(this)))});if(!arguments.length)return this.attr("class","");if((t=J(e)).length)for(;n=this[l++];)if(i=G(n),r=1===n.nodeType&&" "+Y(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=Y(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n="undefined"==typeof e?"undefined":_typeof(e),r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):ye(e)?this.each(function(n){we(this).toggleClass(e.call(this,n,G(this),t),t)}):this.each(function(){var t,i,o,s;if(r)for(i=0,o=we(this),s=J(e);t=s[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=G(this))&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+Y(G(n))+" ").indexOf(t)>-1)return!0;return!1}});var jt=/\r/g;we.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=ye(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,we(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=we.map(i,function(e){return null==e?"":e+""})),(t=we.valHooks[this.type]||we.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=we.valHooks[i.type]||we.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(jt,""):null==n?"":n:void 0}}),we.extend({valHooks:{option:{get:function(e){var t=we.find.attr(e,"value");return null!=t?t:Y(we.text(e))}},select:{get:function(e){var t,n,r,i=e.options,s=e.selectedIndex,a="select-one"===e.type,l=a?null:[],c=a?s+1:i.length;for(r=s<0?c:a?s:0;r<c;r++)if(((n=i[r]).selected||r===s)&&!n.disabled&&(!n.parentNode.disabled||!o(n.parentNode,"optgroup"))){if(t=we(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,i=e.options,o=we.makeArray(t),s=i.length;s--;)((r=i[s]).selected=we.inArray(we.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),we.each(["radio","checkbox"],function(){we.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=we.inArray(we(e).val(),t)>-1}},me.checkOn||(we.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),me.focusin="onfocusin"in e;var St=/^(?:focusinfocus|focusoutblur)$/,qt=function(e){e.stopPropagation()};we.extend(we.event,{trigger:function(t,n,r,i){var o,s,a,l,c,u,d,f,p=[r||se],h=he.call(t,"type")?t.type:t,v=he.call(t,"namespace")?t.namespace.split("."):[];if(s=f=a=r=r||se,3!==r.nodeType&&8!==r.nodeType&&!St.test(h+we.event.triggered)&&(h.indexOf(".")>-1&&(h=(v=h.split(".")).shift(),v.sort()),c=h.indexOf(":")<0&&"on"+h,t=t[we.expando]?t:new we.Event(h,"object"==("undefined"==typeof t?"undefined":_typeof(t))&&t),t.isTrigger=i?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:we.makeArray(n,[t]),d=we.event.special[h]||{},i||!d.trigger||!1!==d.trigger.apply(r,n))){if(!i&&!d.noBubble&&!be(r)){for(l=d.delegateType||h,St.test(l+h)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||se)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=p[o++])&&!t.isPropagationStopped();)f=s,t.type=o>1?l:d.bindType||h,(u=(Ie.get(s,"events")||{})[t.type]&&Ie.get(s,"handle"))&&u.apply(s,n),(u=c&&s[c])&&u.apply&&Me(s)&&(t.result=u.apply(s,n),!1===t.result&&t.preventDefault());return t.type=h,i||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),n)||!Me(r)||c&&ye(r[h])&&!be(r)&&((a=r[c])&&(r[c]=null),we.event.triggered=h,t.isPropagationStopped()&&f.addEventListener(h,qt),r[h](),t.isPropagationStopped()&&f.removeEventListener(h,qt),we.event.triggered=void 0,a&&(r[c]=a)),t.result}},simulate:function(e,t,n){var r=we.extend(new we.Event,n,{type:e,isSimulated:!0});we.event.trigger(r,null,t)}}),we.fn.extend({trigger:function(e,t){return this.each(function(){we.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return we.event.trigger(e,t,n,!0)}}),me.focusin||we.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){we.event.simulate(t,e.target,we.event.fix(e))};we.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Ie.access(r,t);i||r.addEventListener(e,n,!0),Ie.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ie.access(r,t)-1;i?Ie.access(r,t,i):(r.removeEventListener(e,n,!0),Ie.remove(r,t))}}});var Nt=e.location,Et=Date.now(),Dt=/\?/;we.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(n){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||we.error("Invalid XML: "+e),t};var At=/\[\]$/,_t=/\r?\n/g,Ht=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;we.param=function(e,t){var n,r=[],i=function(e,t){var n=ye(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!we.isPlainObject(e))we.each(e,function(){i(this.name,this.value)});else for(n in e)Z(n,e[n],t,i);return r.join("&")},we.fn.extend({serialize:function(){return we.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=we.prop(this,"elements");return e?we.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!we(this).is(":disabled")&&Lt.test(this.nodeName)&&!Ht.test(e)&&(this.checked||!Qe.test(e))}).map(function(e,t){var n=we(this).val();return null==n?null:Array.isArray(n)?we.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var Pt=/%20/g,Ot=/#.*$/,Rt=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Wt=/^(?:GET|HEAD)$/,Ft=/^\/\//,Bt={},$t={},zt="*/".concat("*"),Ut=se.createElement("a");Ut.href=Nt.href,we.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Nt.href,type:"GET",isLocal:It.test(Nt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":we.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?ne(ne(e,we.ajaxSettings),t):ne(we.ajaxSettings,e)},ajaxPrefilter:ee(Bt),ajaxTransport:ee($t),ajax:function(e,t){function n(e,t,n,s){var l,d,f,b,x,w=t;c||(c=!0,a&&T.clearTimeout(a),r=void 0,o=s||"",C.readyState=e>0?4:0,l=e>=200&&e<300||304===e,n&&(b=re(p,C,n)),b=ie(p,b,C,l),l?(p.ifModified&&((x=C.getResponseHeader("Last-Modified"))&&(we.lastModified[i]=x),(x=C.getResponseHeader("etag"))&&(we.etag[i]=x)),204===e||"HEAD"===p.type?w="nocontent":304===e?w="notmodified":(w=b.state,d=b.data,l=!(f=b.error))):(f=w,!e&&w||(w="error",e<0&&(e=0))),C.status=e,C.statusText=(t||w)+"",l?g.resolveWith(h,[d,w,C]):g.rejectWith(h,[C,w,f]),C.statusCode(y),y=void 0,u&&v.trigger(l?"ajaxSuccess":"ajaxError",[C,p,l?d:f]),m.fireWith(h,[C,w]),u&&(v.trigger("ajaxComplete",[C,p]),--we.active||we.event.trigger("ajaxStop")))}"object"==("undefined"==typeof e?"undefined":_typeof(e))&&(t=e,e=void 0),t=t||{};var r,i,o,s,a,l,c,u,d,f,p=we.ajaxSetup({},t),h=p.context||p,v=p.context&&(h.nodeType||h.jquery)?we(h):we.event,g=we.Deferred(),m=we.Callbacks("once memory"),y=p.statusCode||{},b={},x={},w="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Mt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)C.always(e[C.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||w;return r&&r.abort(t),n(0,t),this}};if(g.promise(C),p.url=((e||p.url||Nt.href)+"").replace(Ft,Nt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(_e)||[""],null==p.crossDomain){l=se.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ut.protocol+"//"+Ut.host!=l.protocol+"//"+l.host}catch(T){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=we.param(p.data,p.traditional)),te(Bt,p,t,C),c)return C;(u=we.event&&p.global)&&0==we.active++&&we.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Wt.test(p.type),i=p.url.replace(Ot,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Pt,"+")):(f=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(Dt.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(Rt,"$1"),f=(Dt.test(i)?"&":"?")+"_="+Et++ +f),p.url=i+f),p.ifModified&&(we.lastModified[i]&&C.setRequestHeader("If-Modified-Since",we.lastModified[i]),we.etag[i]&&C.setRequestHeader("If-None-Match",we.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+zt+"; q=0.01":""):p.accepts["*"]);for(d in p.headers)C.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(h,C,p)||c))return C.abort();if(w="abort",m.add(p.complete),C.done(p.success),C.fail(p.error),r=te($t,p,t,C)){if(C.readyState=1,u&&v.trigger("ajaxSend",[C,p]),c)return C;p.async&&p.timeout>0&&(a=T.setTimeout(function(){C.abort("timeout")},p.timeout));try{c=!1,r.send(b,n)}catch(T){if(c)throw T;n(-1,T)}}else n(-1,"No Transport");return C},getJSON:function(e,t,n){return we.get(e,t,n,"json")},getScript:function(e,t){return we.get(e,void 0,t,"script")}}),we.each(["get","post"],function(e,t){we[t]=function(e,n,r,i){return ye(n)&&(i=i||r,r=n,n=void 0),we.ajax(we.extend({url:e,type:t,dataType:i,data:n,success:r},we.isPlainObject(e)&&e))}}),we._evalUrl=function(e){return we.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},we.fn.extend({wrapAll:function(e){var t;return this[0]&&(ye(e)&&(e=e.call(this[0])),t=we(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ye(e)?this.each(function(t){we(this).wrapInner(e.call(this,t))}):this.each(function(){var t=we(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ye(e);return this.each(function(n){we(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){we(this).replaceWith(this.childNodes)}),this}}),we.expr.pseudos.hidden=function(e){return!we.expr.pseudos.visible(e)},we.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},we.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Xt={0:200,1223:204},Vt=we.ajaxSettings.xhr();me.cors=!!Vt&&"withCredentials"in Vt,me.ajax=Vt=!!Vt,we.ajaxTransport(function(e){var t,n;if(me.cors||Vt&&!e.crossDomain)return{send:function(r,i){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(o in r)s.setRequestHeader(o,r[o]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Xt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&a.setTimeout(function(){t&&n()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(a){if(t)throw a}},abort:function(){t&&t()}}}),we.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),we.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return we.globalEval(e),e}}}),we.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),we.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=we("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),se.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Kt=[],Qt=/(=)\?(?=&|$)|\?\?/;we.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Kt.pop()||we.expando+"_"+Et++;return this[e]=!0,e}}),we.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=ye(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Qt,"$1"+i):!1!==t.jsonp&&(t.url+=(Dt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||we.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){void 0===o?we(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Kt.push(i)),s&&ye(o)&&o(s[0]),s=o=void 0}),"script"}),me.createHTMLDocument=function(){var e=se.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),we.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(me.createHTMLDocument?((r=(t=se.implementation.createHTMLDocument("")).createElement("base")).href=se.location.href,t.head.appendChild(r)):t=se),i=qe.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=T([e],t,o),o&&o.length&&we(o).remove(),we.merge([],i.childNodes))},we.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=Y(e.slice(a)),e=e.slice(0,a)),ye(t)?(n=t,t=void 0):t&&"object"==("undefined"==typeof t?"undefined":_typeof(t))&&(i="POST"),s.length>0&&we.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?we("<div>").append(we.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},we.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){we.fn[t]=function(e){return this.on(t,e)}}),we.expr.pseudos.animated=function(e){return we.grep(we.timers,function(t){return e===t.elem}).length},we.offset={setOffset:function(e,t,n){var r,i,o,s,a,l,c,u=we.css(e,"position"),d=we(e),f={};"static"===u&&(e.style.position="relative"),a=d.offset(),o=we.css(e,"top"),l=we.css(e,"left"),(c=("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1)?(s=(r=d.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),ye(t)&&(t=t.call(e,n,we.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):d.css(f)}},we.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){we.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===we.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===we.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=we(e).offset()).top+=we.css(e,"borderTopWidth",!0),i.left+=we.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-we.css(r,"marginTop",!0),left:t.left-i.left-we.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===we.css(e,"position");)e=e.offsetParent;return e||et})}}),we.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;we.fn[e]=function(r){return Pe(this,function(e,r,i){var o;return be(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),we.each(["top","left"],function(e,t){we.cssHooks[t]=O(me.pixelPosition,function(e,n){if(n)return n=P(e,t),lt.test(n)?we(e).position()[t]+"px":n})}),we.each({Height:"height",Width:"width"},function(e,t){we.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){we.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return Pe(this,function(t,n,i){var o;return be(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?we.css(t,n,a):we.style(t,n,i,a)},t,s?i:void 0,s)}})}),we.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){we.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),we.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),we.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),we.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),ye(e))return r=le.call(arguments,2),i=function(){return e.apply(t||this,r.concat(le.call(arguments)))},i.guid=e.guid=e.guid||we.guid++,i},we.holdReady=function(e){e?we.readyWait++:we.ready(!0)},we.isArray=Array.isArray,we.parseJSON=JSON.parse,we.nodeName=o,we.isFunction=ye,we.isWindow=be,we.camelCase=h,we.type=r,we.now=Date.now,we.isNumeric=function(e){var t=we.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return we});var Yt=e.jQuery,Gt=e.$;return we.noConflict=function(t){return e.$===we&&(e.$=Gt),t&&e.jQuery===we&&(e.jQuery=Yt),we},t||(e.jQuery=e.$=we),we}),!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){var t=-1,n=-1,r=function(e){return parseFloat(e)||0},i=function c(t){var n=1,c=e(t),i=null,o=[];return c.each(function(){var t=e(this),s=t.offset().top-r(t.css("margin-top")),a=o.length>0?o[o.length-1]:null;null===a?o.push(t):Math.floor(Math.abs(i-s))<=n?o[o.length-1]=a.add(t):o.push(t),i=s}),o},o=function(t){var n={byRow:!0,property:"height",target:null,remove:!1};return"object"==("undefined"==typeof t?"undefined":_typeof(t))?e.extend(n,t):("boolean"==typeof t?n.byRow=t:"remove"===t&&(n.remove=!0),n)},s=e.fn.matchHeight=function(t){var n=o(t);if(n.remove){var r=this;return this.css(n.property,""),e.each(s._groups,function(e,t){t.elements=t.elements.not(r)}),this}return this.length<=1&&!n.target?this:(s._groups.push({elements:this,options:n}),s._apply(this,n),this)};s.version="0.7.2",s._groups=[],s._throttle=80,s._maintainScroll=!1,s._beforeUpdate=null,s._afterUpdate=null,s._rows=i,s._parse=r,s._parseOptions=o,s._apply=function(t,n){var a=o(n),l=e(t),c=[l],u=e(window).scrollTop(),d=e("html").outerHeight(!0),f=l.parents().filter(":hidden");return f.each(function(){var t=e(this);t.data("style-cache",t.attr("style"))}),f.css("display","block"),a.byRow&&!a.target&&(l.each(function(){var t=e(this),n=t.css("display");"inline-block"!==n&&"flex"!==n&&"inline-flex"!==n&&(n="block"),t.data("style-cache",t.attr("style")),t.css({display:n,"padding-top":"0","padding-bottom":"0","margin-top":"0","margin-bottom":"0","border-top-width":"0","border-bottom-width":"0",height:"100px",overflow:"hidden"})}),c=i(l),l.each(function(){var t=e(this);t.attr("style",t.data("style-cache")||"")})),e.each(c,function(t,n){var i=e(n),o=0;if(a.target)o=a.target.outerHeight(!1);else{if(a.byRow&&i.length<=1)return void i.css(a.property,"");i.each(function(){var t=e(this),n=t.attr("style"),r=t.css("display");"inline-block"!==r&&"flex"!==r&&"inline-flex"!==r&&(r="block");var i={display:r};i[a.property]="",t.css(i),t.outerHeight(!1)>o&&(o=t.outerHeight(!1)),n?t.attr("style",n):t.css("display","")})}i.each(function(){var t=e(this),n=0;a.target&&t.is(a.target)||("border-box"!==t.css("box-sizing")&&(n+=r(t.css("border-top-width"))+r(t.css("border-bottom-width")),n+=r(t.css("padding-top"))+r(t.css("padding-bottom"))),t.css(a.property,o-n+"px"))})}),f.each(function(){var t=e(this);t.attr("style",t.data("style-cache")||null)}),s._maintainScroll&&e(window).scrollTop(u/d*e("html").outerHeight(!0)),this},s._applyDataApi=function(){var t={};e("[data-match-height], [data-mh]").each(function(){var n=e(this),r=n.attr("data-mh")||n.attr("data-match-height");r in t?t[r]=t[r].add(n):t[r]=n}),e.each(t,function(){this.matchHeight(!0)})};var a=function(t){s._beforeUpdate&&s._beforeUpdate(t,s._groups),e.each(s._groups,function(){s._apply(this.elements,this.options)}),s._afterUpdate&&s._afterUpdate(t,s._groups)};s._update=function(r,i){if(i&&"resize"===i.type){var o=e(window).width();if(o===t)return;t=o}r?n===-1&&(n=setTimeout(function(){a(i),n=-1},s._throttle)):a(i)},e(s._applyDataApi);var l=e.fn.on?"on":"bind";e(window)[l]("load",function(e){s._update(!1,e)}),e(window)[l]("resize orientationchange",function(e){s._update(!0,e)})}),!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e("object"==("undefined"==typeof exports?"undefined":_typeof(exports))?require("jquery"):jQuery)}(function(e){var t,n=navigator.userAgent,r=/iphone/i.test(n),i=/chrome/i.test(n),o=/android/i.test(n);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},autoclear:!0,dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(n,s){var a,l,c,u,d,f,p,h;if(!n&&this.length>0){a=e(this[0]);var v=a.data(e.mask.dataName);return v?v():void 0}return s=e.extend({autoclear:e.mask.autoclear,placeholder:e.mask.placeholder,completed:null},s),l=e.mask.definitions,c=[],u=p=n.length,d=null,e.each(n.split(""),function(e,t){"?"==t?(p--,u=e):l[t]?(c.push(new RegExp(l[t])),null===d&&(d=c.length-1),u>e&&(f=c.length-1)):c.push(null)}),this.trigger("unmask").each(function(){function a(){if(s.completed){for(var e=d;f>=e;e++)if(c[e]&&N[e]===v(e))return;s.completed.call(q)}}function v(e){return s.placeholder.charAt(e<s.placeholder.length?e:0)}function g(e){for(;++e<p&&!c[e];);return e}function m(e){for(;--e>=0&&!c[e];);return e}function y(e,t){var n,r;if(!(0>e)){for(n=e,r=g(t);p>n;n++)if(c[n]){if(!(p>r&&c[n].test(N[r])))break;N[n]=N[r],N[r]=v(r),r=g(r)}j(),q.caret(Math.max(d,e))}}function b(e){var t,n,r,i;for(t=e,n=v(e);p>t;t++)if(c[t]){if(r=g(t),i=N[t],N[t]=n,!(p>r&&c[r].test(i)))break;n=i}}function x(){var e=q.val(),t=q.caret();if(h&&h.length&&h.length>e.length){for(S(!0);t.begin>0&&!c[t.begin-1];)t.begin--;if(0===t.begin)for(;t.begin<d&&!c[t.begin];)t.begin++;q.caret(t.begin,t.begin)}else{for(S(!0);t.begin<p&&!c[t.begin];)t.begin++;q.caret(t.begin,t.begin)}a()}function w(){S(),q.val()!=D&&q.change()}function C(e){if(!q.prop("readonly")){var t,n,i,o=e.which||e.keyCode;h=q.val(),8===o||46===o||r&&127===o?(t=q.caret(),n=t.begin,i=t.end,i-n===0&&(n=46!==o?m(n):i=g(n-1),i=46===o?g(i):i),k(n,i),y(n,i-1),e.preventDefault()):13===o?w.call(this,e):27===o&&(q.val(D),q.caret(0,S()),e.preventDefault())}}function T(t){if(!q.prop("readonly")){var n,r,i,s=t.which||t.keyCode,l=q.caret();if(!(t.ctrlKey||t.altKey||t.metaKey||32>s)&&s&&13!==s){if(l.end-l.begin!==0&&(k(l.begin,l.end),y(l.begin,l.end-1)),n=g(l.begin-1),p>n&&(r=String.fromCharCode(s),c[n].test(r))){if(b(n),N[n]=r,j(),i=g(n),o){var u=function(){e.proxy(e.fn.caret,q,i)()};setTimeout(u,0)}else q.caret(i);l.begin<=f&&a()}t.preventDefault()}}}function k(e,t){var n;for(n=e;t>n&&p>n;n++)c[n]&&(N[n]=v(n))}function j(){q.val(N.join(""))}function S(e){var t,n,r,i=q.val(),o=-1;for(t=0,r=0;p>t;t++)if(c[t]){for(N[t]=v(t);r++<i.length;)if(n=i.charAt(r-1),c[t].test(n)){N[t]=n,o=t;break}if(r>i.length){k(t+1,p);break}}else N[t]===i.charAt(r)&&r++,u>t&&(o=t);return e?j():u>o+1?s.autoclear||N.join("")===E?(q.val()&&q.val(""),k(0,p)):j():(j(),q.val(q.val().substring(0,o+1))),u?t:d}var q=e(this),N=e.map(n.split(""),function(e,t){return"?"!=e?l[e]?v(t):e:void 0}),E=N.join(""),D=q.val();q.data(e.mask.dataName,function(){return e.map(N,function(e,t){return c[t]&&e!=v(t)?e:null}).join("")}),q.one("unmask",function(){q.off(".mask").removeData(e.mask.dataName)}).on("focus.mask",function(){if(!q.prop("readonly")){clearTimeout(t);var e;D=q.val(),e=S(),t=setTimeout(function(){q.get(0)===document.activeElement&&(j(),e==n.replace("?","").length?q.caret(0,e):q.caret(e))},10)}}).on("blur.mask",w).on("keydown.mask",C).on("keypress.mask",T).on("input.mask paste.mask",function(){q.prop("readonly")||setTimeout(function(){var e=S(!0);q.caret(e),a()},0)}),i&&o&&q.off("input.mask").on("input.mask",x),S()})}})}),!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=e($||require("jquery")):e(jQuery)}(function(e){function t(t,n){this.element=t,this.options=e.extend({},i,n);var r=this.options.locale;void 0!==this.options.locales[r]&&e.extend(this.options,this.options.locales[r]),this.init()}function n(t){if(!e(t.target).parents().hasClass("jq-selectbox")&&"OPTION"!=t.target.nodeName&&e("div.jq-selectbox.opened").length){
var n=e("div.jq-selectbox.opened"),i=e("div.jq-selectbox__search input",n),o=e("div.jq-selectbox__dropdown",n);n.find("select").data("_"+r).options.onSelectClosed.call(n),i.length&&i.val("").keyup(),o.hide().find("li.sel").addClass("selected"),n.removeClass("focused opened dropup dropdown")}}var r="styler",i={idSuffix:"-styler",filePlaceholder:"Файл не выбран",fileBrowse:"Обзор...",fileNumber:"Выбрано файлов: %s",selectPlaceholder:"Выберите...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Совпадений не найдено",selectSearchPlaceholder:"Поиск...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};t.prototype={init:function(){function t(){void 0!==r.attr("id")&&""!==r.attr("id")&&(this.id=r.attr("id")+i.idSuffix),this.title=r.attr("title"),this.classes=r.attr("class"),this.data=r.data()}var r=e(this.element),i=this.options,o=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),s=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));if(r.is(":checkbox")){var a=function(){var n=new t,i=e('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:n.id,title:n.title}).addClass(n.classes).data(n.data);r.after(i).prependTo(i),r.is(":checked")&&i.addClass("checked"),r.is(":disabled")&&i.addClass("disabled"),i.click(function(e){e.preventDefault(),r.triggerHandler("click"),i.is(".disabled")||(r.is(":checked")?(r.prop("checked",!1),i.removeClass("checked")):(r.prop("checked",!0),i.addClass("checked")),r.focus().change())}),r.closest("label").add('label[for="'+r.attr("id")+'"]').on("click.styler",function(t){e(t.target).is("a")||e(t.target).closest(i).length||(i.triggerHandler("click"),t.preventDefault())}),r.on("change.styler",function(){r.is(":checked")?i.addClass("checked"):i.removeClass("checked")}).on("keydown.styler",function(e){32==e.which&&i.click()}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})};a(),r.on("refresh",function(){r.closest("label").add('label[for="'+r.attr("id")+'"]').off(".styler"),r.off(".styler").parent().before(r).remove(),a()})}else if(r.is(":radio")){var l=function(){var n=new t,i=e('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:n.id,title:n.title}).addClass(n.classes).data(n.data);r.after(i).prependTo(i),r.is(":checked")&&i.addClass("checked"),r.is(":disabled")&&i.addClass("disabled"),e.fn.commonParents=function(){var t=this;return t.first().parents().filter(function(){return e(this).find(t).length===t.length})},e.fn.commonParent=function(){return e(this).commonParents().first()},i.click(function(t){if(t.preventDefault(),r.triggerHandler("click"),!i.is(".disabled")){var n=e('input[name="'+r.attr("name")+'"]');n.commonParent().find(n).prop("checked",!1).parent().removeClass("checked"),r.prop("checked",!0).parent().addClass("checked"),r.focus().change()}}),r.closest("label").add('label[for="'+r.attr("id")+'"]').on("click.styler",function(t){e(t.target).is("a")||e(t.target).closest(i).length||(i.triggerHandler("click"),t.preventDefault())}),r.on("change.styler",function(){r.parent().addClass("checked")}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})};l(),r.on("refresh",function(){r.closest("label").add('label[for="'+r.attr("id")+'"]').off(".styler"),r.off(".styler").parent().before(r).remove(),l()})}else if(r.is(":file")){var c=function f(){var n=new t,o=r.data("placeholder");void 0===o&&(o=i.filePlaceholder);var s=r.data("browse");void 0!==s&&""!==s||(s=i.fileBrowse);var a=e('<div class="jq-file"><div class="jq-file__name">'+o+'</div><div class="jq-file__browse">'+s+"</div></div>").attr({id:n.id,title:n.title}).addClass(n.classes).data(n.data);r.after(a).appendTo(a),r.is(":disabled")&&a.addClass("disabled");var l=r.val(),f=e("div.jq-file__name",a);l&&f.text(l.replace(/.+[\\\/]/,"")),r.on("change.styler",function(){var e=r.val();if(r.is("[multiple]")){e="";var t=r[0].files.length;if(t>0){var n=r.data("number");void 0===n&&(n=i.fileNumber),n=n.replace("%s",t),e=n}}f.text(e.replace(/.+[\\\/]/,"")),""===e?(f.text(o),a.removeClass("changed")):a.addClass("changed")}).on("focus.styler",function(){a.addClass("focused")}).on("blur.styler",function(){a.removeClass("focused")}).on("click.styler",function(){a.removeClass("focused")})};c(),r.on("refresh",function(){r.off(".styler").parent().before(r).remove(),c()})}else if(r.is('input[type="number"]')){var u=function p(){var n=new t,i=e('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:n.id,title:n.title}).addClass(n.classes).data(n.data);r.after(i).prependTo(i).wrap('<div class="jq-number__field"></div>'),r.is(":disabled")&&i.addClass("disabled");var o,s,a,l=null,c=null;void 0!==r.attr("min")&&(o=r.attr("min")),void 0!==r.attr("max")&&(s=r.attr("max")),a=void 0!==r.attr("step")&&e.isNumeric(r.attr("step"))?Number(r.attr("step")):Number(1);var p=function(t){var n,i=r.val();e.isNumeric(i)||(i=0,r.val("0")),t.is(".minus")?n=Number(i)-a:t.is(".plus")&&(n=Number(i)+a);var l=(a.toString().split(".")[1]||[]).length;if(l>0){for(var c="1";c.length<=l;)c+="0";n=Math.round(n*c)/c}e.isNumeric(o)&&e.isNumeric(s)?n>=o&&n<=s&&r.val(n):e.isNumeric(o)&&!e.isNumeric(s)?n>=o&&r.val(n):!e.isNumeric(o)&&e.isNumeric(s)?n<=s&&r.val(n):r.val(n)};i.is(".disabled")||(i.on("mousedown","div.jq-number__spin",function(){var t=e(this);p(t),l=setTimeout(function(){c=setInterval(function(){p(t)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(l),clearInterval(c)}).on("mouseup","div.jq-number__spin",function(){r.change().trigger("input")}),r.on("focus.styler",function(){i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")}))};u(),r.on("refresh",function(){r.off(".styler").closest(".jq-number").before(r).remove(),u()})}else if(r.is("select")){var d=function(){function a(e){var t=e.prop("scrollHeight")-e.outerHeight(),n=null,r=null;e.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(i){n=i.originalEvent.detail<0||i.originalEvent.wheelDelta>0?1:-1,((r=e.scrollTop())>=t&&n<0||r<=0&&n>0)&&(i.stopPropagation(),i.preventDefault())})}function l(){for(var e=0;e<c.length;e++){var t=c.eq(e),n="",r="",o="",s="",a="",l="",d="",f="",p="";t.prop("selected")&&(r="selected sel"),t.is(":disabled")&&(r="disabled"),t.is(":selected:disabled")&&(r="selected sel disabled"),void 0!==t.attr("id")&&""!==t.attr("id")&&(s=' id="'+t.attr("id")+i.idSuffix+'"'),void 0!==t.attr("title")&&""!==c.attr("title")&&(a=' title="'+t.attr("title")+'"'),void 0!==t.attr("class")&&(d=" "+t.attr("class"),p=' data-jqfs-class="'+t.attr("class")+'"');var h=t.data();for(var v in h)""!==h[v]&&(l+=" data-"+v+'="'+h[v]+'"');r+d!==""&&(o=' class="'+r+d+'"'),n="<li"+p+l+o+a+s+">"+t.html()+"</li>",t.parent().is("optgroup")&&(void 0!==t.parent().attr("class")&&(f=" "+t.parent().attr("class")),n="<li"+p+l+' class="'+r+d+" option"+f+'"'+a+s+">"+t.html()+"</li>",t.is(":first-child")&&(n='<li class="optgroup'+f+'">'+t.parent().attr("label")+"</li>"+n)),u+=n}}var c=e("option",r),u="";if(r.is("[multiple]")){if(s||o)return;!function(){var n=new t,i=e('<div class="jq-select-multiple jqselect"></div>').attr({id:n.id,title:n.title}).addClass(n.classes).data(n.data);r.after(i),l(),i.append("<ul>"+u+"</ul>");var o=e("ul",i),s=e("li",i),d=r.attr("size"),f=o.outerHeight(),p=s.outerHeight();void 0!==d&&d>0?o.css({height:p*d}):o.css({height:4*p}),f>i.height()&&(o.css("overflowY","scroll"),a(o),s.filter(".selected").length&&o.scrollTop(o.scrollTop()+s.filter(".selected").position().top)),r.prependTo(i),r.is(":disabled")?(i.addClass("disabled"),c.each(function(){e(this).is(":selected")&&s.eq(e(this).index()).addClass("selected")})):(s.filter(":not(.disabled):not(.optgroup)").click(function(t){r.focus();var n=e(this);if(t.ctrlKey||t.metaKey||n.addClass("selected"),t.shiftKey||n.addClass("first"),t.ctrlKey||t.metaKey||t.shiftKey||n.siblings().removeClass("selected first"),(t.ctrlKey||t.metaKey)&&(n.is(".selected")?n.removeClass("selected first"):n.addClass("selected first"),n.siblings().removeClass("first")),t.shiftKey){var i=!1,o=!1;n.siblings().removeClass("selected").siblings(".first").addClass("selected"),n.prevAll().each(function(){e(this).is(".first")&&(i=!0)}),n.nextAll().each(function(){e(this).is(".first")&&(o=!0)}),i&&n.prevAll().each(function(){return!e(this).is(".selected")&&void e(this).not(".disabled, .optgroup").addClass("selected")}),o&&n.nextAll().each(function(){return!e(this).is(".selected")&&void e(this).not(".disabled, .optgroup").addClass("selected")}),1==s.filter(".selected").length&&n.addClass("first")}c.prop("selected",!1),s.filter(".selected").each(function(){var t=e(this),n=t.index();t.is(".option")&&(n-=t.prevAll(".optgroup").length),c.eq(n).prop("selected",!0)}),r.change()}),c.each(function(t){e(this).data("optionIndex",t)}),r.on("change.styler",function(){s.removeClass("selected");var t=[];c.filter(":selected").each(function(){t.push(e(this).data("optionIndex"))}),s.not(".optgroup").filter(function(n){return e.inArray(n,t)>-1}).addClass("selected")}).on("focus.styler",function(){i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")}),f>i.height()&&r.on("keydown.styler",function(e){38!=e.which&&37!=e.which&&33!=e.which||o.scrollTop(o.scrollTop()+s.filter(".selected").position().top-p),40!=e.which&&39!=e.which&&34!=e.which||o.scrollTop(o.scrollTop()+s.filter(".selected:last").position().top-o.innerHeight()+2*p)}))}()}else!function(){var s=new t,d="",f=r.data("placeholder"),p=r.data("search"),h=r.data("search-limit"),v=r.data("search-not-found"),g=r.data("search-placeholder"),m=r.data("smart-positioning");void 0===f&&(f=i.selectPlaceholder),void 0!==p&&""!==p||(p=i.selectSearch),void 0!==h&&""!==h||(h=i.selectSearchLimit),void 0!==v&&""!==v||(v=i.selectSearchNotFound),void 0===g&&(g=i.selectSearchPlaceholder),void 0!==m&&""!==m||(m=i.selectSmartPositioning);var y=e('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:s.id,title:s.title}).addClass(s.classes).data(s.data);r.after(y).prependTo(y);var b=y.css("z-index");b=b>0?b:1;var x=e("div.jq-selectbox__select",y),w=e("div.jq-selectbox__select-text",y),C=c.filter(":selected");l(),p&&(d='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+g+'"></div><div class="jq-selectbox__not-found">'+v+"</div>");var T=e('<div class="jq-selectbox__dropdown">'+d+"<ul>"+u+"</ul></div>");y.append(T);var k=e("ul",T),j=e("li",T),S=e("input",T),q=e("div.jq-selectbox__not-found",T).hide();j.length<h&&S.parent().hide(),""===c.first().text()&&c.first().is(":selected")&&!1!==f?w.text(f).addClass("placeholder"):w.text(C.text());var N=0,E=0;if(j.css({display:"inline-block"}),j.each(function(){var t=e(this);t.innerWidth()>N&&(N=t.innerWidth(),E=t.width())}),j.css({display:""}),w.is(".placeholder")&&w.width()>N)w.width(w.width());else{var D=y.clone().appendTo("body").width("auto"),A=D.outerWidth();D.remove(),A==y.outerWidth()&&w.width(E)}N>y.width()&&T.width(N),""===c.first().text()&&""!==r.data("placeholder")&&j.first().hide();var _=y.outerHeight(!0),H=S.parent().outerHeight(!0)||0,L=k.css("max-height"),P=j.filter(".selected");if(P.length<1&&j.first().addClass("selected sel"),void 0===j.data("li-height")){var O=j.outerHeight();!1!==f&&(O=j.eq(1).outerHeight()),j.data("li-height",O)}var R=T.css("top");if("auto"==T.css("left")&&T.css({left:0}),"auto"==T.css("top")&&(T.css({top:_}),R=_),T.hide(),P.length&&(c.first().text()!=C.text()&&y.addClass("changed"),y.data("jqfs-class",P.data("jqfs-class")),y.addClass(P.data("jqfs-class"))),r.is(":disabled"))return y.addClass("disabled"),!1;x.click(function(){if(e("div.jq-selectbox").filter(".opened").length&&i.onSelectClosed.call(e("div.jq-selectbox").filter(".opened")),r.focus(),!o){var t=e(window),n=j.data("li-height"),s=y.offset().top,l=t.height()-_-(s-t.scrollTop()),u=r.data("visible-options");void 0!==u&&""!==u||(u=i.selectVisibleOptions);var d=5*n,f=n*u;u>0&&u<6&&(d=f),0===u&&(f="auto");var p=function(){T.height("auto").css({bottom:"auto",top:R});var e=function(){k.css("max-height",Math.floor((l-20-H)/n)*n)};e(),k.css("max-height",f),"none"!=L&&k.css("max-height",L),l<T.outerHeight()+20&&e()};!0===m||1===m?l>d+H+20?(p(),y.removeClass("dropup").addClass("dropdown")):(function(){T.height("auto").css({top:"auto",bottom:R});var e=function(){k.css("max-height",Math.floor((s-t.scrollTop()-20-H)/n)*n)};e(),k.css("max-height",f),"none"!=L&&k.css("max-height",L),s-t.scrollTop()-20<T.outerHeight()+20&&e()}(),y.removeClass("dropdown").addClass("dropup")):!1===m||0===m?l>d+H+20&&(p(),y.removeClass("dropup").addClass("dropdown")):(T.height("auto").css({bottom:"auto",top:R}),k.css("max-height",f),"none"!=L&&k.css("max-height",L)),y.offset().left+T.outerWidth()>t.width()&&T.css({left:"auto",right:0}),e("div.jqselect").css({zIndex:b-1}).removeClass("opened"),y.css({zIndex:b}),T.is(":hidden")?(e("div.jq-selectbox__dropdown:visible").hide(),T.show(),y.addClass("opened focused"),i.onSelectOpened.call(y)):(T.hide(),y.removeClass("opened dropup dropdown"),e("div.jq-selectbox").filter(".opened").length&&i.onSelectClosed.call(y)),S.length&&(S.val("").keyup(),q.hide(),S.keyup(function(){var t=e(this).val();j.each(function(){e(this).html().match(new RegExp(".*?"+t+".*?","i"))?e(this).show():e(this).hide()}),""===c.first().text()&&""!==r.data("placeholder")&&j.first().hide(),j.filter(":visible").length<1?q.show():q.hide()})),j.filter(".selected").length&&(""===r.val()?k.scrollTop(0):(k.innerHeight()/n%2!=0&&(n/=2),k.scrollTop(k.scrollTop()+j.filter(".selected").position().top-k.innerHeight()/2+n))),a(k)}}),j.hover(function(){e(this).siblings().removeClass("selected")});var M=j.filter(".selected").text();j.filter(":not(.disabled):not(.optgroup)").click(function(){r.focus();var t=e(this),n=t.text();if(!t.is(".selected")){var o=t.index();o-=t.prevAll(".optgroup").length,t.addClass("selected sel").siblings().removeClass("selected sel"),c.prop("selected",!1).eq(o).prop("selected",!0),M=n,w.text(n),y.data("jqfs-class")&&y.removeClass(y.data("jqfs-class")),y.data("jqfs-class",t.data("jqfs-class")),y.addClass(t.data("jqfs-class")),r.change()}T.hide(),y.removeClass("opened dropup dropdown"),i.onSelectClosed.call(y)}),T.mouseout(function(){e("li.sel",T).addClass("selected")}),r.on("change.styler",function(){w.text(c.filter(":selected").text()).removeClass("placeholder"),j.removeClass("selected sel").not(".optgroup").eq(r[0].selectedIndex).addClass("selected sel"),c.first().text()!=j.filter(".selected").text()?y.addClass("changed"):y.removeClass("changed")}).on("focus.styler",function(){y.addClass("focused"),e("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){y.removeClass("focused")}).on("keydown.styler keyup.styler",function(e){var t=j.data("li-height");""===r.val()?w.text(f).addClass("placeholder"):w.text(c.filter(":selected").text()),j.removeClass("selected sel").not(".optgroup").eq(r[0].selectedIndex).addClass("selected sel"),38!=e.which&&37!=e.which&&33!=e.which&&36!=e.which||(""===r.val()?k.scrollTop(0):k.scrollTop(k.scrollTop()+j.filter(".selected").position().top)),40!=e.which&&39!=e.which&&34!=e.which&&35!=e.which||k.scrollTop(k.scrollTop()+j.filter(".selected").position().top-k.innerHeight()+t),13==e.which&&(e.preventDefault(),T.hide(),y.removeClass("opened dropup dropdown"),i.onSelectClosed.call(y))}).on("keydown.styler",function(e){32==e.which&&(e.preventDefault(),x.click())}),n.registered||(e(document).on("click",n),n.registered=!0)}()};d(),r.on("refresh",function(){r.off(".styler").parent().before(r).remove(),d()})}else r.is(":reset")&&r.on("click",function(){setTimeout(function(){r.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var t=e(this.element);t.is(":checkbox")||t.is(":radio")?(t.removeData("_"+r).off(".styler refresh").removeAttr("style").parent().before(t).remove(),t.closest("label").add('label[for="'+t.attr("id")+'"]').off(".styler")):t.is('input[type="number"]')?t.removeData("_"+r).off(".styler refresh").closest(".jq-number").before(t).remove():(t.is(":file")||t.is("select"))&&t.removeData("_"+r).off(".styler refresh").removeAttr("style").parent().before(t).remove()}},e.fn[r]=function(n){var i=arguments;if(void 0===n||"object"==("undefined"==typeof n?"undefined":_typeof(n)))return this.each(function(){e.data(this,"_"+r)||e.data(this,"_"+r,new t(this,n))}).promise().done(function(){var t=e(this[0]).data("_"+r);t&&t.options.onFormStyled.call()}),this;if("string"==typeof n&&"_"!==n[0]&&"init"!==n){var o;return this.each(function(){var s=e.data(this,"_"+r);s instanceof t&&"function"==typeof s[n]&&(o=s[n].apply(s,Array.prototype.slice.call(i,1)))}),void 0!==o?o:this}},n.registered=!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMuanMiXSwibmFtZXMiOlsiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJlIiwidCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsIkVycm9yIiwid2luZG93IiwidW5kZWZpbmVkIiwibSIsIm4iLCJpIiwibyIsInIiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsInYiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ4IiwibCIsImMiLCJjYWxsIiwiQyIsImxlbmd0aCIsImciLCJ5IiwiTiIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJqIiwidyIsImdyZXAiLCJub2RlVHlwZSIsInUiLCJmaWx0ZXIiLCJQIiwiUiIsImVhY2giLCJtYXRjaCIsIk0iLCJJIiwiVyIsIiQiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiYXBwbHkiLCJzbGljZSIsIl8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHkiLCJWIiwidG9VcHBlckNhc2UiLCJHIiwicmVwbGFjZSIsIlgiLCJVIiwiUSIsInRoaXMiLCJleHBhbmRvIiwidWlkIiwidGUiLCJaIiwidGVzdCIsIkpTT04iLCJwYXJzZSIsIm5lIiwiZWUiLCJnZXRBdHRyaWJ1dGUiLCJLIiwic2V0IiwidWUiLCJhIiwicyIsImN1ciIsImNzcyIsImNzc051bWJlciIsImllIiwiZXhlYyIsInN0eWxlIiwidW5pdCIsInN0YXJ0IiwiZW5kIiwiY2UiLCJvd25lckRvY3VtZW50IiwibGUiLCJib2R5IiwiZmUiLCJkaXNwbGF5IiwiSiIsImdldCIsImFlIiwieWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtZXJnZSIsInZlIiwieGUiLCJmIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInAiLCJkIiwiaCIsIm1lIiwiZGUiLCJnZSIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiaHRtbFByZWZpbHRlciIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY3JlYXRlVGV4dE5vZGUiLCJpbkFycmF5IiwiY29udGFpbnMiLCJoZSIsInR5cGUiLCJFZSIsImtlIiwiU2UiLCJhY3RpdmVFbGVtZW50IiwiRGUiLCJvZmYiLCJhcmd1bWVudHMiLCJndWlkIiwiZXZlbnQiLCJhZGQiLCJMZSIsImNoaWxkcmVuIiwiSGUiLCJPZSIsInJlbW92ZUF0dHJpYnV0ZSIsIlBlIiwiaGFzRGF0YSIsImFjY2VzcyIsImV2ZW50cyIsImhhbmRsZSIsImV4dGVuZCIsIk1lIiwicGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiUmUiLCJjaGVja0Nsb25lIiwiamUiLCJlcSIsImh0bWwiLCJtYXAiLCJjbG9uZSIsInNyYyIsIl9ldmFsVXJsIiwicWUiLCJJZSIsImNsZWFuRGF0YSIsIkZlIiwiJGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJXZSIsIkJlIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiX2UiLCJRZSIsIlllIiwiR2UiLCJKZSIsImNzc1Byb3BzIiwiS2UiLCJNYXRoIiwibWF4IiwiWmUiLCJvZSIsImNlaWwiLCJldCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsInR0IiwiaW5pdCIsImF0IiwicnQiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiZngiLCJpbnRlcnZhbCIsInRpY2siLCJzdCIsIm50IiwiRGF0ZSIsIm5vdyIsInV0IiwiaGVpZ2h0Iiwib3BhY2l0eSIsImx0IiwicHQiLCJ0d2VlbmVycyIsImNvbmNhdCIsImN0IiwicXVldWUiLCJfcXVldWVIb29rcyIsInVucXVldWVkIiwiZW1wdHkiLCJmaXJlIiwiYWx3YXlzIiwiaXQiLCJpc0VtcHR5T2JqZWN0Iiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJyZW1vdmUiLCJmdCIsIkFycmF5IiwiaXNBcnJheSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJlZmlsdGVycyIsIkRlZmVycmVkIiwiZWxlbSIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvcHMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsImVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImNyZWF0ZVR3ZWVuIiwiVHdlZW4iLCJzdG9wIiwicmVqZWN0V2l0aCIsImJpbmQiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidnQiLCJqb2luIiwibXQiLCJ4dCIsImp0IiwiU3QiLCJGdCIsInVuc2hpZnQiLCJfdCIsImRhdGFUeXBlcyIsIld0IiwienQiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsIlh0IiwiY29udGVudHMiLCJzaGlmdCIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjb252ZXJ0ZXJzIiwiVXQiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJkYXRhVHlwZSIsInNwbGl0Iiwic3RhdGUiLCJlcnJvciIsImRhdGEiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImluZGV4T2YiLCJ0b1N0cmluZyIsImhhc093blByb3BlcnR5Iiwibm9Nb2R1bGUiLCJmbiIsIlQiLCJqcXVlcnkiLCJ0b0FycmF5IiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImZpcnN0IiwibGFzdCIsInNvcnQiLCJzcGxpY2UiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm5vb3AiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsInN1cHBvcnQiLCJFIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsIkwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiUyIsInNldEF0dHJpYnV0ZSIsImIiLCJCIiwiY2FjaGVMZW5ndGgiLCJzZSIsImF0dHJIYW5kbGUiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwidmFsdWUiLCJkaXIiLCJuZXh0IiwidW5pcXVlSUQiLCJiZSIsIndlIiwiVGUiLCJPIiwiQ2UiLCJyZWxhdGl2ZSIsIm1hdGNoZXMiLCJfbyIsImZpbmQiLCJUQUciLCJrIiwidW5pcXVlU29ydCIsIkQiLCJBIiwicG9wIiwicSIsIkgiLCJSZWdFeHAiLCJGIiwieiIsIklEIiwiQ0xBU1MiLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwiWSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJyZSIsImlzWE1MIiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0RG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImF0dHJpYnV0ZXMiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzb3J0RGV0YWNoZWQiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJnZXRUZXh0Iiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsInRhcmdldCIsImxvY2F0aW9uIiwiaGFzaCIsInJvb3QiLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsInBhcmVudCIsImhlYWRlciIsImlucHV0IiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0b3IiLCJzZWxlY3QiLCJleHByIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsImlzIiwicGFyc2VIVE1MIiwicHJldiIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwib25jZSIsInN0b3BPbkZhbHNlIiwibWVtb3J5IiwiZGlzYWJsZSIsImxvY2siLCJsb2NrZWQiLCJmaXJlV2l0aCIsImZpcmVkIiwiY2F0Y2giLCJwaXBlIiwibm90aWZ5IiwicmVzb2x2ZSIsInJlamVjdCIsIlR5cGVFcnJvciIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwiZ2V0U3RhY2tIb29rIiwid2hlbiIsImNvbnNvbGUiLCJ3YXJuIiwibmFtZSIsIm1lc3NhZ2UiLCJzdGFjayIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlXYWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiX3QyIiwiY2FjaGUiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsImNsZWFyUXVldWUiLCJzb3VyY2UiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJnbG9iYWwiLCJoYW5kbGVyIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaGFuZGxlcnMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJoYW5kbGVPYmoiLCJyZXN1bHQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsImFkZFByb3AiLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXkiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib24iLCJvbmUiLCJOZSIsIkFlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjc3NUZXh0IiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicG9zaXRpb24iLCJvZmZzZXRXaWR0aCIsInJvdW5kIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInplIiwiWGUiLCJVZSIsInZpc2liaWxpdHkiLCJWZSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByb3AiLCJvcHRpb25zIiwicHJvcEhvb2tzIiwicG9zIiwic3RlcCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwib3QiLCJBbmltYXRpb24iLCIqIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwib2xkIiwiZmFkZVRvIiwiYW5pbWF0ZSIsImZpbmlzaCIsInRpbWVycyIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJkdCIsImh0IiwicmVtb3ZlQXR0ciIsImF0dHJIb29rcyIsInl0IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiaGFzQ2xhc3MiLCJidCIsInZhbCIsInZhbEhvb2tzIiwiZm9jdXNpbiIsInd0IiwiVHQiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiQ3QiLCJFdCIsImt0IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJEdCIsIk50IiwiQXQiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicXQiLCJMdCIsIkh0IiwiT3QiLCJQdCIsIk10IiwiUnQiLCJJdCIsIiR0IiwiQnQiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsInhtbCIsImpzb24iLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImNvbnRleHQiLCJhamF4U2V0dXAiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJpZk1vZGlmaWVkIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsInN0YXR1c0NvZGUiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsImFib3J0IiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJob3N0IiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwidGltZW91dCIsInNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwid3JhcCIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIlZ0IiwiMCIsIjEyMjMiLCJHdCIsImNvcnMiLCJfbiIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwicmVzcG9uc2UiLCJzY3JpcHQiLCJ0ZXh0IHNjcmlwdCIsIl9uMiIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiWXQiLCJRdCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJ1c2luZyIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiaG92ZXIiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsInBhcnNlSlNPTiIsImlzRnVuY3Rpb24iLCJpc1dpbmRvdyIsImNhbWVsQ2FzZSIsImlzTnVtZXJpYyIsImlzTmFOIiwiZGVmaW5lIiwiYW1kIiwiSnQiLCJqUXVlcnkiLCJLdCIsIm5vQ29uZmxpY3QiLCJyZXF1aXJlIiwiZmxvb3IiLCJhYnMiLCJieVJvdyIsInByb3BlcnR5IiwibWF0Y2hIZWlnaHQiLCJfZ3JvdXBzIiwiZWxlbWVudHMiLCJfYXBwbHkiLCJ2ZXJzaW9uIiwiX3Rocm90dGxlIiwiX21haW50YWluU2Nyb2xsIiwiX2JlZm9yZVVwZGF0ZSIsIl9hZnRlclVwZGF0ZSIsIl9yb3dzIiwiX3BhcnNlIiwiX3BhcnNlT3B0aW9ucyIsIm91dGVySGVpZ2h0IiwicGFkZGluZy10b3AiLCJwYWRkaW5nLWJvdHRvbSIsIm1hcmdpbi10b3AiLCJtYXJnaW4tYm90dG9tIiwiYm9yZGVyLXRvcC13aWR0aCIsImJvcmRlci1ib3R0b20td2lkdGgiLCJfYXBwbHlEYXRhQXBpIiwiX3VwZGF0ZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1hc2siLCJkZWZpbml0aW9ucyIsIjkiLCJhdXRvY2xlYXIiLCJkYXRhTmFtZSIsInBsYWNlaG9sZGVyIiwiY2FyZXQiLCJzZXRTZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsImNvbGxhcHNlIiwibW92ZUVuZCIsIm1vdmVTdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwic2VsZWN0aW9uIiwiY3JlYXRlUmFuZ2UiLCJkdXBsaWNhdGUiLCJiZWdpbiIsInVubWFzayIsImNvbXBsZXRlZCIsImNoYXJBdCIsImNoYW5nZSIsInN1YnN0cmluZyIsImVsZW1lbnQiLCJsb2NhbGUiLCJsb2NhbGVzIiwib25TZWxlY3RDbG9zZWQiLCJrZXl1cCIsImlkU3VmZml4IiwiZmlsZVBsYWNlaG9sZGVyIiwiZmlsZUJyb3dzZSIsImZpbGVOdW1iZXIiLCJzZWxlY3RQbGFjZWhvbGRlciIsInNlbGVjdFNlYXJjaCIsInNlbGVjdFNlYXJjaExpbWl0Iiwic2VsZWN0U2VhcmNoTm90Rm91bmQiLCJzZWxlY3RTZWFyY2hQbGFjZWhvbGRlciIsInNlbGVjdFZpc2libGVPcHRpb25zIiwic2VsZWN0U21hcnRQb3NpdGlvbmluZyIsImVuIiwib25TZWxlY3RPcGVuZWQiLCJvbkZvcm1TdHlsZWQiLCJ0aXRsZSIsImNsYXNzZXMiLCJjb21tb25QYXJlbnRzIiwiY29tbW9uUGFyZW50IiwiZmlsZXMiLCJOdW1iZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ3aGVlbERlbHRhIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwib3V0ZXJXaWR0aCIsImJvdHRvbSIsIm1vdXNlb3V0IiwicmVnaXN0ZXJlZCIsImRlc3Ryb3kiXSwibWFwcGluZ3MiOiJBQUFBLFlBRUEsSUFBSUEsU0FBNEIsa0JBQVhDLFNBQW9ELGdCQUFwQkEsUUFBT0MsU0FBd0IsU0FBVUMsR0FBTyxhQUFjQSxJQUFTLFNBQVVBLEdBQU8sTUFBT0EsSUFBeUIsa0JBQVhGLFNBQXlCRSxFQUFJQyxjQUFnQkgsUUFBVUUsSUFBUUYsT0FBT0ksVUFBWSxlQUFrQkYsS0FHclEsU0FBVUcsRUFBR0MsR0FFVixXQUErQixtQkFBWEMsUUFBeUIsWUFBY1IsUUFBUVEsVUFBWSxVQUFZUixRQUFRUSxPQUFPQyxTQUFXRCxPQUFPQyxRQUFVSCxFQUFFSSxTQUFXSCxFQUFFRCxHQUFHLEdBQU0sU0FBVUEsR0FDcEssSUFBS0EsRUFBRUksU0FBVSxLQUFNLElBQUlDLE9BQU0sMkNBQTRDLE9BQU9KLEdBQUVELElBQ3RGQyxFQUFFRCxJQUNSLG1CQUFzQk0sUUFBU0EsT0FBU0MsT0FBVyxTQUFVUCxFQUFHQyxHQXFCbEIsUUFBU08sR0FBRVIsRUFBR0MsRUFBR1EsR0FDekQsR0FBSUMsR0FDQUMsR0FBS1YsRUFBSUEsR0FBS1csSUFBR0MsY0FBYyxTQUFVLElBQUlGLEVBQUVHLEtBQU9kLEVBQUdTLEVBQUcsSUFBS0MsSUFBS0ssSUFDdEVOLEVBQUVDLEtBQU9DLEVBQUVELEdBQUtELEVBQUVDLEdBQ3JCVCxHQUFFZSxLQUFLQyxZQUFZTixHQUFHTyxXQUFXQyxZQUFZUixHQUNqRCxRQUFTUyxHQUFFcEIsR0FDUixNQUFPLE9BQVFBLEVB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M0IsTUFBTTBCLEVBQUcrSSxNQUFNM04sVUFBVW1ELE1BQU0zQixLQUFLRixFQUFHLE9BQzlILFNBQVdWLEVBQUlBLEVBQUlrRCxPQUU1QmUsRUFBRTZ6QixZQUFhIiwiZmlsZSI6ImxpYnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKiEgalF1ZXJ5IHYzLjMuMSB8IChjKSBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbiAoZSwgdCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFwib2JqZWN0XCIgPT0gKHR5cGVvZiBtb2R1bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihtb2R1bGUpKSAmJiBcIm9iamVjdFwiID09IF90eXBlb2YobW9kdWxlLmV4cG9ydHMpID8gbW9kdWxlLmV4cG9ydHMgPSBlLmRvY3VtZW50ID8gdChlLCAhMCkgOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoIWUuZG9jdW1lbnQpIHRocm93IG5ldyBFcnJvcihcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7cmV0dXJuIHQoZSk7XG4gICAgfSA6IHQoZSk7XG59KFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHVuZGVmaW5lZCwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgbiA9IFtdLFxuICAgICAgICByID0gZS5kb2N1bWVudCxcbiAgICAgICAgaSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgICAgbyA9IG4uc2xpY2UsXG4gICAgICAgIGEgPSBuLmNvbmNhdCxcbiAgICAgICAgcyA9IG4ucHVzaCxcbiAgICAgICAgdSA9IG4uaW5kZXhPZixcbiAgICAgICAgbCA9IHt9LFxuICAgICAgICBjID0gbC50b1N0cmluZyxcbiAgICAgICAgZiA9IGwuaGFzT3duUHJvcGVydHksXG4gICAgICAgIHAgPSBmLnRvU3RyaW5nLFxuICAgICAgICBkID0gcC5jYWxsKE9iamVjdCksXG4gICAgICAgIGggPSB7fSxcbiAgICAgICAgZyA9IGZ1bmN0aW9uIGUodCkge1xuICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiB0ICYmIFwibnVtYmVyXCIgIT0gdHlwZW9mIHQubm9kZVR5cGU7XG4gICAgfSxcbiAgICAgICAgeSA9IGZ1bmN0aW9uIGUodCkge1xuICAgICAgICByZXR1cm4gbnVsbCAhPSB0ICYmIHQgPT09IHQud2luZG93O1xuICAgIH0sXG4gICAgICAgIHYgPSB7IHR5cGU6ICEwLCBzcmM6ICEwLCBub01vZHVsZTogITAgfTtmdW5jdGlvbiBtKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBvID0gKHQgPSB0IHx8IHIpLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7aWYgKG8udGV4dCA9IGUsIG4pIGZvciAoaSBpbiB2KSB7XG4gICAgICAgICAgICBuW2ldICYmIChvW2ldID0gbltpXSk7XG4gICAgICAgIH10LmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKTtcbiAgICB9ZnVuY3Rpb24geChlKSB7XG4gICAgICAgIHJldHVybiBudWxsID09IGUgPyBlICsgXCJcIiA6IFwib2JqZWN0XCIgPT0gKHR5cGVvZiBlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZSkpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSA/IGxbYy5jYWxsKGUpXSB8fCBcIm9iamVjdFwiIDogdHlwZW9mIGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihlKTtcbiAgICB9dmFyIGIgPSBcIjMuMy4xXCIsXG4gICAgICAgIHcgPSBmdW5jdGlvbiB3KGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB3LmZuLmluaXQoZSwgdCk7XG4gICAgfSxcbiAgICAgICAgVCA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZzt3LmZuID0gdy5wcm90b3R5cGUgPSB7IGpxdWVyeTogXCIzLjMuMVwiLCBjb25zdHJ1Y3RvcjogdywgbGVuZ3RoOiAwLCB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgICAgICAgICAgcmV0dXJuIG8uY2FsbCh0aGlzKTtcbiAgICAgICAgfSwgZ2V0OiBmdW5jdGlvbiBnZXQoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IG8uY2FsbCh0aGlzKSA6IGUgPCAwID8gdGhpc1tlICsgdGhpcy5sZW5ndGhdIDogdGhpc1tlXTtcbiAgICAgICAgfSwgcHVzaFN0YWNrOiBmdW5jdGlvbiBwdXNoU3RhY2soZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB3Lm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSwgZSk7cmV0dXJuIHQucHJldk9iamVjdCA9IHRoaXMsIHQ7XG4gICAgICAgIH0sIGVhY2g6IGZ1bmN0aW9uIGVhY2goZSkge1xuICAgICAgICAgICAgcmV0dXJuIHcuZWFjaCh0aGlzLCBlKTtcbiAgICAgICAgfSwgbWFwOiBmdW5jdGlvbiBtYXAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHcubWFwKHRoaXMsIGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuY2FsbCh0LCBuLCB0KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKG8uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICAgIH0sIGZpcnN0OiBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKDApO1xuICAgICAgICB9LCBsYXN0OiBmdW5jdGlvbiBsYXN0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXEoLTEpO1xuICAgICAgICB9LCBlcTogZnVuY3Rpb24gZXEoZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuID0gK2UgKyAoZSA8IDAgPyB0IDogMCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4gPj0gMCAmJiBuIDwgdCA/IFt0aGlzW25dXSA6IFtdKTtcbiAgICAgICAgfSwgZW5kOiBmdW5jdGlvbiBlbmQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcbiAgICAgICAgfSwgcHVzaDogcywgc29ydDogbi5zb3J0LCBzcGxpY2U6IG4uc3BsaWNlIH0sIHcuZXh0ZW5kID0gdy5mbi5leHRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlLFxuICAgICAgICAgICAgdCxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuICAgICAgICAgICAgcyA9IDEsXG4gICAgICAgICAgICB1ID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGwgPSAhMTtmb3IgKFwiYm9vbGVhblwiID09IHR5cGVvZiBhICYmIChsID0gYSwgYSA9IGFyZ3VtZW50c1tzXSB8fCB7fSwgcysrKSwgXCJvYmplY3RcIiA9PSAodHlwZW9mIGEgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihhKSkgfHwgZyhhKSB8fCAoYSA9IHt9KSwgcyA9PT0gdSAmJiAoYSA9IHRoaXMsIHMtLSk7IHMgPCB1OyBzKyspIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9IChlID0gYXJndW1lbnRzW3NdKSkgZm9yICh0IGluIGUpIHtcbiAgICAgICAgICAgICAgICBuID0gYVt0XSwgYSAhPT0gKHIgPSBlW3RdKSAmJiAobCAmJiByICYmICh3LmlzUGxhaW5PYmplY3QocikgfHwgKGkgPSBBcnJheS5pc0FycmF5KHIpKSkgPyAoaSA/IChpID0gITEsIG8gPSBuICYmIEFycmF5LmlzQXJyYXkobikgPyBuIDogW10pIDogbyA9IG4gJiYgdy5pc1BsYWluT2JqZWN0KG4pID8gbiA6IHt9LCBhW3RdID0gdy5leHRlbmQobCwgbywgcikpIDogdm9pZCAwICE9PSByICYmIChhW3RdID0gcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIGE7XG4gICAgfSwgdy5leHRlbmQoeyBleHBhbmRvOiBcImpRdWVyeVwiICsgKFwiMy4zLjFcIiArIE1hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLCBcIlwiKSwgaXNSZWFkeTogITAsIGVycm9yOiBmdW5jdGlvbiBlcnJvcihlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSk7XG4gICAgICAgIH0sIG5vb3A6IGZ1bmN0aW9uIG5vb3AoKSB7fSwgaXNQbGFpbk9iamVjdDogZnVuY3Rpb24gaXNQbGFpbk9iamVjdChlKSB7XG4gICAgICAgICAgICB2YXIgdCwgbjtyZXR1cm4gISghZSB8fCBcIltvYmplY3QgT2JqZWN0XVwiICE9PSBjLmNhbGwoZSkpICYmICghKHQgPSBpKGUpKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIChuID0gZi5jYWxsKHQsIFwiY29uc3RydWN0b3JcIikgJiYgdC5jb25zdHJ1Y3RvcikgJiYgcC5jYWxsKG4pID09PSBkKTtcbiAgICAgICAgfSwgaXNFbXB0eU9iamVjdDogZnVuY3Rpb24gaXNFbXB0eU9iamVjdChlKSB7XG4gICAgICAgICAgICB2YXIgdDtmb3IgKHQgaW4gZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgICAgIH1yZXR1cm4gITA7XG4gICAgICAgIH0sIGdsb2JhbEV2YWw6IGZ1bmN0aW9uIGdsb2JhbEV2YWwoZSkge1xuICAgICAgICAgICAgbShlKTtcbiAgICAgICAgfSwgZWFjaDogZnVuY3Rpb24gZWFjaChlLCB0KSB7XG4gICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICByID0gMDtpZiAoQyhlKSkge1xuICAgICAgICAgICAgICAgIGZvciAobiA9IGUubGVuZ3RoOyByIDwgbjsgcisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghMSA9PT0gdC5jYWxsKGVbcl0sIHIsIGVbcl0pKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgZm9yIChyIGluIGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoITEgPT09IHQuY2FsbChlW3JdLCByLCBlW3JdKSkgYnJlYWs7XG4gICAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgIH0sIHRyaW06IGZ1bmN0aW9uIHRyaW0oZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IFwiXCIgOiAoZSArIFwiXCIpLnJlcGxhY2UoVCwgXCJcIik7XG4gICAgICAgIH0sIG1ha2VBcnJheTogZnVuY3Rpb24gbWFrZUFycmF5KGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBuID0gdCB8fCBbXTtyZXR1cm4gbnVsbCAhPSBlICYmIChDKE9iamVjdChlKSkgPyB3Lm1lcmdlKG4sIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBbZV0gOiBlKSA6IHMuY2FsbChuLCBlKSksIG47XG4gICAgICAgIH0sIGluQXJyYXk6IGZ1bmN0aW9uIGluQXJyYXkoZSwgdCwgbikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IC0xIDogdS5jYWxsKHQsIGUsIG4pO1xuICAgICAgICB9LCBtZXJnZTogZnVuY3Rpb24gbWVyZ2UoZSwgdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9ICt0Lmxlbmd0aCwgciA9IDAsIGkgPSBlLmxlbmd0aDsgciA8IG47IHIrKykge1xuICAgICAgICAgICAgICAgIGVbaSsrXSA9IHRbcl07XG4gICAgICAgICAgICB9cmV0dXJuIGUubGVuZ3RoID0gaSwgZTtcbiAgICAgICAgfSwgZ3JlcDogZnVuY3Rpb24gZ3JlcChlLCB0LCBuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciByLCBpID0gW10sIG8gPSAwLCBhID0gZS5sZW5ndGgsIHMgPSAhbjsgbyA8IGE7IG8rKykge1xuICAgICAgICAgICAgICAgIChyID0gIXQoZVtvXSwgbykpICE9PSBzICYmIGkucHVzaChlW29dKTtcbiAgICAgICAgICAgIH1yZXR1cm4gaTtcbiAgICAgICAgfSwgbWFwOiBmdW5jdGlvbiBtYXAoZSwgdCwgbikge1xuICAgICAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBvID0gMCxcbiAgICAgICAgICAgICAgICBzID0gW107aWYgKEMoZSkpIGZvciAociA9IGUubGVuZ3RoOyBvIDwgcjsgbysrKSB7XG4gICAgICAgICAgICAgICAgbnVsbCAhPSAoaSA9IHQoZVtvXSwgbywgbikpICYmIHMucHVzaChpKTtcbiAgICAgICAgICAgIH0gZWxzZSBmb3IgKG8gaW4gZSkge1xuICAgICAgICAgICAgICAgIG51bGwgIT0gKGkgPSB0KGVbb10sIG8sIG4pKSAmJiBzLnB1c2goaSk7XG4gICAgICAgICAgICB9cmV0dXJuIGEuYXBwbHkoW10sIHMpO1xuICAgICAgICB9LCBndWlkOiAxLCBzdXBwb3J0OiBoIH0pLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiAody5mbltTeW1ib2wuaXRlcmF0b3JdID0gbltTeW1ib2wuaXRlcmF0b3JdKSwgdy5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksIGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIGxbXCJbb2JqZWN0IFwiICsgdCArIFwiXVwiXSA9IHQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtmdW5jdGlvbiBDKGUpIHtcbiAgICAgICAgdmFyIHQgPSAhIWUgJiYgXCJsZW5ndGhcIiBpbiBlICYmIGUubGVuZ3RoLFxuICAgICAgICAgICAgbiA9IHgoZSk7cmV0dXJuICFnKGUpICYmICF5KGUpICYmIChcImFycmF5XCIgPT09IG4gfHwgMCA9PT0gdCB8fCBcIm51bWJlclwiID09IHR5cGVvZiB0ICYmIHQgPiAwICYmIHQgLSAxIGluIGUpO1xuICAgIH12YXIgRSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0LFxuICAgICAgICAgICAgbixcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgZixcbiAgICAgICAgICAgIHAsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIGcsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgdixcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgYiA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIHcgPSBlLmRvY3VtZW50LFxuICAgICAgICAgICAgVCA9IDAsXG4gICAgICAgICAgICBDID0gMCxcbiAgICAgICAgICAgIEUgPSBhZSgpLFxuICAgICAgICAgICAgayA9IGFlKCksXG4gICAgICAgICAgICBTID0gYWUoKSxcbiAgICAgICAgICAgIEQgPSBmdW5jdGlvbiBEKGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBlID09PSB0ICYmIChmID0gITApLCAwO1xuICAgICAgICB9LFxuICAgICAgICAgICAgTiA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgICAgICAgICAgQSA9IFtdLFxuICAgICAgICAgICAgaiA9IEEucG9wLFxuICAgICAgICAgICAgcSA9IEEucHVzaCxcbiAgICAgICAgICAgIEwgPSBBLnB1c2gsXG4gICAgICAgICAgICBIID0gQS5zbGljZSxcbiAgICAgICAgICAgIE8gPSBmdW5jdGlvbiBPKGUsIHQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gPSAwLCByID0gZS5sZW5ndGg7IG4gPCByOyBuKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZVtuXSA9PT0gdCkgcmV0dXJuIG47XG4gICAgICAgICAgICB9cmV0dXJuIC0xO1xuICAgICAgICB9LFxuICAgICAgICAgICAgUCA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcbiAgICAgICAgICAgIE0gPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG4gICAgICAgICAgICBSID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuICAgICAgICAgICAgSSA9IFwiXFxcXFtcIiArIE0gKyBcIiooXCIgKyBSICsgXCIpKD86XCIgKyBNICsgXCIqKFsqXiR8IX5dPz0pXCIgKyBNICsgXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIFIgKyBcIikpfClcIiArIE0gKyBcIipcXFxcXVwiLFxuICAgICAgICAgICAgVyA9IFwiOihcIiArIFIgKyBcIikoPzpcXFxcKCgoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXwoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBJICsgXCIpKil8LiopXFxcXCl8KVwiLFxuICAgICAgICAgICAgJCA9IG5ldyBSZWdFeHAoTSArIFwiK1wiLCBcImdcIiksXG4gICAgICAgICAgICBCID0gbmV3IFJlZ0V4cChcIl5cIiArIE0gKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyBNICsgXCIrJFwiLCBcImdcIiksXG4gICAgICAgICAgICBGID0gbmV3IFJlZ0V4cChcIl5cIiArIE0gKyBcIiosXCIgKyBNICsgXCIqXCIpLFxuICAgICAgICAgICAgXyA9IG5ldyBSZWdFeHAoXCJeXCIgKyBNICsgXCIqKFs+K35dfFwiICsgTSArIFwiKVwiICsgTSArIFwiKlwiKSxcbiAgICAgICAgICAgIHogPSBuZXcgUmVnRXhwKFwiPVwiICsgTSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyBNICsgXCIqXFxcXF1cIiwgXCJnXCIpLFxuICAgICAgICAgICAgWCA9IG5ldyBSZWdFeHAoVyksXG4gICAgICAgICAgICBVID0gbmV3IFJlZ0V4cChcIl5cIiArIFIgKyBcIiRcIiksXG4gICAgICAgICAgICBWID0geyBJRDogbmV3IFJlZ0V4cChcIl4jKFwiICsgUiArIFwiKVwiKSwgQ0xBU1M6IG5ldyBSZWdFeHAoXCJeXFxcXC4oXCIgKyBSICsgXCIpXCIpLCBUQUc6IG5ldyBSZWdFeHAoXCJeKFwiICsgUiArIFwifFsqXSlcIiksIEFUVFI6IG5ldyBSZWdFeHAoXCJeXCIgKyBJKSwgUFNFVURPOiBuZXcgUmVnRXhwKFwiXlwiICsgVyksIENISUxEOiBuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIE0gKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgTSArIFwiKig/OihbKy1dfClcIiArIE0gKyBcIiooXFxcXGQrKXwpKVwiICsgTSArIFwiKlxcXFwpfClcIiwgXCJpXCIpLCBib29sOiBuZXcgUmVnRXhwKFwiXig/OlwiICsgUCArIFwiKSRcIiwgXCJpXCIpLCBuZWVkc0NvbnRleHQ6IG5ldyBSZWdFeHAoXCJeXCIgKyBNICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgTSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIE0gKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIikgfSxcbiAgICAgICAgICAgIEcgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuICAgICAgICAgICAgWSA9IC9eaFxcZCQvaSxcbiAgICAgICAgICAgIFEgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuICAgICAgICAgICAgSiA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuICAgICAgICAgICAgSyA9IC9bK35dLyxcbiAgICAgICAgICAgIFogPSBuZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyBNICsgXCI/fChcIiArIE0gKyBcIil8LilcIiwgXCJpZ1wiKSxcbiAgICAgICAgICAgIGVlID0gZnVuY3Rpb24gZWUoZSwgdCwgbikge1xuICAgICAgICAgICAgdmFyIHIgPSBcIjB4XCIgKyB0IC0gNjU1MzY7cmV0dXJuIHIgIT09IHIgfHwgbiA/IHQgOiByIDwgMCA/IFN0cmluZy5mcm9tQ2hhckNvZGUociArIDY1NTM2KSA6IFN0cmluZy5mcm9tQ2hhckNvZGUociA+PiAxMCB8IDU1Mjk2LCAxMDIzICYgciB8IDU2MzIwKTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIHRlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG4gICAgICAgICAgICBuZSA9IGZ1bmN0aW9uIG5lKGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ID8gXCJcXDBcIiA9PT0gZSA/IFwiXFx1RkZGRFwiIDogZS5zbGljZSgwLCAtMSkgKyBcIlxcXFxcIiArIGUuY2hhckNvZGVBdChlLmxlbmd0aCAtIDEpLnRvU3RyaW5nKDE2KSArIFwiIFwiIDogXCJcXFxcXCIgKyBlO1xuICAgICAgICB9LFxuICAgICAgICAgICAgcmUgPSBmdW5jdGlvbiByZSgpIHtcbiAgICAgICAgICAgIHAoKTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIGllID0gbWUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiAhMCA9PT0gZS5kaXNhYmxlZCAmJiAoXCJmb3JtXCIgaW4gZSB8fCBcImxhYmVsXCIgaW4gZSk7XG4gICAgICAgIH0sIHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9KTt0cnkge1xuICAgICAgICAgICAgTC5hcHBseShBID0gSC5jYWxsKHcuY2hpbGROb2RlcyksIHcuY2hpbGROb2RlcyksIEFbdy5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIEwgPSB7IGFwcGx5OiBBLmxlbmd0aCA/IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHEuYXBwbHkoZSwgSC5jYWxsKHQpKTtcbiAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAwO3doaWxlIChlW24rK10gPSB0W3IrK10pIHt9ZS5sZW5ndGggPSBuIC0gMTtcbiAgICAgICAgICAgICAgICB9IH07XG4gICAgICAgIH1mdW5jdGlvbiBvZShlLCB0LCByLCBpKSB7XG4gICAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgdixcbiAgICAgICAgICAgICAgICBtID0gdCAmJiB0Lm93bmVyRG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgVCA9IHQgPyB0Lm5vZGVUeXBlIDogOTtpZiAociA9IHIgfHwgW10sIFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgfHwgIWUgfHwgMSAhPT0gVCAmJiA5ICE9PSBUICYmIDExICE9PSBUKSByZXR1cm4gcjtpZiAoIWkgJiYgKCh0ID8gdC5vd25lckRvY3VtZW50IHx8IHQgOiB3KSAhPT0gZCAmJiBwKHQpLCB0ID0gdCB8fCBkLCBnKSkge1xuICAgICAgICAgICAgICAgIGlmICgxMSAhPT0gVCAmJiAoZiA9IEouZXhlYyhlKSkpIGlmIChvID0gZlsxXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoOSA9PT0gVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobCA9IHQuZ2V0RWxlbWVudEJ5SWQobykpKSByZXR1cm4gcjtpZiAobC5pZCA9PT0gbykgcmV0dXJuIHIucHVzaChsKSwgcjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtICYmIChsID0gbS5nZXRFbGVtZW50QnlJZChvKSkgJiYgeCh0LCBsKSAmJiBsLmlkID09PSBvKSByZXR1cm4gci5wdXNoKGwpLCByO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmWzJdKSByZXR1cm4gTC5hcHBseShyLCB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpKSwgcjtpZiAoKG8gPSBmWzNdKSAmJiBuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSByZXR1cm4gTC5hcHBseShyLCB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobykpLCByO1xuICAgICAgICAgICAgICAgIH1pZiAobi5xc2EgJiYgIVNbZSArIFwiIFwiXSAmJiAoIXkgfHwgIXkudGVzdChlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDEgIT09IFQpIG0gPSB0LCB2ID0gZTtlbHNlIGlmIChcIm9iamVjdFwiICE9PSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChjID0gdC5nZXRBdHRyaWJ1dGUoXCJpZFwiKSkgPyBjID0gYy5yZXBsYWNlKHRlLCBuZSkgOiB0LnNldEF0dHJpYnV0ZShcImlkXCIsIGMgPSBiKSwgcyA9IChoID0gYShlKSkubGVuZ3RoO3doaWxlIChzLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoW3NdID0gXCIjXCIgKyBjICsgXCIgXCIgKyB2ZShoW3NdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH12ID0gaC5qb2luKFwiLFwiKSwgbSA9IEsudGVzdChlKSAmJiBnZSh0LnBhcmVudE5vZGUpIHx8IHQ7XG4gICAgICAgICAgICAgICAgICAgIH1pZiAodikgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMLmFwcGx5KHIsIG0ucXVlcnlTZWxlY3RvckFsbCh2KSksIHI7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYyA9PT0gYiAmJiB0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJldHVybiB1KGUucmVwbGFjZShCLCBcIiQxXCIpLCB0LCByLCBpKTtcbiAgICAgICAgfWZ1bmN0aW9uIGFlKCkge1xuICAgICAgICAgICAgdmFyIGUgPSBbXTtmdW5jdGlvbiB0KG4sIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5wdXNoKG4gKyBcIiBcIikgPiByLmNhY2hlTGVuZ3RoICYmIGRlbGV0ZSB0W2Uuc2hpZnQoKV0sIHRbbiArIFwiIFwiXSA9IGk7XG4gICAgICAgICAgICB9cmV0dXJuIHQ7XG4gICAgICAgIH1mdW5jdGlvbiBzZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gZVtiXSA9ICEwLCBlO1xuICAgICAgICB9ZnVuY3Rpb24gdWUoZSkge1xuICAgICAgICAgICAgdmFyIHQgPSBkLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTt0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWUodCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLCB0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWZ1bmN0aW9uIGxlKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBuID0gZS5zcGxpdChcInxcIiksXG4gICAgICAgICAgICAgICAgaSA9IG4ubGVuZ3RoO3doaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICByLmF0dHJIYW5kbGVbbltpXV0gPSB0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZnVuY3Rpb24gY2UoZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0ICYmIGUsXG4gICAgICAgICAgICAgICAgciA9IG4gJiYgMSA9PT0gZS5ub2RlVHlwZSAmJiAxID09PSB0Lm5vZGVUeXBlICYmIGUuc291cmNlSW5kZXggLSB0LnNvdXJjZUluZGV4O2lmIChyKSByZXR1cm4gcjtpZiAobikgd2hpbGUgKG4gPSBuLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4gPT09IHQpIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1yZXR1cm4gZSA/IDEgOiAtMTtcbiAgICAgICAgfWZ1bmN0aW9uIGZlKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImlucHV0XCIgPT09IHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiB0LnR5cGUgPT09IGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24gcGUoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIChcImlucHV0XCIgPT09IG4gfHwgXCJidXR0b25cIiA9PT0gbikgJiYgdC50eXBlID09PSBlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfWZ1bmN0aW9uIGRlKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImZvcm1cIiBpbiB0ID8gdC5wYXJlbnROb2RlICYmICExID09PSB0LmRpc2FibGVkID8gXCJsYWJlbFwiIGluIHQgPyBcImxhYmVsXCIgaW4gdC5wYXJlbnROb2RlID8gdC5wYXJlbnROb2RlLmRpc2FibGVkID09PSBlIDogdC5kaXNhYmxlZCA9PT0gZSA6IHQuaXNEaXNhYmxlZCA9PT0gZSB8fCB0LmlzRGlzYWJsZWQgIT09ICFlICYmIGllKHQpID09PSBlIDogdC5kaXNhYmxlZCA9PT0gZSA6IFwibGFiZWxcIiBpbiB0ICYmIHQuZGlzYWJsZWQgPT09IGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24gaGUoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPSArdCwgc2UoZnVuY3Rpb24gKG4sIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gZShbXSwgbi5sZW5ndGgsIHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG8ubGVuZ3RoO3doaWxlIChhLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5baSA9IG9bYV1dICYmIChuW2ldID0gIShyW2ldID0gbltpXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfWZ1bmN0aW9uIGdlKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUgJiYgZTtcbiAgICAgICAgfW4gPSBvZS5zdXBwb3J0ID0ge30sIG8gPSBvZS5pc1hNTCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGUgJiYgKGUub3duZXJEb2N1bWVudCB8fCBlKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuICEhdCAmJiBcIkhUTUxcIiAhPT0gdC5ub2RlTmFtZTtcbiAgICAgICAgfSwgcCA9IG9lLnNldERvY3VtZW50ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgYSA9IGUgPyBlLm93bmVyRG9jdW1lbnQgfHwgZSA6IHc7cmV0dXJuIGEgIT09IGQgJiYgOSA9PT0gYS5ub2RlVHlwZSAmJiBhLmRvY3VtZW50RWxlbWVudCA/IChkID0gYSwgaCA9IGQuZG9jdW1lbnRFbGVtZW50LCBnID0gIW8oZCksIHcgIT09IGQgJiYgKGkgPSBkLmRlZmF1bHRWaWV3KSAmJiBpLnRvcCAhPT0gaSAmJiAoaS5hZGRFdmVudExpc3RlbmVyID8gaS5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsIHJlLCAhMSkgOiBpLmF0dGFjaEV2ZW50ICYmIGkuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLCByZSkpLCBuLmF0dHJpYnV0ZXMgPSB1ZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlLmNsYXNzTmFtZSA9IFwiaVwiLCAhZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG4gICAgICAgICAgICB9KSwgbi5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IHVlKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuYXBwZW5kQ2hpbGQoZC5jcmVhdGVDb21tZW50KFwiXCIpKSwgIWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcbiAgICAgICAgICAgIH0pLCBuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBRLnRlc3QoZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSwgbi5nZXRCeUlkID0gdWUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaC5hcHBlbmRDaGlsZChlKS5pZCA9IGIsICFkLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkLmdldEVsZW1lbnRzQnlOYW1lKGIpLmxlbmd0aDtcbiAgICAgICAgICAgIH0pLCBuLmdldEJ5SWQgPyAoci5maWx0ZXIuSUQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZS5yZXBsYWNlKFosIGVlKTtyZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sIHIuZmluZC5JRCA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQgJiYgZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQuZ2V0RWxlbWVudEJ5SWQoZSk7cmV0dXJuIG4gPyBbbl0gOiBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSA6IChyLmZpbHRlci5JRCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBlLnJlcGxhY2UoWiwgZWUpO3JldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSAmJiBlLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtyZXR1cm4gbiAmJiBuLnZhbHVlID09PSB0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LCByLmZpbmQuSUQgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB0LmdldEVsZW1lbnRCeUlkICYmIGcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0LmdldEVsZW1lbnRCeUlkKGUpO2lmIChvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKG4gPSBvLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkgJiYgbi52YWx1ZSA9PT0gZSkgcmV0dXJuIFtvXTtpID0gdC5nZXRFbGVtZW50c0J5TmFtZShlKSwgciA9IDA7d2hpbGUgKG8gPSBpW3IrK10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKG4gPSBvLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkgJiYgbi52YWx1ZSA9PT0gZSkgcmV0dXJuIFtvXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfXJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgci5maW5kLlRBRyA9IG4uZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8gdC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKSA6IG4ucXNhID8gdC5xdWVyeVNlbGVjdG9yQWxsKGUpIDogdm9pZCAwO1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICAgIHIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmIChcIipcIiA9PT0gZSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobiA9IG9baSsrXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgMSA9PT0gbi5ub2RlVHlwZSAmJiByLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgIH1yZXR1cm4gcjtcbiAgICAgICAgICAgICAgICB9cmV0dXJuIG87XG4gICAgICAgICAgICB9LCByLmZpbmQuQ0xBU1MgPSBuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGcpIHJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSk7XG4gICAgICAgICAgICB9LCB2ID0gW10sIHkgPSBbXSwgKG4ucXNhID0gUS50ZXN0KGQucXVlcnlTZWxlY3RvckFsbCkpICYmICh1ZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGguYXBwZW5kQ2hpbGQoZSkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBiICsgXCInPjwvYT48c2VsZWN0IGlkPSdcIiArIGIgKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggJiYgeS5wdXNoKFwiWypeJF09XCIgKyBNICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCB8fCB5LnB1c2goXCJcXFxcW1wiICsgTSArIFwiKig/OnZhbHVlfFwiICsgUCArIFwiKVwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIiArIGIgKyBcIi1dXCIpLmxlbmd0aCB8fCB5LnB1c2goXCJ+PVwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoIHx8IHkucHVzaChcIjpjaGVja2VkXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiICsgYiArIFwiKypcIikubGVuZ3RoIHx8IHkucHVzaChcIi4jLitbK35dXCIpO1xuICAgICAgICAgICAgfSksIHVlKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciB0ID0gZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpLCBlLmFwcGVuZENoaWxkKHQpLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJEXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggJiYgeS5wdXNoKFwibmFtZVwiICsgTSArIFwiKlsqXiR8IX5dPz1cIiksIDIgIT09IGUucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAmJiB5LnB1c2goXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiKSwgaC5hcHBlbmRDaGlsZChlKS5kaXNhYmxlZCA9ICEwLCAyICE9PSBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICYmIHkucHVzaChcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLCB5LnB1c2goXCIsLio6XCIpO1xuICAgICAgICAgICAgfSkpLCAobi5tYXRjaGVzU2VsZWN0b3IgPSBRLnRlc3QobSA9IGgubWF0Y2hlcyB8fCBoLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBoLm1vek1hdGNoZXNTZWxlY3RvciB8fCBoLm9NYXRjaGVzU2VsZWN0b3IgfHwgaC5tc01hdGNoZXNTZWxlY3RvcikpICYmIHVlKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgbi5kaXNjb25uZWN0ZWRNYXRjaCA9IG0uY2FsbChlLCBcIipcIiksIG0uY2FsbChlLCBcIltzIT0nJ106eFwiKSwgdi5wdXNoKFwiIT1cIiwgVyk7XG4gICAgICAgICAgICB9KSwgeSA9IHkubGVuZ3RoICYmIG5ldyBSZWdFeHAoeS5qb2luKFwifFwiKSksIHYgPSB2Lmxlbmd0aCAmJiBuZXcgUmVnRXhwKHYuam9pbihcInxcIikpLCB0ID0gUS50ZXN0KGguY29tcGFyZURvY3VtZW50UG9zaXRpb24pLCB4ID0gdCB8fCBRLnRlc3QoaC5jb250YWlucykgPyBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gOSA9PT0gZS5ub2RlVHlwZSA/IGUuZG9jdW1lbnRFbGVtZW50IDogZSxcbiAgICAgICAgICAgICAgICAgICAgciA9IHQgJiYgdC5wYXJlbnROb2RlO3JldHVybiBlID09PSByIHx8ICEoIXIgfHwgMSAhPT0gci5ub2RlVHlwZSB8fCAhKG4uY29udGFpbnMgPyBuLmNvbnRhaW5zKHIpIDogZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiAxNiAmIGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikpKTtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgIGlmICh0KSB3aGlsZSAodCA9IHQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gZSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgIH1yZXR1cm4gITE7XG4gICAgICAgICAgICB9LCBEID0gdCA/IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgPT09IHQpIHJldHVybiBmID0gITAsIDA7dmFyIHIgPSAhZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICF0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO3JldHVybiByIHx8ICgxICYgKHIgPSAoZS5vd25lckRvY3VtZW50IHx8IGUpID09PSAodC5vd25lckRvY3VtZW50IHx8IHQpID8gZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KSA6IDEpIHx8ICFuLnNvcnREZXRhY2hlZCAmJiB0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGUpID09PSByID8gZSA9PT0gZCB8fCBlLm93bmVyRG9jdW1lbnQgPT09IHcgJiYgeCh3LCBlKSA/IC0xIDogdCA9PT0gZCB8fCB0Lm93bmVyRG9jdW1lbnQgPT09IHcgJiYgeCh3LCB0KSA/IDEgOiBjID8gTyhjLCBlKSAtIE8oYywgdCkgOiAwIDogNCAmIHIgPyAtMSA6IDEpO1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgPT09IHQpIHJldHVybiBmID0gITAsIDA7dmFyIG4sXG4gICAgICAgICAgICAgICAgICAgIHIgPSAwLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgICBvID0gdC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgICBhID0gW2VdLFxuICAgICAgICAgICAgICAgICAgICBzID0gW3RdO2lmICghaSB8fCAhbykgcmV0dXJuIGUgPT09IGQgPyAtMSA6IHQgPT09IGQgPyAxIDogaSA/IC0xIDogbyA/IDEgOiBjID8gTyhjLCBlKSAtIE8oYywgdCkgOiAwO2lmIChpID09PSBvKSByZXR1cm4gY2UoZSwgdCk7biA9IGU7d2hpbGUgKG4gPSBuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgYS51bnNoaWZ0KG4pO1xuICAgICAgICAgICAgICAgIH1uID0gdDt3aGlsZSAobiA9IG4ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBzLnVuc2hpZnQobik7XG4gICAgICAgICAgICAgICAgfXdoaWxlIChhW3JdID09PSBzW3JdKSB7XG4gICAgICAgICAgICAgICAgICAgIHIrKztcbiAgICAgICAgICAgICAgICB9cmV0dXJuIHIgPyBjZShhW3JdLCBzW3JdKSA6IGFbcl0gPT09IHcgPyAtMSA6IHNbcl0gPT09IHcgPyAxIDogMDtcbiAgICAgICAgICAgIH0sIGQpIDogZDtcbiAgICAgICAgfSwgb2UubWF0Y2hlcyA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2UoZSwgbnVsbCwgbnVsbCwgdCk7XG4gICAgICAgIH0sIG9lLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICBpZiAoKGUub3duZXJEb2N1bWVudCB8fCBlKSAhPT0gZCAmJiBwKGUpLCB0ID0gdC5yZXBsYWNlKHosIFwiPSckMSddXCIpLCBuLm1hdGNoZXNTZWxlY3RvciAmJiBnICYmICFTW3QgKyBcIiBcIl0gJiYgKCF2IHx8ICF2LnRlc3QodCkpICYmICgheSB8fCAheS50ZXN0KHQpKSkgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IG0uY2FsbChlLCB0KTtpZiAociB8fCBuLmRpc2Nvbm5lY3RlZE1hdGNoIHx8IGUuZG9jdW1lbnQgJiYgMTEgIT09IGUuZG9jdW1lbnQubm9kZVR5cGUpIHJldHVybiByO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31yZXR1cm4gb2UodCwgZCwgbnVsbCwgW2VdKS5sZW5ndGggPiAwO1xuICAgICAgICB9LCBvZS5jb250YWlucyA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gKGUub3duZXJEb2N1bWVudCB8fCBlKSAhPT0gZCAmJiBwKGUpLCB4KGUsIHQpO1xuICAgICAgICB9LCBvZS5hdHRyID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICAgIChlLm93bmVyRG9jdW1lbnQgfHwgZSkgIT09IGQgJiYgcChlKTt2YXIgaSA9IHIuYXR0ckhhbmRsZVt0LnRvTG93ZXJDYXNlKCldLFxuICAgICAgICAgICAgICAgIG8gPSBpICYmIE4uY2FsbChyLmF0dHJIYW5kbGUsIHQudG9Mb3dlckNhc2UoKSkgPyBpKGUsIHQsICFnKSA6IHZvaWQgMDtyZXR1cm4gdm9pZCAwICE9PSBvID8gbyA6IG4uYXR0cmlidXRlcyB8fCAhZyA/IGUuZ2V0QXR0cmlidXRlKHQpIDogKG8gPSBlLmdldEF0dHJpYnV0ZU5vZGUodCkpICYmIG8uc3BlY2lmaWVkID8gby52YWx1ZSA6IG51bGw7XG4gICAgICAgIH0sIG9lLmVzY2FwZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gKGUgKyBcIlwiKS5yZXBsYWNlKHRlLCBuZSk7XG4gICAgICAgIH0sIG9lLmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgZSk7XG4gICAgICAgIH0sIG9lLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgciA9IFtdLFxuICAgICAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgICAgIG8gPSAwO2lmIChmID0gIW4uZGV0ZWN0RHVwbGljYXRlcywgYyA9ICFuLnNvcnRTdGFibGUgJiYgZS5zbGljZSgwKSwgZS5zb3J0KEQpLCBmKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHQgPSBlW28rK10pIHtcbiAgICAgICAgICAgICAgICAgICAgdCA9PT0gZVtvXSAmJiAoaSA9IHIucHVzaChvKSk7XG4gICAgICAgICAgICAgICAgfXdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgZS5zcGxpY2UocltpXSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJldHVybiBjID0gbnVsbCwgZTtcbiAgICAgICAgfSwgaSA9IG9lLmdldFRleHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgbiA9IFwiXCIsXG4gICAgICAgICAgICAgICAgciA9IDAsXG4gICAgICAgICAgICAgICAgbyA9IGUubm9kZVR5cGU7aWYgKG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoMSA9PT0gbyB8fCA5ID09PSBvIHx8IDExID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBlLnRleHRDb250ZW50KSByZXR1cm4gZS50ZXh0Q29udGVudDtmb3IgKGUgPSBlLmZpcnN0Q2hpbGQ7IGU7IGUgPSBlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuICs9IGkoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKDMgPT09IG8gfHwgNCA9PT0gbykgcmV0dXJuIGUubm9kZVZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHdoaWxlICh0ID0gZVtyKytdKSB7XG4gICAgICAgICAgICAgICAgbiArPSBpKHQpO1xuICAgICAgICAgICAgfXJldHVybiBuO1xuICAgICAgICB9LCAociA9IG9lLnNlbGVjdG9ycyA9IHsgY2FjaGVMZW5ndGg6IDUwLCBjcmVhdGVQc2V1ZG86IHNlLCBtYXRjaDogViwgYXR0ckhhbmRsZToge30sIGZpbmQ6IHt9LCByZWxhdGl2ZTogeyBcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogITAgfSwgXCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LCBcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiAhMCB9LCBcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfSB9LCBwcmVGaWx0ZXI6IHsgQVRUUjogZnVuY3Rpb24gQVRUUihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlWzFdID0gZVsxXS5yZXBsYWNlKFosIGVlKSwgZVszXSA9IChlWzNdIHx8IGVbNF0gfHwgZVs1XSB8fCBcIlwiKS5yZXBsYWNlKFosIGVlKSwgXCJ+PVwiID09PSBlWzJdICYmIChlWzNdID0gXCIgXCIgKyBlWzNdICsgXCIgXCIpLCBlLnNsaWNlKDAsIDQpO1xuICAgICAgICAgICAgICAgIH0sIENISUxEOiBmdW5jdGlvbiBDSElMRChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlWzFdID0gZVsxXS50b0xvd2VyQ2FzZSgpLCBcIm50aFwiID09PSBlWzFdLnNsaWNlKDAsIDMpID8gKGVbM10gfHwgb2UuZXJyb3IoZVswXSksIGVbNF0gPSArKGVbNF0gPyBlWzVdICsgKGVbNl0gfHwgMSkgOiAyICogKFwiZXZlblwiID09PSBlWzNdIHx8IFwib2RkXCIgPT09IGVbM10pKSwgZVs1XSA9ICsoZVs3XSArIGVbOF0gfHwgXCJvZGRcIiA9PT0gZVszXSkpIDogZVszXSAmJiBvZS5lcnJvcihlWzBdKSwgZTtcbiAgICAgICAgICAgICAgICB9LCBQU0VVRE86IGZ1bmN0aW9uIFBTRVVETyhlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9ICFlWzZdICYmIGVbMl07cmV0dXJuIFYuQ0hJTEQudGVzdChlWzBdKSA/IG51bGwgOiAoZVszXSA/IGVbMl0gPSBlWzRdIHx8IGVbNV0gfHwgXCJcIiA6IG4gJiYgWC50ZXN0KG4pICYmICh0ID0gYShuLCAhMCkpICYmICh0ID0gbi5pbmRleE9mKFwiKVwiLCBuLmxlbmd0aCAtIHQpIC0gbi5sZW5ndGgpICYmIChlWzBdID0gZVswXS5zbGljZSgwLCB0KSwgZVsyXSA9IG4uc2xpY2UoMCwgdCkpLCBlLnNsaWNlKDAsIDMpKTtcbiAgICAgICAgICAgICAgICB9IH0sIGZpbHRlcjogeyBUQUc6IGZ1bmN0aW9uIFRBRyhlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZS5yZXBsYWNlKFosIGVlKS50b0xvd2VyQ2FzZSgpO3JldHVybiBcIipcIiA9PT0gZSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5ub2RlTmFtZSAmJiBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSwgQ0xBU1M6IGZ1bmN0aW9uIENMQVNTKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBFW2UgKyBcIiBcIl07cmV0dXJuIHQgfHwgKHQgPSBuZXcgUmVnRXhwKFwiKF58XCIgKyBNICsgXCIpXCIgKyBlICsgXCIoXCIgKyBNICsgXCJ8JClcIikpICYmIEUoZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnRlc3QoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5jbGFzc05hbWUgJiYgZS5jbGFzc05hbWUgfHwgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZS5nZXRBdHRyaWJ1dGUgJiYgZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgQVRUUjogZnVuY3Rpb24gQVRUUihlLCB0LCBuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBvZS5hdHRyKHIsIGUpO3JldHVybiBudWxsID09IGkgPyBcIiE9XCIgPT09IHQgOiAhdCB8fCAoaSArPSBcIlwiLCBcIj1cIiA9PT0gdCA/IGkgPT09IG4gOiBcIiE9XCIgPT09IHQgPyBpICE9PSBuIDogXCJePVwiID09PSB0ID8gbiAmJiAwID09PSBpLmluZGV4T2YobikgOiBcIio9XCIgPT09IHQgPyBuICYmIGkuaW5kZXhPZihuKSA+IC0xIDogXCIkPVwiID09PSB0ID8gbiAmJiBpLnNsaWNlKC1uLmxlbmd0aCkgPT09IG4gOiBcIn49XCIgPT09IHQgPyAoXCIgXCIgKyBpLnJlcGxhY2UoJCwgXCIgXCIpICsgXCIgXCIpLmluZGV4T2YobikgPiAtMSA6IFwifD1cIiA9PT0gdCAmJiAoaSA9PT0gbiB8fCBpLnNsaWNlKDAsIG4ubGVuZ3RoICsgMSkgPT09IG4gKyBcIi1cIikpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIENISUxEOiBmdW5jdGlvbiBDSElMRChlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gXCJudGhcIiAhPT0gZS5zbGljZSgwLCAzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBcImxhc3RcIiAhPT0gZS5zbGljZSgtNCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gXCJvZi10eXBlXCIgPT09IHQ7cmV0dXJuIDEgPT09IHIgJiYgMCA9PT0gaSA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAodCwgbiwgdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBvICE9PSBhID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gdC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBzICYmIHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gIXUgJiYgIXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9ICExO2lmICh5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB0O3doaWxlIChwID0gcFtnXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID8gcC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB2IDogMSA9PT0gcC5ub2RlVHlwZSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWggPSBnID0gXCJvbmx5XCIgPT09IGUgJiYgIWggJiYgXCJuZXh0U2libGluZ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9cmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAoaCA9IFthID8geS5maXJzdENoaWxkIDogeS5sYXN0Q2hpbGRdLCBhICYmIG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IChkID0gKGwgPSAoYyA9IChmID0gKHAgPSB5KVtiXSB8fCAocFtiXSA9IHt9KSlbcC51bmlxdWVJRF0gfHwgKGZbcC51bmlxdWVJRF0gPSB7fSkpW2VdIHx8IFtdKVswXSA9PT0gVCAmJiBsWzFdKSAmJiBsWzJdLCBwID0gZCAmJiB5LmNoaWxkTm9kZXNbZF07d2hpbGUgKHAgPSArK2QgJiYgcCAmJiBwW2ddIHx8ICh4ID0gZCA9IDApIHx8IGgucG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgxID09PSBwLm5vZGVUeXBlICYmICsreCAmJiBwID09PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1tlXSA9IFtULCBkLCB4XTticmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobSAmJiAoeCA9IGQgPSAobCA9IChjID0gKGYgPSAocCA9IHQpW2JdIHx8IChwW2JdID0ge30pKVtwLnVuaXF1ZUlEXSB8fCAoZltwLnVuaXF1ZUlEXSA9IHt9KSlbZV0gfHwgW10pWzBdID09PSBUICYmIGxbMV0pLCAhMSA9PT0geCkgd2hpbGUgKHAgPSArK2QgJiYgcCAmJiBwW2ddIHx8ICh4ID0gZCA9IDApIHx8IGgucG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChzID8gcC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB2IDogMSA9PT0gcC5ub2RlVHlwZSkgJiYgKyt4ICYmIChtICYmICgoYyA9IChmID0gcFtiXSB8fCAocFtiXSA9IHt9KSlbcC51bmlxdWVJRF0gfHwgKGZbcC51bmlxdWVJRF0gPSB7fSkpW2VdID0gW1QsIHhdKSwgcCA9PT0gdCkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1yZXR1cm4gKHggLT0gaSkgPT09IHIgfHwgeCAlIHIgPT0gMCAmJiB4IC8gciA+PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIFBTRVVETzogZnVuY3Rpb24gUFNFVURPKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gci5wc2V1ZG9zW2VdIHx8IHIuc2V0RmlsdGVyc1tlLnRvTG93ZXJDYXNlKCldIHx8IG9lLmVycm9yKFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIGUpO3JldHVybiBpW2JdID8gaSh0KSA6IGkubGVuZ3RoID4gMSA/IChuID0gW2UsIGUsIFwiXCIsIHRdLCByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKSA/IHNlKGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gaShlLCB0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gby5sZW5ndGg7d2hpbGUgKGEtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVbciA9IE8oZSwgb1thXSldID0gIShuW3JdID0gb1thXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpKGUsIDAsIG4pO1xuICAgICAgICAgICAgICAgICAgICB9KSA6IGk7XG4gICAgICAgICAgICAgICAgfSB9LCBwc2V1ZG9zOiB7IG5vdDogc2UoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBzKGUucmVwbGFjZShCLCBcIiQxXCIpKTtyZXR1cm4gcltiXSA/IHNlKGZ1bmN0aW9uIChlLCB0LCBuLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gcihlLCBudWxsLCBpLCBbXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGUubGVuZ3RoO3doaWxlIChzLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobyA9IGFbc10pICYmIChlW3NdID0gISh0W3NdID0gbykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSA6IGZ1bmN0aW9uIChlLCBpLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFswXSA9IGUsIHIodCwgbnVsbCwgbywgbiksIHRbMF0gPSBudWxsLCAhbi5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSwgaGFzOiBzZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZShlLCB0KS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pLCBjb250YWluczogc2UoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBlLnJlcGxhY2UoWiwgZWUpLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0LnRleHRDb250ZW50IHx8IHQuaW5uZXJUZXh0IHx8IGkodCkpLmluZGV4T2YoZSkgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSwgbGFuZzogc2UoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFUudGVzdChlIHx8IFwiXCIpIHx8IG9lLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBlKSwgZSA9IGUucmVwbGFjZShaLCBlZSkudG9Mb3dlckNhc2UoKSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuO2RvIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9IGcgPyB0LmxhbmcgOiB0LmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IHQuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgcmV0dXJuIChuID0gbi50b0xvd2VyQ2FzZSgpKSA9PT0gZSB8fCAwID09PSBuLmluZGV4T2YoZSArIFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKCh0ID0gdC5wYXJlbnROb2RlKSAmJiAxID09PSB0Lm5vZGVUeXBlKTtyZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSksIHRhcmdldDogZnVuY3Rpb24gdGFyZ2V0KHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlLmxvY2F0aW9uICYmIGUubG9jYXRpb24uaGFzaDtyZXR1cm4gbiAmJiBuLnNsaWNlKDEpID09PSB0LmlkO1xuICAgICAgICAgICAgICAgIH0sIHJvb3Q6IGZ1bmN0aW9uIHJvb3QoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9PT0gaDtcbiAgICAgICAgICAgICAgICB9LCBmb2N1czogZnVuY3Rpb24gZm9jdXMoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9PT0gZC5hY3RpdmVFbGVtZW50ICYmICghZC5oYXNGb2N1cyB8fCBkLmhhc0ZvY3VzKCkpICYmICEhKGUudHlwZSB8fCBlLmhyZWYgfHwgfmUudGFiSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0sIGVuYWJsZWQ6IGRlKCExKSwgZGlzYWJsZWQ6IGRlKCEwKSwgY2hlY2tlZDogZnVuY3Rpb24gY2hlY2tlZChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBcImlucHV0XCIgPT09IHQgJiYgISFlLmNoZWNrZWQgfHwgXCJvcHRpb25cIiA9PT0gdCAmJiAhIWUuc2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfSwgc2VsZWN0ZWQ6IGZ1bmN0aW9uIHNlbGVjdGVkKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgITAgPT09IGUuc2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfSwgZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gZS5maXJzdENoaWxkOyBlOyBlID0gZS5uZXh0U2libGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUubm9kZVR5cGUgPCA2KSByZXR1cm4gITE7XG4gICAgICAgICAgICAgICAgICAgIH1yZXR1cm4gITA7XG4gICAgICAgICAgICAgICAgfSwgcGFyZW50OiBmdW5jdGlvbiBwYXJlbnQoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXIucHNldWRvcy5lbXB0eShlKTtcbiAgICAgICAgICAgICAgICB9LCBoZWFkZXI6IGZ1bmN0aW9uIGhlYWRlcihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBZLnRlc3QoZS5ub2RlTmFtZSk7XG4gICAgICAgICAgICAgICAgfSwgaW5wdXQ6IGZ1bmN0aW9uIGlucHV0KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEcudGVzdChlLm5vZGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9LCBidXR0b246IGZ1bmN0aW9uIGJ1dHRvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBcImlucHV0XCIgPT09IHQgJiYgXCJidXR0b25cIiA9PT0gZS50eXBlIHx8IFwiYnV0dG9uXCIgPT09IHQ7XG4gICAgICAgICAgICAgICAgfSwgdGV4dDogZnVuY3Rpb24gdGV4dChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0O3JldHVybiBcImlucHV0XCIgPT09IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiBcInRleHRcIiA9PT0gZS50eXBlICYmIChudWxsID09ICh0ID0gZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSB8fCBcInRleHRcIiA9PT0gdC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICB9LCBmaXJzdDogaGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzBdO1xuICAgICAgICAgICAgICAgIH0pLCBsYXN0OiBoZShmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3QgLSAxXTtcbiAgICAgICAgICAgICAgICB9KSwgZXE6IGhlKGZ1bmN0aW9uIChlLCB0LCBuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbiA8IDAgPyBuICsgdCA6IG5dO1xuICAgICAgICAgICAgICAgIH0pLCBldmVuOiBoZShmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHQ7IG4gKz0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgfSksIG9kZDogaGUoZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDE7IG4gPCB0OyBuICs9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgfXJldHVybiBlO1xuICAgICAgICAgICAgICAgIH0pLCBsdDogaGUoZnVuY3Rpb24gKGUsIHQsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IG4gPCAwID8gbiArIHQgOiBuOyAtLXIgPj0gMDspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgfXJldHVybiBlO1xuICAgICAgICAgICAgICAgIH0pLCBndDogaGUoZnVuY3Rpb24gKGUsIHQsIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IG4gPCAwID8gbiArIHQgOiBuOyArK3IgPCB0Oykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHIpO1xuICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgICAgICAgICAgfSkgfSB9KS5wc2V1ZG9zLm50aCA9IHIucHNldWRvcy5lcTtmb3IgKHQgaW4geyByYWRpbzogITAsIGNoZWNrYm94OiAhMCwgZmlsZTogITAsIHBhc3N3b3JkOiAhMCwgaW1hZ2U6ICEwIH0pIHtcbiAgICAgICAgICAgIHIucHNldWRvc1t0XSA9IGZlKHQpO1xuICAgICAgICB9Zm9yICh0IGluIHsgc3VibWl0OiAhMCwgcmVzZXQ6ICEwIH0pIHtcbiAgICAgICAgICAgIHIucHNldWRvc1t0XSA9IHBlKHQpO1xuICAgICAgICB9ZnVuY3Rpb24geWUoKSB7fXllLnByb3RvdHlwZSA9IHIuZmlsdGVycyA9IHIucHNldWRvcywgci5zZXRGaWx0ZXJzID0gbmV3IHllKCksIGEgPSBvZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICBjID0ga1tlICsgXCIgXCJdO2lmIChjKSByZXR1cm4gdCA/IDAgOiBjLnNsaWNlKDApO3MgPSBlLCB1ID0gW10sIGwgPSByLnByZUZpbHRlcjt3aGlsZSAocykge1xuICAgICAgICAgICAgICAgIG4gJiYgIShpID0gRi5leGVjKHMpKSB8fCAoaSAmJiAocyA9IHMuc2xpY2UoaVswXS5sZW5ndGgpIHx8IHMpLCB1LnB1c2gobyA9IFtdKSksIG4gPSAhMSwgKGkgPSBfLmV4ZWMocykpICYmIChuID0gaS5zaGlmdCgpLCBvLnB1c2goeyB2YWx1ZTogbiwgdHlwZTogaVswXS5yZXBsYWNlKEIsIFwiIFwiKSB9KSwgcyA9IHMuc2xpY2Uobi5sZW5ndGgpKTtmb3IgKGEgaW4gci5maWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgIShpID0gVlthXS5leGVjKHMpKSB8fCBsW2FdICYmICEoaSA9IGxbYV0oaSkpIHx8IChuID0gaS5zaGlmdCgpLCBvLnB1c2goeyB2YWx1ZTogbiwgdHlwZTogYSwgbWF0Y2hlczogaSB9KSwgcyA9IHMuc2xpY2Uobi5sZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9aWYgKCFuKSBicmVhaztcbiAgICAgICAgICAgIH1yZXR1cm4gdCA/IHMubGVuZ3RoIDogcyA/IG9lLmVycm9yKGUpIDogayhlLCB1KS5zbGljZSgwKTtcbiAgICAgICAgfTtmdW5jdGlvbiB2ZShlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciB0ID0gMCwgbiA9IGUubGVuZ3RoLCByID0gXCJcIjsgdCA8IG47IHQrKykge1xuICAgICAgICAgICAgICAgIHIgKz0gZVt0XS52YWx1ZTtcbiAgICAgICAgICAgIH1yZXR1cm4gcjtcbiAgICAgICAgfWZ1bmN0aW9uIG1lKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHZhciByID0gdC5kaXIsXG4gICAgICAgICAgICAgICAgaSA9IHQubmV4dCxcbiAgICAgICAgICAgICAgICBvID0gaSB8fCByLFxuICAgICAgICAgICAgICAgIGEgPSBuICYmIFwicGFyZW50Tm9kZVwiID09PSBvLFxuICAgICAgICAgICAgICAgIHMgPSBDKys7cmV0dXJuIHQuZmlyc3QgPyBmdW5jdGlvbiAodCwgbiwgaSkge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0ID0gdFtyXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gdC5ub2RlVHlwZSB8fCBhKSByZXR1cm4gZSh0LCBuLCBpKTtcbiAgICAgICAgICAgICAgICB9cmV0dXJuICExO1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uICh0LCBuLCB1KSB7XG4gICAgICAgICAgICAgICAgdmFyIGwsXG4gICAgICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgICAgIHAgPSBbVCwgc107aWYgKHUpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHQgPSB0W3JdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKDEgPT09IHQubm9kZVR5cGUgfHwgYSkgJiYgZSh0LCBuLCB1KSkgcmV0dXJuICEwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHdoaWxlICh0ID0gdFtyXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gdC5ub2RlVHlwZSB8fCBhKSBpZiAoZiA9IHRbYl0gfHwgKHRbYl0gPSB7fSksIGMgPSBmW3QudW5pcXVlSURdIHx8IChmW3QudW5pcXVlSURdID0ge30pLCBpICYmIGkgPT09IHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgdCA9IHRbcl0gfHwgdDtlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgobCA9IGNbb10pICYmIGxbMF0gPT09IFQgJiYgbFsxXSA9PT0gcykgcmV0dXJuIHBbMl0gPSBsWzJdO2lmIChjW29dID0gcCwgcFsyXSA9IGUodCwgbiwgdSkpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1yZXR1cm4gITE7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9ZnVuY3Rpb24geGUoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUubGVuZ3RoID4gMSA/IGZ1bmN0aW9uICh0LCBuLCByKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlLmxlbmd0aDt3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZVtpXSh0LCBuLCByKSkgcmV0dXJuICExO1xuICAgICAgICAgICAgICAgIH1yZXR1cm4gITA7XG4gICAgICAgICAgICB9IDogZVswXTtcbiAgICAgICAgfWZ1bmN0aW9uIGJlKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBpID0gdC5sZW5ndGg7IHIgPCBpOyByKyspIHtcbiAgICAgICAgICAgICAgICBvZShlLCB0W3JdLCBuKTtcbiAgICAgICAgICAgIH1yZXR1cm4gbjtcbiAgICAgICAgfWZ1bmN0aW9uIHdlKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG8sIGEgPSBbXSwgcyA9IDAsIHUgPSBlLmxlbmd0aCwgbCA9IG51bGwgIT0gdDsgcyA8IHU7IHMrKykge1xuICAgICAgICAgICAgICAgIChvID0gZVtzXSkgJiYgKG4gJiYgIW4obywgciwgaSkgfHwgKGEucHVzaChvKSwgbCAmJiB0LnB1c2gocykpKTtcbiAgICAgICAgICAgIH1yZXR1cm4gYTtcbiAgICAgICAgfWZ1bmN0aW9uIFRlKGUsIHQsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgICAgIHJldHVybiByICYmICFyW2JdICYmIChyID0gVGUocikpLCBpICYmICFpW2JdICYmIChpID0gVGUoaSwgbykpLCBzZShmdW5jdGlvbiAobywgYSwgcywgdSkge1xuICAgICAgICAgICAgICAgIHZhciBsLFxuICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgICAgICBwID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGQgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgaCA9IGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBnID0gbyB8fCBiZSh0IHx8IFwiKlwiLCBzLm5vZGVUeXBlID8gW3NdIDogcywgW10pLFxuICAgICAgICAgICAgICAgICAgICB5ID0gIWUgfHwgIW8gJiYgdCA/IGcgOiB3ZShnLCBwLCBlLCBzLCB1KSxcbiAgICAgICAgICAgICAgICAgICAgdiA9IG4gPyBpIHx8IChvID8gZSA6IGggfHwgcikgPyBbXSA6IGEgOiB5O2lmIChuICYmIG4oeSwgdiwgcywgdSksIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgbCA9IHdlKHYsIGQpLCByKGwsIFtdLCBzLCB1KSwgYyA9IGwubGVuZ3RoO3doaWxlIChjLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChmID0gbFtjXSkgJiYgKHZbZFtjXV0gPSAhKHlbZFtjXV0gPSBmKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9aWYgKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgfHwgZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gW10sIGMgPSB2Lmxlbmd0aDt3aGlsZSAoYy0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmID0gdltjXSkgJiYgbC5wdXNoKHlbY10gPSBmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9aShudWxsLCB2ID0gW10sIGwsIHUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWMgPSB2Lmxlbmd0aDt3aGlsZSAoYy0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGYgPSB2W2NdKSAmJiAobCA9IGkgPyBPKG8sIGYpIDogcFtjXSkgPiAtMSAmJiAob1tsXSA9ICEoYVtsXSA9IGYpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB2ID0gd2UodiA9PT0gYSA/IHYuc3BsaWNlKGgsIHYubGVuZ3RoKSA6IHYpLCBpID8gaShudWxsLCBhLCB2LCB1KSA6IEwuYXBwbHkoYSwgdik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfWZ1bmN0aW9uIENlKGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHQsIG4sIGksIG8gPSBlLmxlbmd0aCwgYSA9IHIucmVsYXRpdmVbZVswXS50eXBlXSwgcyA9IGEgfHwgci5yZWxhdGl2ZVtcIiBcIl0sIHUgPSBhID8gMSA6IDAsIGMgPSBtZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlID09PSB0O1xuICAgICAgICAgICAgfSwgcywgITApLCBmID0gbWUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTyh0LCBlKSA+IC0xO1xuICAgICAgICAgICAgfSwgcywgITApLCBwID0gW2Z1bmN0aW9uIChlLCBuLCByKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAhYSAmJiAociB8fCBuICE9PSBsKSB8fCAoKHQgPSBuKS5ub2RlVHlwZSA/IGMoZSwgbiwgcikgOiBmKGUsIG4sIHIpKTtyZXR1cm4gdCA9IG51bGwsIGk7XG4gICAgICAgICAgICB9XTsgdSA8IG87IHUrKykge1xuICAgICAgICAgICAgICAgIGlmIChuID0gci5yZWxhdGl2ZVtlW3VdLnR5cGVdKSBwID0gW21lKHhlKHApLCBuKV07ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgobiA9IHIuZmlsdGVyW2VbdV0udHlwZV0uYXBwbHkobnVsbCwgZVt1XS5tYXRjaGVzKSlbYl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9ICsrdTsgaSA8IG87IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLnJlbGF0aXZlW2VbaV0udHlwZV0pIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfXJldHVybiBUZSh1ID4gMSAmJiB4ZShwKSwgdSA+IDEgJiYgdmUoZS5zbGljZSgwLCB1IC0gMSkuY29uY2F0KHsgdmFsdWU6IFwiIFwiID09PSBlW3UgLSAyXS50eXBlID8gXCIqXCIgOiBcIlwiIH0pKS5yZXBsYWNlKEIsIFwiJDFcIiksIG4sIHUgPCBpICYmIENlKGUuc2xpY2UodSwgaSkpLCBpIDwgbyAmJiBDZShlID0gZS5zbGljZShpKSksIGkgPCBvICYmIHZlKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfXAucHVzaChuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9cmV0dXJuIHhlKHApO1xuICAgICAgICB9ZnVuY3Rpb24gRWUoZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0Lmxlbmd0aCA+IDAsXG4gICAgICAgICAgICAgICAgaSA9IGUubGVuZ3RoID4gMCxcbiAgICAgICAgICAgICAgICBvID0gZnVuY3Rpb24gbyhfbywgYSwgcywgdSwgYykge1xuICAgICAgICAgICAgICAgIHZhciBmLFxuICAgICAgICAgICAgICAgICAgICBoLFxuICAgICAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgICAgICB2ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgbSA9IFwiMFwiLFxuICAgICAgICAgICAgICAgICAgICB4ID0gX28gJiYgW10sXG4gICAgICAgICAgICAgICAgICAgIGIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgdyA9IGwsXG4gICAgICAgICAgICAgICAgICAgIEMgPSBfbyB8fCBpICYmIHIuZmluZC5UQUcoXCIqXCIsIGMpLFxuICAgICAgICAgICAgICAgICAgICBFID0gVCArPSBudWxsID09IHcgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAuMSxcbiAgICAgICAgICAgICAgICAgICAgayA9IEMubGVuZ3RoO2ZvciAoYyAmJiAobCA9IGEgPT09IGQgfHwgYSB8fCBjKTsgbSAhPT0gayAmJiBudWxsICE9IChmID0gQ1ttXSk7IG0rKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAmJiBmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gMCwgYSB8fCBmLm93bmVyRG9jdW1lbnQgPT09IGQgfHwgKHAoZiksIHMgPSAhZyk7d2hpbGUgKHkgPSBlW2grK10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeShmLCBhIHx8IGQsIHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUucHVzaChmKTticmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9YyAmJiAoVCA9IEUpO1xuICAgICAgICAgICAgICAgICAgICB9biAmJiAoKGYgPSAheSAmJiBmKSAmJiB2LS0sIF9vICYmIHgucHVzaChmKSk7XG4gICAgICAgICAgICAgICAgfWlmICh2ICs9IG0sIG4gJiYgbSAhPT0gdikge1xuICAgICAgICAgICAgICAgICAgICBoID0gMDt3aGlsZSAoeSA9IHRbaCsrXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeSh4LCBiLCBhLCBzKTtcbiAgICAgICAgICAgICAgICAgICAgfWlmIChfbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYgPiAwKSB3aGlsZSAobS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeFttXSB8fCBiW21dIHx8IChiW21dID0gai5jYWxsKHUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1iID0gd2UoYik7XG4gICAgICAgICAgICAgICAgICAgIH1MLmFwcGx5KHUsIGIpLCBjICYmICFfbyAmJiBiLmxlbmd0aCA+IDAgJiYgdiArIHQubGVuZ3RoID4gMSAmJiBvZS51bmlxdWVTb3J0KHUpO1xuICAgICAgICAgICAgICAgIH1yZXR1cm4gYyAmJiAoVCA9IEUsIGwgPSB3KSwgeDtcbiAgICAgICAgICAgIH07cmV0dXJuIG4gPyBzZShvKSA6IG87XG4gICAgICAgIH1yZXR1cm4gcyA9IG9lLmNvbXBpbGUgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgciA9IFtdLFxuICAgICAgICAgICAgICAgIGkgPSBbXSxcbiAgICAgICAgICAgICAgICBvID0gU1tlICsgXCIgXCJdO2lmICghbykge1xuICAgICAgICAgICAgICAgIHQgfHwgKHQgPSBhKGUpKSwgbiA9IHQubGVuZ3RoO3doaWxlIChuLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgKG8gPSBDZSh0W25dKSlbYl0gPyByLnB1c2gobykgOiBpLnB1c2gobyk7XG4gICAgICAgICAgICAgICAgfShvID0gUyhlLCBFZShpLCByKSkpLnNlbGVjdG9yID0gZTtcbiAgICAgICAgICAgIH1yZXR1cm4gbztcbiAgICAgICAgfSwgdSA9IG9lLnNlbGVjdCA9IGZ1bmN0aW9uIChlLCB0LCBuLCBpKSB7XG4gICAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgICAgICB1LFxuICAgICAgICAgICAgICAgIGwsXG4gICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICBmLFxuICAgICAgICAgICAgICAgIHAgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUgJiYgZSxcbiAgICAgICAgICAgICAgICBkID0gIWkgJiYgYShlID0gcC5zZWxlY3RvciB8fCBlKTtpZiAobiA9IG4gfHwgW10sIDEgPT09IGQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCh1ID0gZFswXSA9IGRbMF0uc2xpY2UoMCkpLmxlbmd0aCA+IDIgJiYgXCJJRFwiID09PSAobCA9IHVbMF0pLnR5cGUgJiYgOSA9PT0gdC5ub2RlVHlwZSAmJiBnICYmIHIucmVsYXRpdmVbdVsxXS50eXBlXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gKHIuZmluZC5JRChsLm1hdGNoZXNbMF0ucmVwbGFjZShaLCBlZSksIHQpIHx8IFtdKVswXSkpIHJldHVybiBuO3AgJiYgKHQgPSB0LnBhcmVudE5vZGUpLCBlID0gZS5zbGljZSh1LnNoaWZ0KCkudmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9byA9IFYubmVlZHNDb250ZXh0LnRlc3QoZSkgPyAwIDogdS5sZW5ndGg7d2hpbGUgKG8tLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobCA9IHVbb10sIHIucmVsYXRpdmVbYyA9IGwudHlwZV0pIGJyZWFrO2lmICgoZiA9IHIuZmluZFtjXSkgJiYgKGkgPSBmKGwubWF0Y2hlc1swXS5yZXBsYWNlKFosIGVlKSwgSy50ZXN0KHVbMF0udHlwZSkgJiYgZ2UodC5wYXJlbnROb2RlKSB8fCB0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1LnNwbGljZShvLCAxKSwgIShlID0gaS5sZW5ndGggJiYgdmUodSkpKSByZXR1cm4gTC5hcHBseShuLCBpKSwgbjticmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1yZXR1cm4gKHAgfHwgcyhlLCBkKSkoaSwgdCwgIWcsIG4sICF0IHx8IEsudGVzdChlKSAmJiBnZSh0LnBhcmVudE5vZGUpIHx8IHQpLCBuO1xuICAgICAgICB9LCBuLnNvcnRTdGFibGUgPSBiLnNwbGl0KFwiXCIpLnNvcnQoRCkuam9pbihcIlwiKSA9PT0gYiwgbi5kZXRlY3REdXBsaWNhdGVzID0gISFmLCBwKCksIG4uc29ydERldGFjaGVkID0gdWUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiAxICYgZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSk7XG4gICAgICAgIH0pLCB1ZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCIsIFwiI1wiID09PSBlLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgICAgfSkgfHwgbGUoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uIChlLCB0LCBuKSB7XG4gICAgICAgICAgICBpZiAoIW4pIHJldHVybiBlLmdldEF0dHJpYnV0ZSh0LCBcInR5cGVcIiA9PT0gdC50b0xvd2VyQ2FzZSgpID8gMSA6IDIpO1xuICAgICAgICB9KSwgbi5hdHRyaWJ1dGVzICYmIHVlKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCIsIGUuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIlwiKSwgXCJcIiA9PT0gZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICAgICAgICB9KSB8fCBsZShcInZhbHVlXCIsIGZ1bmN0aW9uIChlLCB0LCBuKSB7XG4gICAgICAgICAgICBpZiAoIW4gJiYgXCJpbnB1dFwiID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiBlLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSksIHVlKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBlLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9KSB8fCBsZShQLCBmdW5jdGlvbiAoZSwgdCwgbikge1xuICAgICAgICAgICAgdmFyIHI7aWYgKCFuKSByZXR1cm4gITAgPT09IGVbdF0gPyB0LnRvTG93ZXJDYXNlKCkgOiAociA9IGUuZ2V0QXR0cmlidXRlTm9kZSh0KSkgJiYgci5zcGVjaWZpZWQgPyByLnZhbHVlIDogbnVsbDtcbiAgICAgICAgfSksIG9lO1xuICAgIH0oZSk7dy5maW5kID0gRSwgdy5leHByID0gRS5zZWxlY3RvcnMsIHcuZXhwcltcIjpcIl0gPSB3LmV4cHIucHNldWRvcywgdy51bmlxdWVTb3J0ID0gdy51bmlxdWUgPSBFLnVuaXF1ZVNvcnQsIHcudGV4dCA9IEUuZ2V0VGV4dCwgdy5pc1hNTERvYyA9IEUuaXNYTUwsIHcuY29udGFpbnMgPSBFLmNvbnRhaW5zLCB3LmVzY2FwZVNlbGVjdG9yID0gRS5lc2NhcGU7dmFyIGsgPSBmdW5jdGlvbiBrKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIgPSBbXSxcbiAgICAgICAgICAgIGkgPSB2b2lkIDAgIT09IG47d2hpbGUgKChlID0gZVt0XSkgJiYgOSAhPT0gZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgaWYgKDEgPT09IGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiB3KGUpLmlzKG4pKSBicmVhaztyLnB1c2goZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gcjtcbiAgICB9LFxuICAgICAgICBTID0gZnVuY3Rpb24gUyhlLCB0KSB7XG4gICAgICAgIGZvciAodmFyIG4gPSBbXTsgZTsgZSA9IGUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIDEgPT09IGUubm9kZVR5cGUgJiYgZSAhPT0gdCAmJiBuLnB1c2goZSk7XG4gICAgICAgIH1yZXR1cm4gbjtcbiAgICB9LFxuICAgICAgICBEID0gdy5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtmdW5jdGlvbiBOKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIGUubm9kZU5hbWUgJiYgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0LnRvTG93ZXJDYXNlKCk7XG4gICAgfXZhciBBID0gL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2k7ZnVuY3Rpb24gaihlLCB0LCBuKSB7XG4gICAgICAgIHJldHVybiBnKHQpID8gdy5ncmVwKGUsIGZ1bmN0aW9uIChlLCByKSB7XG4gICAgICAgICAgICByZXR1cm4gISF0LmNhbGwoZSwgciwgZSkgIT09IG47XG4gICAgICAgIH0pIDogdC5ub2RlVHlwZSA/IHcuZ3JlcChlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUgPT09IHQgIT09IG47XG4gICAgICAgIH0pIDogXCJzdHJpbmdcIiAhPSB0eXBlb2YgdCA/IHcuZ3JlcChlLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHUuY2FsbCh0LCBlKSA+IC0xICE9PSBuO1xuICAgICAgICB9KSA6IHcuZmlsdGVyKHQsIGUsIG4pO1xuICAgIH13LmZpbHRlciA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7XG4gICAgICAgIHZhciByID0gdFswXTtyZXR1cm4gbiAmJiAoZSA9IFwiOm5vdChcIiArIGUgKyBcIilcIiksIDEgPT09IHQubGVuZ3RoICYmIDEgPT09IHIubm9kZVR5cGUgPyB3LmZpbmQubWF0Y2hlc1NlbGVjdG9yKHIsIGUpID8gW3JdIDogW10gOiB3LmZpbmQubWF0Y2hlcyhlLCB3LmdyZXAodCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiAxID09PSBlLm5vZGVUeXBlO1xuICAgICAgICB9KSk7XG4gICAgfSwgdy5mbi5leHRlbmQoeyBmaW5kOiBmdW5jdGlvbiBmaW5kKGUpIHtcbiAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgciA9IHRoaXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGkgPSB0aGlzO2lmIChcInN0cmluZ1wiICE9IHR5cGVvZiBlKSByZXR1cm4gdGhpcy5wdXNoU3RhY2sodyhlKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodCA9IDA7IHQgPCByOyB0KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcuY29udGFpbnMoaVt0XSwgdGhpcykpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7Zm9yIChuID0gdGhpcy5wdXNoU3RhY2soW10pLCB0ID0gMDsgdCA8IHI7IHQrKykge1xuICAgICAgICAgICAgICAgIHcuZmluZChlLCBpW3RdLCBuKTtcbiAgICAgICAgICAgIH1yZXR1cm4gciA+IDEgPyB3LnVuaXF1ZVNvcnQobikgOiBuO1xuICAgICAgICB9LCBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soaih0aGlzLCBlIHx8IFtdLCAhMSkpO1xuICAgICAgICB9LCBub3Q6IGZ1bmN0aW9uIG5vdChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soaih0aGlzLCBlIHx8IFtdLCAhMCkpO1xuICAgICAgICB9LCBpczogZnVuY3Rpb24gaXMoZSkge1xuICAgICAgICAgICAgcmV0dXJuICEhaih0aGlzLCBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIEQudGVzdChlKSA/IHcoZSkgOiBlIHx8IFtdLCAhMSkubGVuZ3RoO1xuICAgICAgICB9IH0pO3ZhciBxLFxuICAgICAgICBMID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC87KHcuZm4uaW5pdCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7XG4gICAgICAgIHZhciBpLCBvO2lmICghZSkgcmV0dXJuIHRoaXM7aWYgKG4gPSBuIHx8IHEsIFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHtcbiAgICAgICAgICAgIGlmICghKGkgPSBcIjxcIiA9PT0gZVswXSAmJiBcIj5cIiA9PT0gZVtlLmxlbmd0aCAtIDFdICYmIGUubGVuZ3RoID49IDMgPyBbbnVsbCwgZSwgbnVsbF0gOiBMLmV4ZWMoZSkpIHx8ICFpWzFdICYmIHQpIHJldHVybiAhdCB8fCB0LmpxdWVyeSA/ICh0IHx8IG4pLmZpbmQoZSkgOiB0aGlzLmNvbnN0cnVjdG9yKHQpLmZpbmQoZSk7aWYgKGlbMV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodCA9IHQgaW5zdGFuY2VvZiB3ID8gdFswXSA6IHQsIHcubWVyZ2UodGhpcywgdy5wYXJzZUhUTUwoaVsxXSwgdCAmJiB0Lm5vZGVUeXBlID8gdC5vd25lckRvY3VtZW50IHx8IHQgOiByLCAhMCkpLCBBLnRlc3QoaVsxXSkgJiYgdy5pc1BsYWluT2JqZWN0KHQpKSBmb3IgKGkgaW4gdCkge1xuICAgICAgICAgICAgICAgICAgICBnKHRoaXNbaV0pID8gdGhpc1tpXSh0W2ldKSA6IHRoaXMuYXR0cihpLCB0W2ldKTtcbiAgICAgICAgICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9cmV0dXJuIChvID0gci5nZXRFbGVtZW50QnlJZChpWzJdKSkgJiYgKHRoaXNbMF0gPSBvLCB0aGlzLmxlbmd0aCA9IDEpLCB0aGlzO1xuICAgICAgICB9cmV0dXJuIGUubm9kZVR5cGUgPyAodGhpc1swXSA9IGUsIHRoaXMubGVuZ3RoID0gMSwgdGhpcykgOiBnKGUpID8gdm9pZCAwICE9PSBuLnJlYWR5ID8gbi5yZWFkeShlKSA6IGUodykgOiB3Lm1ha2VBcnJheShlLCB0aGlzKTtcbiAgICB9KS5wcm90b3R5cGUgPSB3LmZuLCBxID0gdyhyKTt2YXIgSCA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuICAgICAgICBPID0geyBjaGlsZHJlbjogITAsIGNvbnRlbnRzOiAhMCwgbmV4dDogITAsIHByZXY6ICEwIH07dy5mbi5leHRlbmQoeyBoYXM6IGZ1bmN0aW9uIGhhcyhlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IHcoZSwgdGhpcyksXG4gICAgICAgICAgICAgICAgbiA9IHQubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCBuOyBlKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcuY29udGFpbnModGhpcywgdFtlXSkpIHJldHVybiAhMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgY2xvc2VzdDogZnVuY3Rpb24gY2xvc2VzdChlLCB0KSB7XG4gICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICByID0gMCxcbiAgICAgICAgICAgICAgICBpID0gdGhpcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbyA9IFtdLFxuICAgICAgICAgICAgICAgIGEgPSBcInN0cmluZ1wiICE9IHR5cGVvZiBlICYmIHcoZSk7aWYgKCFELnRlc3QoZSkpIGZvciAoOyByIDwgaTsgcisrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChuID0gdGhpc1tyXTsgbiAmJiBuICE9PSB0OyBuID0gbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuLm5vZGVUeXBlIDwgMTEgJiYgKGEgPyBhLmluZGV4KG4pID4gLTEgOiAxID09PSBuLm5vZGVUeXBlICYmIHcuZmluZC5tYXRjaGVzU2VsZWN0b3IobiwgZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvLnB1c2gobik7YnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9cmV0dXJuIHRoaXMucHVzaFN0YWNrKG8ubGVuZ3RoID4gMSA/IHcudW5pcXVlU29ydChvKSA6IG8pO1xuICAgICAgICB9LCBpbmRleDogZnVuY3Rpb24gaW5kZXgoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUgPyBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gdS5jYWxsKHcoZSksIHRoaXNbMF0pIDogdS5jYWxsKHRoaXMsIGUuanF1ZXJ5ID8gZVswXSA6IGUpIDogdGhpc1swXSAmJiB0aGlzWzBdLnBhcmVudE5vZGUgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuICAgICAgICB9LCBhZGQ6IGZ1bmN0aW9uIGFkZChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2sody51bmlxdWVTb3J0KHcubWVyZ2UodGhpcy5nZXQoKSwgdyhlLCB0KSkpKTtcbiAgICAgICAgfSwgYWRkQmFjazogZnVuY3Rpb24gYWRkQmFjayhlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQobnVsbCA9PSBlID8gdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSk7XG4gICAgICAgIH0gfSk7ZnVuY3Rpb24gUChlLCB0KSB7XG4gICAgICAgIHdoaWxlICgoZSA9IGVbdF0pICYmIDEgIT09IGUubm9kZVR5cGUpIHt9cmV0dXJuIGU7XG4gICAgfXcuZWFjaCh7IHBhcmVudDogZnVuY3Rpb24gcGFyZW50KGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZS5wYXJlbnROb2RlO3JldHVybiB0ICYmIDExICE9PSB0Lm5vZGVUeXBlID8gdCA6IG51bGw7XG4gICAgICAgIH0sIHBhcmVudHM6IGZ1bmN0aW9uIHBhcmVudHMoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGsoZSwgXCJwYXJlbnROb2RlXCIpO1xuICAgICAgICB9LCBwYXJlbnRzVW50aWw6IGZ1bmN0aW9uIHBhcmVudHNVbnRpbChlLCB0LCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gayhlLCBcInBhcmVudE5vZGVcIiwgbik7XG4gICAgICAgIH0sIG5leHQ6IGZ1bmN0aW9uIG5leHQoZSkge1xuICAgICAgICAgICAgcmV0dXJuIFAoZSwgXCJuZXh0U2libGluZ1wiKTtcbiAgICAgICAgfSwgcHJldjogZnVuY3Rpb24gcHJldihlKSB7XG4gICAgICAgICAgICByZXR1cm4gUChlLCBcInByZXZpb3VzU2libGluZ1wiKTtcbiAgICAgICAgfSwgbmV4dEFsbDogZnVuY3Rpb24gbmV4dEFsbChlKSB7XG4gICAgICAgICAgICByZXR1cm4gayhlLCBcIm5leHRTaWJsaW5nXCIpO1xuICAgICAgICB9LCBwcmV2QWxsOiBmdW5jdGlvbiBwcmV2QWxsKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBrKGUsIFwicHJldmlvdXNTaWJsaW5nXCIpO1xuICAgICAgICB9LCBuZXh0VW50aWw6IGZ1bmN0aW9uIG5leHRVbnRpbChlLCB0LCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gayhlLCBcIm5leHRTaWJsaW5nXCIsIG4pO1xuICAgICAgICB9LCBwcmV2VW50aWw6IGZ1bmN0aW9uIHByZXZVbnRpbChlLCB0LCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gayhlLCBcInByZXZpb3VzU2libGluZ1wiLCBuKTtcbiAgICAgICAgfSwgc2libGluZ3M6IGZ1bmN0aW9uIHNpYmxpbmdzKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBTKChlLnBhcmVudE5vZGUgfHwge30pLmZpcnN0Q2hpbGQsIGUpO1xuICAgICAgICB9LCBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oZSkge1xuICAgICAgICAgICAgcmV0dXJuIFMoZS5maXJzdENoaWxkKTtcbiAgICAgICAgfSwgY29udGVudHM6IGZ1bmN0aW9uIGNvbnRlbnRzKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBOKGUsIFwiaWZyYW1lXCIpID8gZS5jb250ZW50RG9jdW1lbnQgOiAoTihlLCBcInRlbXBsYXRlXCIpICYmIChlID0gZS5jb250ZW50IHx8IGUpLCB3Lm1lcmdlKFtdLCBlLmNoaWxkTm9kZXMpKTtcbiAgICAgICAgfSB9LCBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB3LmZuW2VdID0gZnVuY3Rpb24gKG4sIHIpIHtcbiAgICAgICAgICAgIHZhciBpID0gdy5tYXAodGhpcywgdCwgbik7cmV0dXJuIFwiVW50aWxcIiAhPT0gZS5zbGljZSgtNSkgJiYgKHIgPSBuKSwgciAmJiBcInN0cmluZ1wiID09IHR5cGVvZiByICYmIChpID0gdy5maWx0ZXIociwgaSkpLCB0aGlzLmxlbmd0aCA+IDEgJiYgKE9bZV0gfHwgdy51bmlxdWVTb3J0KGkpLCBILnRlc3QoZSkgJiYgaS5yZXZlcnNlKCkpLCB0aGlzLnB1c2hTdGFjayhpKTtcbiAgICAgICAgfTtcbiAgICB9KTt2YXIgTSA9IC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBSKGUpIHtcbiAgICAgICAgdmFyIHQgPSB7fTtyZXR1cm4gdy5lYWNoKGUubWF0Y2goTSkgfHwgW10sIGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgICAgICB0W25dID0gITA7XG4gICAgICAgIH0pLCB0O1xuICAgIH13LkNhbGxiYWNrcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUgPSBcInN0cmluZ1wiID09IHR5cGVvZiBlID8gUihlKSA6IHcuZXh0ZW5kKHt9LCBlKTt2YXIgdCxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG8gPSBbXSxcbiAgICAgICAgICAgIGEgPSBbXSxcbiAgICAgICAgICAgIHMgPSAtMSxcbiAgICAgICAgICAgIHUgPSBmdW5jdGlvbiB1KCkge1xuICAgICAgICAgICAgZm9yIChpID0gaSB8fCBlLm9uY2UsIHIgPSB0ID0gITA7IGEubGVuZ3RoOyBzID0gLTEpIHtcbiAgICAgICAgICAgICAgICBuID0gYS5zaGlmdCgpO3doaWxlICgrK3MgPCBvLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAhMSA9PT0gb1tzXS5hcHBseShuWzBdLCBuWzFdKSAmJiBlLnN0b3BPbkZhbHNlICYmIChzID0gby5sZW5ndGgsIG4gPSAhMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWUubWVtb3J5IHx8IChuID0gITEpLCB0ID0gITEsIGkgJiYgKG8gPSBuID8gW10gOiBcIlwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIGwgPSB7IGFkZDogZnVuY3Rpb24gYWRkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvICYmIChuICYmICF0ICYmIChzID0gby5sZW5ndGggLSAxLCBhLnB1c2gobikpLCBmdW5jdGlvbiB0KG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdy5lYWNoKG4sIGZ1bmN0aW9uIChuLCByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnKHIpID8gZS51bmlxdWUgJiYgbC5oYXMocikgfHwgby5wdXNoKHIpIDogciAmJiByLmxlbmd0aCAmJiBcInN0cmluZ1wiICE9PSB4KHIpICYmIHQocik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0oYXJndW1lbnRzKSwgbiAmJiAhdCAmJiB1KCkpLCB0aGlzO1xuICAgICAgICAgICAgfSwgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHcuZWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuO3doaWxlICgobiA9IHcuaW5BcnJheSh0LCBvLCBuKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgby5zcGxpY2UobiwgMSksIG4gPD0gcyAmJiBzLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgdGhpcztcbiAgICAgICAgICAgIH0sIGhhczogZnVuY3Rpb24gaGFzKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZSA/IHcuaW5BcnJheShlLCBvKSA+IC0xIDogby5sZW5ndGggPiAwO1xuICAgICAgICAgICAgfSwgZW1wdHk6IGZ1bmN0aW9uIGVtcHR5KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvICYmIChvID0gW10pLCB0aGlzO1xuICAgICAgICAgICAgfSwgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA9IGEgPSBbXSwgbyA9IG4gPSBcIlwiLCB0aGlzO1xuICAgICAgICAgICAgfSwgZGlzYWJsZWQ6IGZ1bmN0aW9uIGRpc2FibGVkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhbztcbiAgICAgICAgICAgIH0sIGxvY2s6IGZ1bmN0aW9uIGxvY2soKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPSBhID0gW10sIG4gfHwgdCB8fCAobyA9IG4gPSBcIlwiKSwgdGhpcztcbiAgICAgICAgICAgIH0sIGxvY2tlZDogZnVuY3Rpb24gbG9ja2VkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWk7XG4gICAgICAgICAgICB9LCBmaXJlV2l0aDogZnVuY3Rpb24gZmlyZVdpdGgoZSwgbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpIHx8IChuID0gW2UsIChuID0gbiB8fCBbXSkuc2xpY2UgPyBuLnNsaWNlKCkgOiBuXSwgYS5wdXNoKG4pLCB0IHx8IHUoKSksIHRoaXM7XG4gICAgICAgICAgICB9LCBmaXJlOiBmdW5jdGlvbiBmaXJlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsLmZpcmVXaXRoKHRoaXMsIGFyZ3VtZW50cyksIHRoaXM7XG4gICAgICAgICAgICB9LCBmaXJlZDogZnVuY3Rpb24gZmlyZWQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhcjtcbiAgICAgICAgICAgIH0gfTtyZXR1cm4gbDtcbiAgICB9O2Z1bmN0aW9uIEkoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9ZnVuY3Rpb24gVyhlKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgfWZ1bmN0aW9uICQoZSwgdCwgbiwgcikge1xuICAgICAgICB2YXIgaTt0cnkge1xuICAgICAgICAgICAgZSAmJiBnKGkgPSBlLnByb21pc2UpID8gaS5jYWxsKGUpLmRvbmUodCkuZmFpbChuKSA6IGUgJiYgZyhpID0gZS50aGVuKSA/IGkuY2FsbChlLCB0LCBuKSA6IHQuYXBwbHkodm9pZCAwLCBbZV0uc2xpY2UocikpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBuLmFwcGx5KHZvaWQgMCwgW2VdKTtcbiAgICAgICAgfVxuICAgIH13LmV4dGVuZCh7IERlZmVycmVkOiBmdW5jdGlvbiBEZWZlcnJlZCh0KSB7XG4gICAgICAgICAgICB2YXIgbiA9IFtbXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCB3LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwgdy5DYWxsYmFja3MoXCJtZW1vcnlcIiksIDJdLCBbXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCB3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCB3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCAwLCBcInJlc29sdmVkXCJdLCBbXCJyZWplY3RcIiwgXCJmYWlsXCIsIHcuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIHcuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIDEsIFwicmVqZWN0ZWRcIl1dLFxuICAgICAgICAgICAgICAgIHIgPSBcInBlbmRpbmdcIixcbiAgICAgICAgICAgICAgICBpID0geyBzdGF0ZTogZnVuY3Rpb24gc3RhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgICAgIH0sIGFsd2F5czogZnVuY3Rpb24gYWx3YXlzKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLCB0aGlzO1xuICAgICAgICAgICAgICAgIH0sIFwiY2F0Y2hcIjogZnVuY3Rpb24gX2NhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkudGhlbihudWxsLCBlKTtcbiAgICAgICAgICAgICAgICB9LCBwaXBlOiBmdW5jdGlvbiBwaXBlKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cztyZXR1cm4gdy5EZWZlcnJlZChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdy5lYWNoKG4sIGZ1bmN0aW9uIChuLCByKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBnKGVbcls0XV0pICYmIGVbcls0XV07b1tyWzFdXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gaSAmJiBpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7ZSAmJiBnKGUucHJvbWlzZSkgPyBlLnByb21pc2UoKS5wcm9ncmVzcyh0Lm5vdGlmeSkuZG9uZSh0LnJlc29sdmUpLmZhaWwodC5yZWplY3QpIDogdFtyWzBdICsgXCJXaXRoXCJdKHRoaXMsIGkgPyBbZV0gOiBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgICAgICAgICAgICAgfSwgdGhlbjogZnVuY3Rpb24gdGhlbih0LCByLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gMDtmdW5jdGlvbiBhKHQsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gZnVuY3Rpb24gbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIGw7aWYgKCEodCA8IG8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGUgPSByLmFwcGx5KHMsIHUpKSA9PT0gbi5wcm9taXNlKCkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7bCA9IGUgJiYgKFwib2JqZWN0XCIgPT0gKHR5cGVvZiBlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZSkpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkgJiYgZS50aGVuLCBnKGwpID8gaSA/IGwuY2FsbChlLCBhKG8sIG4sIEksIGkpLCBhKG8sIG4sIFcsIGkpKSA6IChvKyssIGwuY2FsbChlLCBhKG8sIG4sIEksIGkpLCBhKG8sIG4sIFcsIGkpLCBhKG8sIG4sIEksIG4ubm90aWZ5V2l0aCkpKSA6IChyICE9PSBJICYmIChzID0gdm9pZCAwLCB1ID0gW2VdKSwgKGkgfHwgbi5yZXNvbHZlV2l0aCkocywgdSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGkgPyBsIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgJiYgdy5EZWZlcnJlZC5leGNlcHRpb25Ib29rKGUsIGMuc3RhY2tUcmFjZSksIHQgKyAxID49IG8gJiYgKHIgIT09IFcgJiYgKHMgPSB2b2lkIDAsIHUgPSBbZV0pLCBuLnJlamVjdFdpdGgocywgdSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTt0ID8gYygpIDogKHcuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICYmIChjLnN0YWNrVHJhY2UgPSB3LkRlZmVycmVkLmdldFN0YWNrSG9vaygpKSwgZS5zZXRUaW1lb3V0KGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1yZXR1cm4gdy5EZWZlcnJlZChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgblswXVszXS5hZGQoYSgwLCBlLCBnKGkpID8gaSA6IEksIGUubm90aWZ5V2l0aCkpLCBuWzFdWzNdLmFkZChhKDAsIGUsIGcodCkgPyB0IDogSSkpLCBuWzJdWzNdLmFkZChhKDAsIGUsIGcocikgPyByIDogVykpO1xuICAgICAgICAgICAgICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgICAgICAgICAgICAgfSwgcHJvbWlzZTogZnVuY3Rpb24gcHJvbWlzZShlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IGUgPyB3LmV4dGVuZChlLCBpKSA6IGk7XG4gICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgIG8gPSB7fTtyZXR1cm4gdy5lYWNoKG4sIGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0WzJdLFxuICAgICAgICAgICAgICAgICAgICBzID0gdFs1XTtpW3RbMV1dID0gYS5hZGQsIHMgJiYgYS5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByID0gcztcbiAgICAgICAgICAgICAgICB9LCBuWzMgLSBlXVsyXS5kaXNhYmxlLCBuWzMgLSBlXVszXS5kaXNhYmxlLCBuWzBdWzJdLmxvY2ssIG5bMF1bM10ubG9jayksIGEuYWRkKHRbM10uZmlyZSksIG9bdFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvW3RbMF0gKyBcIldpdGhcIl0odGhpcyA9PT0gbyA/IHZvaWQgMCA6IHRoaXMsIGFyZ3VtZW50cyksIHRoaXM7XG4gICAgICAgICAgICAgICAgfSwgb1t0WzBdICsgXCJXaXRoXCJdID0gYS5maXJlV2l0aDtcbiAgICAgICAgICAgIH0pLCBpLnByb21pc2UobyksIHQgJiYgdC5jYWxsKG8sIG8pLCBvO1xuICAgICAgICB9LCB3aGVuOiBmdW5jdGlvbiB3aGVuKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBuID0gdCxcbiAgICAgICAgICAgICAgICByID0gQXJyYXkobiksXG4gICAgICAgICAgICAgICAgaSA9IG8uY2FsbChhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIGEgPSB3LkRlZmVycmVkKCksXG4gICAgICAgICAgICAgICAgcyA9IGZ1bmN0aW9uIHMoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICByW2VdID0gdGhpcywgaVtlXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gby5jYWxsKGFyZ3VtZW50cykgOiBuLCAtLXQgfHwgYS5yZXNvbHZlV2l0aChyLCBpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtpZiAodCA8PSAxICYmICgkKGUsIGEuZG9uZShzKG4pKS5yZXNvbHZlLCBhLnJlamVjdCwgIXQpLCBcInBlbmRpbmdcIiA9PT0gYS5zdGF0ZSgpIHx8IGcoaVtuXSAmJiBpW25dLnRoZW4pKSkgcmV0dXJuIGEudGhlbigpO3doaWxlIChuLS0pIHtcbiAgICAgICAgICAgICAgICAkKGlbbl0sIHMobiksIGEucmVqZWN0KTtcbiAgICAgICAgICAgIH1yZXR1cm4gYS5wcm9taXNlKCk7XG4gICAgICAgIH0gfSk7dmFyIEIgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLzt3LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiAodCwgbikge1xuICAgICAgICBlLmNvbnNvbGUgJiYgZS5jb25zb2xlLndhcm4gJiYgdCAmJiBCLnRlc3QodC5uYW1lKSAmJiBlLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgdC5tZXNzYWdlLCB0LnN0YWNrLCBuKTtcbiAgICB9LCB3LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgZS5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm93IHQ7XG4gICAgICAgIH0pO1xuICAgIH07dmFyIEYgPSB3LkRlZmVycmVkKCk7dy5mbi5yZWFkeSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBGLnRoZW4oZSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdy5yZWFkeUV4Y2VwdGlvbihlKTtcbiAgICAgICAgfSksIHRoaXM7XG4gICAgfSwgdy5leHRlbmQoeyBpc1JlYWR5OiAhMSwgcmVhZHlXYWl0OiAxLCByZWFkeTogZnVuY3Rpb24gcmVhZHkoZSkge1xuICAgICAgICAgICAgKCEwID09PSBlID8gLS13LnJlYWR5V2FpdCA6IHcuaXNSZWFkeSkgfHwgKHcuaXNSZWFkeSA9ICEwLCAhMCAhPT0gZSAmJiAtLXcucmVhZHlXYWl0ID4gMCB8fCBGLnJlc29sdmVXaXRoKHIsIFt3XSkpO1xuICAgICAgICB9IH0pLCB3LnJlYWR5LnRoZW4gPSBGLnRoZW47ZnVuY3Rpb24gXygpIHtcbiAgICAgICAgci5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBfKSwgZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBfKSwgdy5yZWFkeSgpO1xuICAgIH1cImNvbXBsZXRlXCIgPT09IHIucmVhZHlTdGF0ZSB8fCBcImxvYWRpbmdcIiAhPT0gci5yZWFkeVN0YXRlICYmICFyLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCA/IGUuc2V0VGltZW91dCh3LnJlYWR5KSA6IChyLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIF8pLCBlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIF8pKTt2YXIgeiA9IGZ1bmN0aW9uIHooZSwgdCwgbiwgciwgaSwgbywgYSkge1xuICAgICAgICB2YXIgcyA9IDAsXG4gICAgICAgICAgICB1ID0gZS5sZW5ndGgsXG4gICAgICAgICAgICBsID0gbnVsbCA9PSBuO2lmIChcIm9iamVjdFwiID09PSB4KG4pKSB7XG4gICAgICAgICAgICBpID0gITA7Zm9yIChzIGluIG4pIHtcbiAgICAgICAgICAgICAgICB6KGUsIHQsIHMsIG5bc10sICEwLCBvLCBhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2b2lkIDAgIT09IHIgJiYgKGkgPSAhMCwgZyhyKSB8fCAoYSA9ICEwKSwgbCAmJiAoYSA/ICh0LmNhbGwoZSwgciksIHQgPSBudWxsKSA6IChsID0gdCwgdCA9IGZ1bmN0aW9uIHQoZSwgX3QyLCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gbC5jYWxsKHcoZSksIG4pO1xuICAgICAgICB9KSksIHQpKSBmb3IgKDsgcyA8IHU7IHMrKykge1xuICAgICAgICAgICAgdChlW3NdLCBuLCBhID8gciA6IHIuY2FsbChlW3NdLCBzLCB0KGVbc10sIG4pKSk7XG4gICAgICAgIH1yZXR1cm4gaSA/IGUgOiBsID8gdC5jYWxsKGUpIDogdSA/IHQoZVswXSwgbikgOiBvO1xuICAgIH0sXG4gICAgICAgIFggPSAvXi1tcy0vLFxuICAgICAgICBVID0gLy0oW2Etel0pL2c7ZnVuY3Rpb24gVihlLCB0KSB7XG4gICAgICAgIHJldHVybiB0LnRvVXBwZXJDYXNlKCk7XG4gICAgfWZ1bmN0aW9uIEcoZSkge1xuICAgICAgICByZXR1cm4gZS5yZXBsYWNlKFgsIFwibXMtXCIpLnJlcGxhY2UoVSwgVik7XG4gICAgfXZhciBZID0gZnVuY3Rpb24gWShlKSB7XG4gICAgICAgIHJldHVybiAxID09PSBlLm5vZGVUeXBlIHx8IDkgPT09IGUubm9kZVR5cGUgfHwgIStlLm5vZGVUeXBlO1xuICAgIH07ZnVuY3Rpb24gUSgpIHtcbiAgICAgICAgdGhpcy5leHBhbmRvID0gdy5leHBhbmRvICsgUS51aWQrKztcbiAgICB9US51aWQgPSAxLCBRLnByb3RvdHlwZSA9IHsgY2FjaGU6IGZ1bmN0aW9uIGNhY2hlKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZVt0aGlzLmV4cGFuZG9dO3JldHVybiB0IHx8ICh0ID0ge30sIFkoZSkgJiYgKGUubm9kZVR5cGUgPyBlW3RoaXMuZXhwYW5kb10gPSB0IDogT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHRoaXMuZXhwYW5kbywgeyB2YWx1ZTogdCwgY29uZmlndXJhYmxlOiAhMCB9KSkpLCB0O1xuICAgICAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldChlLCB0LCBuKSB7XG4gICAgICAgICAgICB2YXIgcixcbiAgICAgICAgICAgICAgICBpID0gdGhpcy5jYWNoZShlKTtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCkgaVtHKHQpXSA9IG47ZWxzZSBmb3IgKHIgaW4gdCkge1xuICAgICAgICAgICAgICAgIGlbRyhyKV0gPSB0W3JdO1xuICAgICAgICAgICAgfXJldHVybiBpO1xuICAgICAgICB9LCBnZXQ6IGZ1bmN0aW9uIGdldChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSB0ID8gdGhpcy5jYWNoZShlKSA6IGVbdGhpcy5leHBhbmRvXSAmJiBlW3RoaXMuZXhwYW5kb11bRyh0KV07XG4gICAgICAgIH0sIGFjY2VzczogZnVuY3Rpb24gYWNjZXNzKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHQgfHwgdCAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB0ICYmIHZvaWQgMCA9PT0gbiA/IHRoaXMuZ2V0KGUsIHQpIDogKHRoaXMuc2V0KGUsIHQsIG4pLCB2b2lkIDAgIT09IG4gPyBuIDogdCk7XG4gICAgICAgIH0sIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgIHIgPSBlW3RoaXMuZXhwYW5kb107aWYgKHZvaWQgMCAhPT0gcikge1xuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbiA9ICh0ID0gQXJyYXkuaXNBcnJheSh0KSA/IHQubWFwKEcpIDogKHQgPSBHKHQpKSBpbiByID8gW3RdIDogdC5tYXRjaChNKSB8fCBbXSkubGVuZ3RoO3doaWxlIChuLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByW3Rbbl1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSh2b2lkIDAgPT09IHQgfHwgdy5pc0VtcHR5T2JqZWN0KHIpKSAmJiAoZS5ub2RlVHlwZSA/IGVbdGhpcy5leHBhbmRvXSA9IHZvaWQgMCA6IGRlbGV0ZSBlW3RoaXMuZXhwYW5kb10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBoYXNEYXRhOiBmdW5jdGlvbiBoYXNEYXRhKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAgIT09IHQgJiYgIXcuaXNFbXB0eU9iamVjdCh0KTtcbiAgICAgICAgfSB9O3ZhciBKID0gbmV3IFEoKSxcbiAgICAgICAgSyA9IG5ldyBRKCksXG4gICAgICAgIFogPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG4gICAgICAgIGVlID0gL1tBLVpdL2c7ZnVuY3Rpb24gdGUoZSkge1xuICAgICAgICByZXR1cm4gXCJ0cnVlXCIgPT09IGUgfHwgXCJmYWxzZVwiICE9PSBlICYmIChcIm51bGxcIiA9PT0gZSA/IG51bGwgOiBlID09PSArZSArIFwiXCIgPyArZSA6IFoudGVzdChlKSA/IEpTT04ucGFyc2UoZSkgOiBlKTtcbiAgICB9ZnVuY3Rpb24gbmUoZSwgdCwgbikge1xuICAgICAgICB2YXIgcjtpZiAodm9pZCAwID09PSBuICYmIDEgPT09IGUubm9kZVR5cGUpIGlmIChyID0gXCJkYXRhLVwiICsgdC5yZXBsYWNlKGVlLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpLCBcInN0cmluZ1wiID09IHR5cGVvZiAobiA9IGUuZ2V0QXR0cmlidXRlKHIpKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBuID0gdGUobik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fUsuc2V0KGUsIHQsIG4pO1xuICAgICAgICB9IGVsc2UgbiA9IHZvaWQgMDtyZXR1cm4gbjtcbiAgICB9dy5leHRlbmQoeyBoYXNEYXRhOiBmdW5jdGlvbiBoYXNEYXRhKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBLLmhhc0RhdGEoZSkgfHwgSi5oYXNEYXRhKGUpO1xuICAgICAgICB9LCBkYXRhOiBmdW5jdGlvbiBkYXRhKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiBLLmFjY2VzcyhlLCB0LCBuKTtcbiAgICAgICAgfSwgcmVtb3ZlRGF0YTogZnVuY3Rpb24gcmVtb3ZlRGF0YShlLCB0KSB7XG4gICAgICAgICAgICBLLnJlbW92ZShlLCB0KTtcbiAgICAgICAgfSwgX2RhdGE6IGZ1bmN0aW9uIF9kYXRhKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiBKLmFjY2VzcyhlLCB0LCBuKTtcbiAgICAgICAgfSwgX3JlbW92ZURhdGE6IGZ1bmN0aW9uIF9yZW1vdmVEYXRhKGUsIHQpIHtcbiAgICAgICAgICAgIEoucmVtb3ZlKGUsIHQpO1xuICAgICAgICB9IH0pLCB3LmZuLmV4dGVuZCh7IGRhdGE6IGZ1bmN0aW9uIGRhdGEoZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG8gPSB0aGlzWzBdLFxuICAgICAgICAgICAgICAgIGEgPSBvICYmIG8uYXR0cmlidXRlcztpZiAodm9pZCAwID09PSBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoICYmIChpID0gSy5nZXQobyksIDEgPT09IG8ubm9kZVR5cGUgJiYgIUouZ2V0KG8sIFwiaGFzRGF0YUF0dHJzXCIpKSkge1xuICAgICAgICAgICAgICAgICAgICBuID0gYS5sZW5ndGg7d2hpbGUgKG4tLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYVtuXSAmJiAwID09PSAociA9IGFbbl0ubmFtZSkuaW5kZXhPZihcImRhdGEtXCIpICYmIChyID0gRyhyLnNsaWNlKDUpKSwgbmUobywgciwgaVtyXSkpO1xuICAgICAgICAgICAgICAgICAgICB9Si5zZXQobywgXCJoYXNEYXRhQXR0cnNcIiwgITApO1xuICAgICAgICAgICAgICAgIH1yZXR1cm4gaTtcbiAgICAgICAgICAgIH1yZXR1cm4gXCJvYmplY3RcIiA9PSAodHlwZW9mIGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihlKSkgPyB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIEsuc2V0KHRoaXMsIGUpO1xuICAgICAgICAgICAgfSkgOiB6KHRoaXMsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG47aWYgKG8gJiYgdm9pZCAwID09PSB0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IChuID0gSy5nZXQobywgZSkpKSByZXR1cm4gbjtpZiAodm9pZCAwICE9PSAobiA9IG5lKG8sIGUpKSkgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIEsuc2V0KHRoaXMsIGUsIHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgbnVsbCwgdCwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsICEwKTtcbiAgICAgICAgfSwgcmVtb3ZlRGF0YTogZnVuY3Rpb24gcmVtb3ZlRGF0YShlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBLLnJlbW92ZSh0aGlzLCBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IH0pLCB3LmV4dGVuZCh7IHF1ZXVlOiBmdW5jdGlvbiBxdWV1ZShlLCB0LCBuKSB7XG4gICAgICAgICAgICB2YXIgcjtpZiAoZSkgcmV0dXJuIHQgPSAodCB8fCBcImZ4XCIpICsgXCJxdWV1ZVwiLCByID0gSi5nZXQoZSwgdCksIG4gJiYgKCFyIHx8IEFycmF5LmlzQXJyYXkobikgPyByID0gSi5hY2Nlc3MoZSwgdCwgdy5tYWtlQXJyYXkobikpIDogci5wdXNoKG4pKSwgciB8fCBbXTtcbiAgICAgICAgfSwgZGVxdWV1ZTogZnVuY3Rpb24gZGVxdWV1ZShlLCB0KSB7XG4gICAgICAgICAgICB0ID0gdCB8fCBcImZ4XCI7dmFyIG4gPSB3LnF1ZXVlKGUsIHQpLFxuICAgICAgICAgICAgICAgIHIgPSBuLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpID0gbi5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIG8gPSB3Ll9xdWV1ZUhvb2tzKGUsIHQpLFxuICAgICAgICAgICAgICAgIGEgPSBmdW5jdGlvbiBhKCkge1xuICAgICAgICAgICAgICAgIHcuZGVxdWV1ZShlLCB0KTtcbiAgICAgICAgICAgIH07XCJpbnByb2dyZXNzXCIgPT09IGkgJiYgKGkgPSBuLnNoaWZ0KCksIHItLSksIGkgJiYgKFwiZnhcIiA9PT0gdCAmJiBuLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLCBkZWxldGUgby5zdG9wLCBpLmNhbGwoZSwgYSwgbykpLCAhciAmJiBvICYmIG8uZW1wdHkuZmlyZSgpO1xuICAgICAgICB9LCBfcXVldWVIb29rczogZnVuY3Rpb24gX3F1ZXVlSG9va3MoZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4gPSB0ICsgXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIEouZ2V0KGUsIG4pIHx8IEouYWNjZXNzKGUsIG4sIHsgZW1wdHk6IHcuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgSi5yZW1vdmUoZSwgW3QgKyBcInF1ZXVlXCIsIG5dKTtcbiAgICAgICAgICAgICAgICB9KSB9KTtcbiAgICAgICAgfSB9KSwgdy5mbi5leHRlbmQoeyBxdWV1ZTogZnVuY3Rpb24gcXVldWUoZSwgdCkge1xuICAgICAgICAgICAgdmFyIG4gPSAyO3JldHVybiBcInN0cmluZ1wiICE9IHR5cGVvZiBlICYmICh0ID0gZSwgZSA9IFwiZnhcIiwgbi0tKSwgYXJndW1lbnRzLmxlbmd0aCA8IG4gPyB3LnF1ZXVlKHRoaXNbMF0sIGUpIDogdm9pZCAwID09PSB0ID8gdGhpcyA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSB3LnF1ZXVlKHRoaXMsIGUsIHQpO3cuX3F1ZXVlSG9va3ModGhpcywgZSksIFwiZnhcIiA9PT0gZSAmJiBcImlucHJvZ3Jlc3NcIiAhPT0gblswXSAmJiB3LmRlcXVldWUodGhpcywgZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZGVxdWV1ZTogZnVuY3Rpb24gZGVxdWV1ZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB3LmRlcXVldWUodGhpcywgZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgY2xlYXJRdWV1ZTogZnVuY3Rpb24gY2xlYXJRdWV1ZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZShlIHx8IFwiZnhcIiwgW10pO1xuICAgICAgICB9LCBwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgIHIgPSAxLFxuICAgICAgICAgICAgICAgIGkgPSB3LkRlZmVycmVkKCksXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYSA9IHRoaXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHMgPSBmdW5jdGlvbiBzKCkge1xuICAgICAgICAgICAgICAgIC0tciB8fCBpLnJlc29sdmVXaXRoKG8sIFtvXSk7XG4gICAgICAgICAgICB9O1wic3RyaW5nXCIgIT0gdHlwZW9mIGUgJiYgKHQgPSBlLCBlID0gdm9pZCAwKSwgZSA9IGUgfHwgXCJmeFwiO3doaWxlIChhLS0pIHtcbiAgICAgICAgICAgICAgICAobiA9IEouZ2V0KG9bYV0sIGUgKyBcInF1ZXVlSG9va3NcIikpICYmIG4uZW1wdHkgJiYgKHIrKywgbi5lbXB0eS5hZGQocykpO1xuICAgICAgICAgICAgfXJldHVybiBzKCksIGkucHJvbWlzZSh0KTtcbiAgICAgICAgfSB9KTt2YXIgcmUgPSAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsXG4gICAgICAgIGllID0gbmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIgKyByZSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIpLFxuICAgICAgICBvZSA9IFtcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiXSxcbiAgICAgICAgYWUgPSBmdW5jdGlvbiBhZShlLCB0KSB7XG4gICAgICAgIHJldHVybiBcIm5vbmVcIiA9PT0gKGUgPSB0IHx8IGUpLnN0eWxlLmRpc3BsYXkgfHwgXCJcIiA9PT0gZS5zdHlsZS5kaXNwbGF5ICYmIHcuY29udGFpbnMoZS5vd25lckRvY3VtZW50LCBlKSAmJiBcIm5vbmVcIiA9PT0gdy5jc3MoZSwgXCJkaXNwbGF5XCIpO1xuICAgIH0sXG4gICAgICAgIHNlID0gZnVuY3Rpb24gc2UoZSwgdCwgbiwgcikge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhID0ge307Zm9yIChvIGluIHQpIHtcbiAgICAgICAgICAgIGFbb10gPSBlLnN0eWxlW29dLCBlLnN0eWxlW29dID0gdFtvXTtcbiAgICAgICAgfWkgPSBuLmFwcGx5KGUsIHIgfHwgW10pO2ZvciAobyBpbiB0KSB7XG4gICAgICAgICAgICBlLnN0eWxlW29dID0gYVtvXTtcbiAgICAgICAgfXJldHVybiBpO1xuICAgIH07ZnVuY3Rpb24gdWUoZSwgdCwgbiwgcikge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhID0gMjAsXG4gICAgICAgICAgICBzID0gciA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByLmN1cigpO1xuICAgICAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHcuY3NzKGUsIHQsIFwiXCIpO1xuICAgICAgICB9LFxuICAgICAgICAgICAgdSA9IHMoKSxcbiAgICAgICAgICAgIGwgPSBuICYmIG5bM10gfHwgKHcuY3NzTnVtYmVyW3RdID8gXCJcIiA6IFwicHhcIiksXG4gICAgICAgICAgICBjID0gKHcuY3NzTnVtYmVyW3RdIHx8IFwicHhcIiAhPT0gbCAmJiArdSkgJiYgaWUuZXhlYyh3LmNzcyhlLCB0KSk7aWYgKGMgJiYgY1szXSAhPT0gbCkge1xuICAgICAgICAgICAgdSAvPSAyLCBsID0gbCB8fCBjWzNdLCBjID0gK3UgfHwgMTt3aGlsZSAoYS0tKSB7XG4gICAgICAgICAgICAgICAgdy5zdHlsZShlLCB0LCBjICsgbCksICgxIC0gbykgKiAoMSAtIChvID0gcygpIC8gdSB8fCAuNSkpIDw9IDAgJiYgKGEgPSAwKSwgYyAvPSBvO1xuICAgICAgICAgICAgfWMgKj0gMiwgdy5zdHlsZShlLCB0LCBjICsgbCksIG4gPSBuIHx8IFtdO1xuICAgICAgICB9cmV0dXJuIG4gJiYgKGMgPSArYyB8fCArdSB8fCAwLCBpID0gblsxXSA/IGMgKyAoblsxXSArIDEpICogblsyXSA6ICtuWzJdLCByICYmIChyLnVuaXQgPSBsLCByLnN0YXJ0ID0gYywgci5lbmQgPSBpKSksIGk7XG4gICAgfXZhciBsZSA9IHt9O2Z1bmN0aW9uIGNlKGUpIHtcbiAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICBuID0gZS5vd25lckRvY3VtZW50LFxuICAgICAgICAgICAgciA9IGUubm9kZU5hbWUsXG4gICAgICAgICAgICBpID0gbGVbcl07cmV0dXJuIGkgfHwgKHQgPSBuLmJvZHkuYXBwZW5kQ2hpbGQobi5jcmVhdGVFbGVtZW50KHIpKSwgaSA9IHcuY3NzKHQsIFwiZGlzcGxheVwiKSwgdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLCBcIm5vbmVcIiA9PT0gaSAmJiAoaSA9IFwiYmxvY2tcIiksIGxlW3JdID0gaSwgaSk7XG4gICAgfWZ1bmN0aW9uIGZlKGUsIHQpIHtcbiAgICAgICAgZm9yICh2YXIgbiwgciwgaSA9IFtdLCBvID0gMCwgYSA9IGUubGVuZ3RoOyBvIDwgYTsgbysrKSB7XG4gICAgICAgICAgICAociA9IGVbb10pLnN0eWxlICYmIChuID0gci5zdHlsZS5kaXNwbGF5LCB0ID8gKFwibm9uZVwiID09PSBuICYmIChpW29dID0gSi5nZXQociwgXCJkaXNwbGF5XCIpIHx8IG51bGwsIGlbb10gfHwgKHIuc3R5bGUuZGlzcGxheSA9IFwiXCIpKSwgXCJcIiA9PT0gci5zdHlsZS5kaXNwbGF5ICYmIGFlKHIpICYmIChpW29dID0gY2UocikpKSA6IFwibm9uZVwiICE9PSBuICYmIChpW29dID0gXCJub25lXCIsIEouc2V0KHIsIFwiZGlzcGxheVwiLCBuKSkpO1xuICAgICAgICB9Zm9yIChvID0gMDsgbyA8IGE7IG8rKykge1xuICAgICAgICAgICAgbnVsbCAhPSBpW29dICYmIChlW29dLnN0eWxlLmRpc3BsYXkgPSBpW29dKTtcbiAgICAgICAgfXJldHVybiBlO1xuICAgIH13LmZuLmV4dGVuZCh7IHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgICAgICByZXR1cm4gZmUodGhpcywgITApO1xuICAgICAgICB9LCBoaWRlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZlKHRoaXMpO1xuICAgICAgICB9LCB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJib29sZWFuXCIgPT0gdHlwZW9mIGUgPyBlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKSA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYWUodGhpcykgPyB3KHRoaXMpLnNob3coKSA6IHcodGhpcykuaGlkZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gfSk7dmFyIHBlID0gL14oPzpjaGVja2JveHxyYWRpbykkL2ksXG4gICAgICAgIGRlID0gLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pLFxuICAgICAgICBoZSA9IC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG4gICAgICAgIGdlID0geyBvcHRpb246IFsxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIl0sIHRoZWFkOiBbMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIl0sIGNvbDogWzIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLCB0cjogWzIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCJdLCB0ZDogWzMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLCBfZGVmYXVsdDogWzAsIFwiXCIsIFwiXCJdIH07Z2Uub3B0Z3JvdXAgPSBnZS5vcHRpb24sIGdlLnRib2R5ID0gZ2UudGZvb3QgPSBnZS5jb2xncm91cCA9IGdlLmNhcHRpb24gPSBnZS50aGVhZCwgZ2UudGggPSBnZS50ZDtmdW5jdGlvbiB5ZShlLCB0KSB7XG4gICAgICAgIHZhciBuO3JldHVybiBuID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCB8fCBcIipcIikgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLnF1ZXJ5U2VsZWN0b3JBbGwgPyBlLnF1ZXJ5U2VsZWN0b3JBbGwodCB8fCBcIipcIikgOiBbXSwgdm9pZCAwID09PSB0IHx8IHQgJiYgTihlLCB0KSA/IHcubWVyZ2UoW2VdLCBuKSA6IG47XG4gICAgfWZ1bmN0aW9uIHZlKGUsIHQpIHtcbiAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7IG4rKykge1xuICAgICAgICAgICAgSi5zZXQoZVtuXSwgXCJnbG9iYWxFdmFsXCIsICF0IHx8IEouZ2V0KHRbbl0sIFwiZ2xvYmFsRXZhbFwiKSk7XG4gICAgICAgIH1cbiAgICB9dmFyIG1lID0gLzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHhlKGUsIHQsIG4sIHIsIGkpIHtcbiAgICAgICAgZm9yICh2YXIgbywgYSwgcywgdSwgbCwgYywgZiA9IHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBwID0gW10sIGQgPSAwLCBoID0gZS5sZW5ndGg7IGQgPCBoOyBkKyspIHtcbiAgICAgICAgICAgIGlmICgobyA9IGVbZF0pIHx8IDAgPT09IG8pIGlmIChcIm9iamVjdFwiID09PSB4KG8pKSB3Lm1lcmdlKHAsIG8ubm9kZVR5cGUgPyBbb10gOiBvKTtlbHNlIGlmIChtZS50ZXN0KG8pKSB7XG4gICAgICAgICAgICAgICAgYSA9IGEgfHwgZi5hcHBlbmRDaGlsZCh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLCBzID0gKGRlLmV4ZWMobykgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpLCB1ID0gZ2Vbc10gfHwgZ2UuX2RlZmF1bHQsIGEuaW5uZXJIVE1MID0gdVsxXSArIHcuaHRtbFByZWZpbHRlcihvKSArIHVbMl0sIGMgPSB1WzBdO3doaWxlIChjLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IGEubGFzdENoaWxkO1xuICAgICAgICAgICAgICAgIH13Lm1lcmdlKHAsIGEuY2hpbGROb2RlcyksIChhID0gZi5maXJzdENoaWxkKS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgcC5wdXNoKHQuY3JlYXRlVGV4dE5vZGUobykpO1xuICAgICAgICB9Zi50ZXh0Q29udGVudCA9IFwiXCIsIGQgPSAwO3doaWxlIChvID0gcFtkKytdKSB7XG4gICAgICAgICAgICBpZiAociAmJiB3LmluQXJyYXkobywgcikgPiAtMSkgaSAmJiBpLnB1c2gobyk7ZWxzZSBpZiAobCA9IHcuY29udGFpbnMoby5vd25lckRvY3VtZW50LCBvKSwgYSA9IHllKGYuYXBwZW5kQ2hpbGQobyksIFwic2NyaXB0XCIpLCBsICYmIHZlKGEpLCBuKSB7XG4gICAgICAgICAgICAgICAgYyA9IDA7d2hpbGUgKG8gPSBhW2MrK10pIHtcbiAgICAgICAgICAgICAgICAgICAgaGUudGVzdChvLnR5cGUgfHwgXCJcIikgJiYgbi5wdXNoKG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfXJldHVybiBmO1xuICAgIH0hZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKHIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksXG4gICAgICAgICAgICB0ID0gci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwicmFkaW9cIiksIHQuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiksIHQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInRcIiksIGUuYXBwZW5kQ2hpbGQodCksIGguY2hlY2tDbG9uZSA9IGUuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLCBlLmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLCBoLm5vQ2xvbmVDaGVja2VkID0gISFlLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbiAgICB9KCk7dmFyIGJlID0gci5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIHdlID0gL15rZXkvLFxuICAgICAgICBUZSA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcbiAgICAgICAgQ2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO2Z1bmN0aW9uIEVlKCkge1xuICAgICAgICByZXR1cm4gITA7XG4gICAgfWZ1bmN0aW9uIGtlKCkge1xuICAgICAgICByZXR1cm4gITE7XG4gICAgfWZ1bmN0aW9uIFNlKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHIuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9ZnVuY3Rpb24gRGUoZSwgdCwgbiwgciwgaSwgbykge1xuICAgICAgICB2YXIgYSwgcztpZiAoXCJvYmplY3RcIiA9PSAodHlwZW9mIHQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KSkpIHtcbiAgICAgICAgICAgIFwic3RyaW5nXCIgIT0gdHlwZW9mIG4gJiYgKHIgPSByIHx8IG4sIG4gPSB2b2lkIDApO2ZvciAocyBpbiB0KSB7XG4gICAgICAgICAgICAgICAgRGUoZSwgcywgbiwgciwgdFtzXSwgbyk7XG4gICAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgIH1pZiAobnVsbCA9PSByICYmIG51bGwgPT0gaSA/IChpID0gbiwgciA9IG4gPSB2b2lkIDApIDogbnVsbCA9PSBpICYmIChcInN0cmluZ1wiID09IHR5cGVvZiBuID8gKGkgPSByLCByID0gdm9pZCAwKSA6IChpID0gciwgciA9IG4sIG4gPSB2b2lkIDApKSwgITEgPT09IGkpIGkgPSBrZTtlbHNlIGlmICghaSkgcmV0dXJuIGU7cmV0dXJuIDEgPT09IG8gJiYgKGEgPSBpLCAoaSA9IGZ1bmN0aW9uIGkoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHcoKS5vZmYoZSksIGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSkuZ3VpZCA9IGEuZ3VpZCB8fCAoYS5ndWlkID0gdy5ndWlkKyspKSwgZS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHcuZXZlbnQuYWRkKHRoaXMsIHQsIGksIHIsIG4pO1xuICAgICAgICB9KTtcbiAgICB9dy5ldmVudCA9IHsgZ2xvYmFsOiB7fSwgYWRkOiBmdW5jdGlvbiBhZGQoZSwgdCwgbiwgciwgaSkge1xuICAgICAgICAgICAgdmFyIG8sXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgZyxcbiAgICAgICAgICAgICAgICB5ID0gSi5nZXQoZSk7aWYgKHkpIHtcbiAgICAgICAgICAgICAgICBuLmhhbmRsZXIgJiYgKG4gPSAobyA9IG4pLmhhbmRsZXIsIGkgPSBvLnNlbGVjdG9yKSwgaSAmJiB3LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGJlLCBpKSwgbi5ndWlkIHx8IChuLmd1aWQgPSB3Lmd1aWQrKyksICh1ID0geS5ldmVudHMpIHx8ICh1ID0geS5ldmVudHMgPSB7fSksIChhID0geS5oYW5kbGUpIHx8IChhID0geS5oYW5kbGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdyAmJiB3LmV2ZW50LnRyaWdnZXJlZCAhPT0gdC50eXBlID8gdy5ldmVudC5kaXNwYXRjaC5hcHBseShlLCBhcmd1bWVudHMpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIH0pLCBsID0gKHQgPSAodCB8fCBcIlwiKS5tYXRjaChNKSB8fCBbXCJcIl0pLmxlbmd0aDt3aGlsZSAobC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGQgPSBnID0gKHMgPSBDZS5leGVjKHRbbF0pIHx8IFtdKVsxXSwgaCA9IChzWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksIGQgJiYgKGYgPSB3LmV2ZW50LnNwZWNpYWxbZF0gfHwge30sIGQgPSAoaSA/IGYuZGVsZWdhdGVUeXBlIDogZi5iaW5kVHlwZSkgfHwgZCwgZiA9IHcuZXZlbnQuc3BlY2lhbFtkXSB8fCB7fSwgYyA9IHcuZXh0ZW5kKHsgdHlwZTogZCwgb3JpZ1R5cGU6IGcsIGRhdGE6IHIsIGhhbmRsZXI6IG4sIGd1aWQ6IG4uZ3VpZCwgc2VsZWN0b3I6IGksIG5lZWRzQ29udGV4dDogaSAmJiB3LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoaSksIG5hbWVzcGFjZTogaC5qb2luKFwiLlwiKSB9LCBvKSwgKHAgPSB1W2RdKSB8fCAoKHAgPSB1W2RdID0gW10pLmRlbGVnYXRlQ291bnQgPSAwLCBmLnNldHVwICYmICExICE9PSBmLnNldHVwLmNhbGwoZSwgciwgaCwgYSkgfHwgZS5hZGRFdmVudExpc3RlbmVyICYmIGUuYWRkRXZlbnRMaXN0ZW5lcihkLCBhKSksIGYuYWRkICYmIChmLmFkZC5jYWxsKGUsIGMpLCBjLmhhbmRsZXIuZ3VpZCB8fCAoYy5oYW5kbGVyLmd1aWQgPSBuLmd1aWQpKSwgaSA/IHAuc3BsaWNlKHAuZGVsZWdhdGVDb3VudCsrLCAwLCBjKSA6IHAucHVzaChjKSwgdy5ldmVudC5nbG9iYWxbZF0gPSAhMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShlLCB0LCBuLCByLCBpKSB7XG4gICAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgdSxcbiAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgaCxcbiAgICAgICAgICAgICAgICBnLFxuICAgICAgICAgICAgICAgIHkgPSBKLmhhc0RhdGEoZSkgJiYgSi5nZXQoZSk7aWYgKHkgJiYgKHUgPSB5LmV2ZW50cykpIHtcbiAgICAgICAgICAgICAgICBsID0gKHQgPSAodCB8fCBcIlwiKS5tYXRjaChNKSB8fCBbXCJcIl0pLmxlbmd0aDt3aGlsZSAobC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzID0gQ2UuZXhlYyh0W2xdKSB8fCBbXSwgZCA9IGcgPSBzWzFdLCBoID0gKHNbMl0gfHwgXCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSwgZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHcuZXZlbnQuc3BlY2lhbFtkXSB8fCB7fSwgcCA9IHVbZCA9IChyID8gZi5kZWxlZ2F0ZVR5cGUgOiBmLmJpbmRUeXBlKSB8fCBkXSB8fCBbXSwgcyA9IHNbMl0gJiYgbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgaC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKSwgYSA9IG8gPSBwLmxlbmd0aDt3aGlsZSAoby0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHBbb10sICFpICYmIGcgIT09IGMub3JpZ1R5cGUgfHwgbiAmJiBuLmd1aWQgIT09IGMuZ3VpZCB8fCBzICYmICFzLnRlc3QoYy5uYW1lc3BhY2UpIHx8IHIgJiYgciAhPT0gYy5zZWxlY3RvciAmJiAoXCIqKlwiICE9PSByIHx8ICFjLnNlbGVjdG9yKSB8fCAocC5zcGxpY2UobywgMSksIGMuc2VsZWN0b3IgJiYgcC5kZWxlZ2F0ZUNvdW50LS0sIGYucmVtb3ZlICYmIGYucmVtb3ZlLmNhbGwoZSwgYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWEgJiYgIXAubGVuZ3RoICYmIChmLnRlYXJkb3duICYmICExICE9PSBmLnRlYXJkb3duLmNhbGwoZSwgaCwgeS5oYW5kbGUpIHx8IHcucmVtb3ZlRXZlbnQoZSwgZCwgeS5oYW5kbGUpLCBkZWxldGUgdVtkXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBmb3IgKGQgaW4gdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdy5ldmVudC5yZW1vdmUoZSwgZCArIHRbbF0sIG4sIHIsICEwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH13LmlzRW1wdHlPYmplY3QodSkgJiYgSi5yZW1vdmUoZSwgXCJoYW5kbGUgZXZlbnRzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goZSkge1xuICAgICAgICAgICAgdmFyIHQgPSB3LmV2ZW50LmZpeChlKSxcbiAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgcyxcbiAgICAgICAgICAgICAgICB1ID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLFxuICAgICAgICAgICAgICAgIGwgPSAoSi5nZXQodGhpcywgXCJldmVudHNcIikgfHwge30pW3QudHlwZV0gfHwgW10sXG4gICAgICAgICAgICAgICAgYyA9IHcuZXZlbnQuc3BlY2lhbFt0LnR5cGVdIHx8IHt9O2ZvciAodVswXSA9IHQsIG4gPSAxOyBuIDwgYXJndW1lbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICAgICAgdVtuXSA9IGFyZ3VtZW50c1tuXTtcbiAgICAgICAgICAgIH1pZiAodC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXMsICFjLnByZURpc3BhdGNoIHx8ICExICE9PSBjLnByZURpc3BhdGNoLmNhbGwodGhpcywgdCkpIHtcbiAgICAgICAgICAgICAgICBzID0gdy5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsIHQsIGwpLCBuID0gMDt3aGlsZSAoKG8gPSBzW24rK10pICYmICF0LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdC5jdXJyZW50VGFyZ2V0ID0gby5lbGVtLCByID0gMDt3aGlsZSAoKGEgPSBvLmhhbmRsZXJzW3IrK10pICYmICF0LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucm5hbWVzcGFjZSAmJiAhdC5ybmFtZXNwYWNlLnRlc3QoYS5uYW1lc3BhY2UpIHx8ICh0LmhhbmRsZU9iaiA9IGEsIHQuZGF0YSA9IGEuZGF0YSwgdm9pZCAwICE9PSAoaSA9ICgody5ldmVudC5zcGVjaWFsW2Eub3JpZ1R5cGVdIHx8IHt9KS5oYW5kbGUgfHwgYS5oYW5kbGVyKS5hcHBseShvLmVsZW0sIHUpKSAmJiAhMSA9PT0gKHQucmVzdWx0ID0gaSkgJiYgKHQucHJldmVudERlZmF1bHQoKSwgdC5zdG9wUHJvcGFnYXRpb24oKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfXJldHVybiBjLnBvc3REaXNwYXRjaCAmJiBjLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsIHQpLCB0LnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgaGFuZGxlcnM6IGZ1bmN0aW9uIGhhbmRsZXJzKGUsIHQpIHtcbiAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgcyA9IFtdLFxuICAgICAgICAgICAgICAgIHUgPSB0LmRlbGVnYXRlQ291bnQsXG4gICAgICAgICAgICAgICAgbCA9IGUudGFyZ2V0O2lmICh1ICYmIGwubm9kZVR5cGUgJiYgIShcImNsaWNrXCIgPT09IGUudHlwZSAmJiBlLmJ1dHRvbiA+PSAxKSkgZm9yICg7IGwgIT09IHRoaXM7IGwgPSBsLnBhcmVudE5vZGUgfHwgdGhpcykge1xuICAgICAgICAgICAgICAgIGlmICgxID09PSBsLm5vZGVUeXBlICYmIChcImNsaWNrXCIgIT09IGUudHlwZSB8fCAhMCAhPT0gbC5kaXNhYmxlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChvID0gW10sIGEgPSB7fSwgbiA9IDA7IG4gPCB1OyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gYVtpID0gKHIgPSB0W25dKS5zZWxlY3RvciArIFwiIFwiXSAmJiAoYVtpXSA9IHIubmVlZHNDb250ZXh0ID8gdyhpLCB0aGlzKS5pbmRleChsKSA+IC0xIDogdy5maW5kKGksIHRoaXMsIG51bGwsIFtsXSkubGVuZ3RoKSwgYVtpXSAmJiBvLnB1c2gocik7XG4gICAgICAgICAgICAgICAgICAgIH1vLmxlbmd0aCAmJiBzLnB1c2goeyBlbGVtOiBsLCBoYW5kbGVyczogbyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9cmV0dXJuIGwgPSB0aGlzLCB1IDwgdC5sZW5ndGggJiYgcy5wdXNoKHsgZWxlbTogbCwgaGFuZGxlcnM6IHQuc2xpY2UodSkgfSksIHM7XG4gICAgICAgIH0sIGFkZFByb3A6IGZ1bmN0aW9uIGFkZFByb3AoZSwgdCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHcuRXZlbnQucHJvdG90eXBlLCBlLCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCBnZXQ6IGcodCkgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHJldHVybiB0KHRoaXMub3JpZ2luYWxFdmVudCk7XG4gICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3JpZ2luYWxFdmVudCkgcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFtlXTtcbiAgICAgICAgICAgICAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldCh0KSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBlLCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAsIHZhbHVlOiB0IH0pO1xuICAgICAgICAgICAgICAgIH0gfSk7XG4gICAgICAgIH0sIGZpeDogZnVuY3Rpb24gZml4KGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlW3cuZXhwYW5kb10gPyBlIDogbmV3IHcuRXZlbnQoZSk7XG4gICAgICAgIH0sIHNwZWNpYWw6IHsgbG9hZDogeyBub0J1YmJsZTogITAgfSwgZm9jdXM6IHsgdHJpZ2dlcjogZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMgIT09IFNlKCkgJiYgdGhpcy5mb2N1cykgcmV0dXJuIHRoaXMuZm9jdXMoKSwgITE7XG4gICAgICAgICAgICAgICAgfSwgZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIiB9LCBibHVyOiB7IHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzID09PSBTZSgpICYmIHRoaXMuYmx1cikgcmV0dXJuIHRoaXMuYmx1cigpLCAhMTtcbiAgICAgICAgICAgICAgICB9LCBkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIiB9LCBjbGljazogeyB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJjaGVja2JveFwiID09PSB0aGlzLnR5cGUgJiYgdGhpcy5jbGljayAmJiBOKHRoaXMsIFwiaW5wdXRcIikpIHJldHVybiB0aGlzLmNsaWNrKCksICExO1xuICAgICAgICAgICAgICAgIH0sIF9kZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOKGUudGFyZ2V0LCBcImFcIik7XG4gICAgICAgICAgICAgICAgfSB9LCBiZWZvcmV1bmxvYWQ6IHsgcG9zdERpc3BhdGNoOiBmdW5jdGlvbiBwb3N0RGlzcGF0Y2goZSkge1xuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGUucmVzdWx0ICYmIGUub3JpZ2luYWxFdmVudCAmJiAoZS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0gfSB9IH0sIHcucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiAoZSwgdCwgbikge1xuICAgICAgICBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgJiYgZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsIG4pO1xuICAgIH0sIHcuRXZlbnQgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2Ygdy5FdmVudCkpIHJldHVybiBuZXcgdy5FdmVudChlLCB0KTtlICYmIGUudHlwZSA/ICh0aGlzLm9yaWdpbmFsRXZlbnQgPSBlLCB0aGlzLnR5cGUgPSBlLnR5cGUsIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZS5kZWZhdWx0UHJldmVudGVkIHx8IHZvaWQgMCA9PT0gZS5kZWZhdWx0UHJldmVudGVkICYmICExID09PSBlLnJldHVyblZhbHVlID8gRWUgOiBrZSwgdGhpcy50YXJnZXQgPSBlLnRhcmdldCAmJiAzID09PSBlLnRhcmdldC5ub2RlVHlwZSA/IGUudGFyZ2V0LnBhcmVudE5vZGUgOiBlLnRhcmdldCwgdGhpcy5jdXJyZW50VGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LCB0aGlzLnJlbGF0ZWRUYXJnZXQgPSBlLnJlbGF0ZWRUYXJnZXQpIDogdGhpcy50eXBlID0gZSwgdCAmJiB3LmV4dGVuZCh0aGlzLCB0KSwgdGhpcy50aW1lU3RhbXAgPSBlICYmIGUudGltZVN0YW1wIHx8IERhdGUubm93KCksIHRoaXNbdy5leHBhbmRvXSA9ICEwO1xuICAgIH0sIHcuRXZlbnQucHJvdG90eXBlID0geyBjb25zdHJ1Y3Rvcjogdy5FdmVudCwgaXNEZWZhdWx0UHJldmVudGVkOiBrZSwgaXNQcm9wYWdhdGlvblN0b3BwZWQ6IGtlLCBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDoga2UsIGlzU2ltdWxhdGVkOiAhMSwgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBFZSwgZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0sIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IEVlLCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICYmIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0sIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IEVlLCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0gfSwgdy5lYWNoKHsgYWx0S2V5OiAhMCwgYnViYmxlczogITAsIGNhbmNlbGFibGU6ICEwLCBjaGFuZ2VkVG91Y2hlczogITAsIGN0cmxLZXk6ICEwLCBkZXRhaWw6ICEwLCBldmVudFBoYXNlOiAhMCwgbWV0YUtleTogITAsIHBhZ2VYOiAhMCwgcGFnZVk6ICEwLCBzaGlmdEtleTogITAsIHZpZXc6ICEwLCBcImNoYXJcIjogITAsIGNoYXJDb2RlOiAhMCwga2V5OiAhMCwga2V5Q29kZTogITAsIGJ1dHRvbjogITAsIGJ1dHRvbnM6ICEwLCBjbGllbnRYOiAhMCwgY2xpZW50WTogITAsIG9mZnNldFg6ICEwLCBvZmZzZXRZOiAhMCwgcG9pbnRlcklkOiAhMCwgcG9pbnRlclR5cGU6ICEwLCBzY3JlZW5YOiAhMCwgc2NyZWVuWTogITAsIHRhcmdldFRvdWNoZXM6ICEwLCB0b0VsZW1lbnQ6ICEwLCB0b3VjaGVzOiAhMCwgd2hpY2g6IGZ1bmN0aW9uIHdoaWNoKGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZS5idXR0b247cmV0dXJuIG51bGwgPT0gZS53aGljaCAmJiB3ZS50ZXN0KGUudHlwZSkgPyBudWxsICE9IGUuY2hhckNvZGUgPyBlLmNoYXJDb2RlIDogZS5rZXlDb2RlIDogIWUud2hpY2ggJiYgdm9pZCAwICE9PSB0ICYmIFRlLnRlc3QoZS50eXBlKSA/IDEgJiB0ID8gMSA6IDIgJiB0ID8gMyA6IDQgJiB0ID8gMiA6IDAgOiBlLndoaWNoO1xuICAgICAgICB9IH0sIHcuZXZlbnQuYWRkUHJvcCksIHcuZWFjaCh7IG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIiwgcG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsIHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCIgfSwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdy5ldmVudC5zcGVjaWFsW2VdID0geyBkZWxlZ2F0ZVR5cGU6IHQsIGJpbmRUeXBlOiB0LCBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gZS5yZWxhdGVkVGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBvID0gZS5oYW5kbGVPYmo7cmV0dXJuIGkgJiYgKGkgPT09IHIgfHwgdy5jb250YWlucyhyLCBpKSkgfHwgKGUudHlwZSA9IG8ub3JpZ1R5cGUsIG4gPSBvLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgZS50eXBlID0gdCksIG47XG4gICAgICAgICAgICB9IH07XG4gICAgfSksIHcuZm4uZXh0ZW5kKHsgb246IGZ1bmN0aW9uIG9uKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgICAgIHJldHVybiBEZSh0aGlzLCBlLCB0LCBuLCByKTtcbiAgICAgICAgfSwgb25lOiBmdW5jdGlvbiBvbmUoZSwgdCwgbiwgcikge1xuICAgICAgICAgICAgcmV0dXJuIERlKHRoaXMsIGUsIHQsIG4sIHIsIDEpO1xuICAgICAgICB9LCBvZmY6IGZ1bmN0aW9uIG9mZihlLCB0LCBuKSB7XG4gICAgICAgICAgICB2YXIgciwgaTtpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0ICYmIGUuaGFuZGxlT2JqKSByZXR1cm4gciA9IGUuaGFuZGxlT2JqLCB3KGUuZGVsZWdhdGVUYXJnZXQpLm9mZihyLm5hbWVzcGFjZSA/IHIub3JpZ1R5cGUgKyBcIi5cIiArIHIubmFtZXNwYWNlIDogci5vcmlnVHlwZSwgci5zZWxlY3Rvciwgci5oYW5kbGVyKSwgdGhpcztpZiAoXCJvYmplY3RcIiA9PSAodHlwZW9mIGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihlKSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZihpLCB0LCBlW2ldKTtcbiAgICAgICAgICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9cmV0dXJuICExICE9PSB0ICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgdCB8fCAobiA9IHQsIHQgPSB2b2lkIDApLCAhMSA9PT0gbiAmJiAobiA9IGtlKSwgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB3LmV2ZW50LnJlbW92ZSh0aGlzLCBlLCBuLCB0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IH0pO3ZhciBOZSA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuICAgICAgICBBZSA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuICAgICAgICBqZSA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG4gICAgICAgIHFlID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO2Z1bmN0aW9uIExlKGUsIHQpIHtcbiAgICAgICAgcmV0dXJuIE4oZSwgXCJ0YWJsZVwiKSAmJiBOKDExICE9PSB0Lm5vZGVUeXBlID8gdCA6IHQuZmlyc3RDaGlsZCwgXCJ0clwiKSA/IHcoZSkuY2hpbGRyZW4oXCJ0Ym9keVwiKVswXSB8fCBlIDogZTtcbiAgICB9ZnVuY3Rpb24gSGUoZSkge1xuICAgICAgICByZXR1cm4gZS50eXBlID0gKG51bGwgIT09IGUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgKyBcIi9cIiArIGUudHlwZSwgZTtcbiAgICB9ZnVuY3Rpb24gT2UoZSkge1xuICAgICAgICByZXR1cm4gXCJ0cnVlL1wiID09PSAoZS50eXBlIHx8IFwiXCIpLnNsaWNlKDAsIDUpID8gZS50eXBlID0gZS50eXBlLnNsaWNlKDUpIDogZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLCBlO1xuICAgIH1mdW5jdGlvbiBQZShlLCB0KSB7XG4gICAgICAgIHZhciBuLCByLCBpLCBvLCBhLCBzLCB1LCBsO2lmICgxID09PSB0Lm5vZGVUeXBlKSB7XG4gICAgICAgICAgICBpZiAoSi5oYXNEYXRhKGUpICYmIChvID0gSi5hY2Nlc3MoZSksIGEgPSBKLnNldCh0LCBvKSwgbCA9IG8uZXZlbnRzKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBhLmhhbmRsZSwgYS5ldmVudHMgPSB7fTtmb3IgKGkgaW4gbCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKG4gPSAwLCByID0gbFtpXS5sZW5ndGg7IG4gPCByOyBuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHcuZXZlbnQuYWRkKHQsIGksIGxbaV1bbl0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfUsuaGFzRGF0YShlKSAmJiAocyA9IEsuYWNjZXNzKGUpLCB1ID0gdy5leHRlbmQoe30sIHMpLCBLLnNldCh0LCB1KSk7XG4gICAgICAgIH1cbiAgICB9ZnVuY3Rpb24gTWUoZSwgdCkge1xuICAgICAgICB2YXIgbiA9IHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcImlucHV0XCIgPT09IG4gJiYgcGUudGVzdChlLnR5cGUpID8gdC5jaGVja2VkID0gZS5jaGVja2VkIDogXCJpbnB1dFwiICE9PSBuICYmIFwidGV4dGFyZWFcIiAhPT0gbiB8fCAodC5kZWZhdWx0VmFsdWUgPSBlLmRlZmF1bHRWYWx1ZSk7XG4gICAgfWZ1bmN0aW9uIFJlKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgdCA9IGEuYXBwbHkoW10sIHQpO3ZhciBpLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICB1LFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBmID0gMCxcbiAgICAgICAgICAgIHAgPSBlLmxlbmd0aCxcbiAgICAgICAgICAgIGQgPSBwIC0gMSxcbiAgICAgICAgICAgIHkgPSB0WzBdLFxuICAgICAgICAgICAgdiA9IGcoeSk7aWYgKHYgfHwgcCA+IDEgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgeSAmJiAhaC5jaGVja0Nsb25lICYmIGplLnRlc3QoeSkpIHJldHVybiBlLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBvID0gZS5lcShpKTt2ICYmICh0WzBdID0geS5jYWxsKHRoaXMsIGksIG8uaHRtbCgpKSksIFJlKG8sIHQsIG4sIHIpO1xuICAgICAgICB9KTtpZiAocCAmJiAoaSA9IHhlKHQsIGVbMF0ub3duZXJEb2N1bWVudCwgITEsIGUsIHIpLCBvID0gaS5maXJzdENoaWxkLCAxID09PSBpLmNoaWxkTm9kZXMubGVuZ3RoICYmIChpID0gbyksIG8gfHwgcikpIHtcbiAgICAgICAgICAgIGZvciAodSA9IChzID0gdy5tYXAoeWUoaSwgXCJzY3JpcHRcIiksIEhlKSkubGVuZ3RoOyBmIDwgcDsgZisrKSB7XG4gICAgICAgICAgICAgICAgbCA9IGksIGYgIT09IGQgJiYgKGwgPSB3LmNsb25lKGwsICEwLCAhMCksIHUgJiYgdy5tZXJnZShzLCB5ZShsLCBcInNjcmlwdFwiKSkpLCBuLmNhbGwoZVtmXSwgbCwgZik7XG4gICAgICAgICAgICB9aWYgKHUpIGZvciAoYyA9IHNbcy5sZW5ndGggLSAxXS5vd25lckRvY3VtZW50LCB3Lm1hcChzLCBPZSksIGYgPSAwOyBmIDwgdTsgZisrKSB7XG4gICAgICAgICAgICAgICAgbCA9IHNbZl0sIGhlLnRlc3QobC50eXBlIHx8IFwiXCIpICYmICFKLmFjY2VzcyhsLCBcImdsb2JhbEV2YWxcIikgJiYgdy5jb250YWlucyhjLCBsKSAmJiAobC5zcmMgJiYgXCJtb2R1bGVcIiAhPT0gKGwudHlwZSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpID8gdy5fZXZhbFVybCAmJiB3Ll9ldmFsVXJsKGwuc3JjKSA6IG0obC50ZXh0Q29udGVudC5yZXBsYWNlKHFlLCBcIlwiKSwgYywgbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIGU7XG4gICAgfWZ1bmN0aW9uIEllKGUsIHQsIG4pIHtcbiAgICAgICAgZm9yICh2YXIgciwgaSA9IHQgPyB3LmZpbHRlcih0LCBlKSA6IGUsIG8gPSAwOyBudWxsICE9IChyID0gaVtvXSk7IG8rKykge1xuICAgICAgICAgICAgbiB8fCAxICE9PSByLm5vZGVUeXBlIHx8IHcuY2xlYW5EYXRhKHllKHIpKSwgci5wYXJlbnROb2RlICYmIChuICYmIHcuY29udGFpbnMoci5vd25lckRvY3VtZW50LCByKSAmJiB2ZSh5ZShyLCBcInNjcmlwdFwiKSksIHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7XG4gICAgICAgIH1yZXR1cm4gZTtcbiAgICB9dy5leHRlbmQoeyBodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiBodG1sUHJlZmlsdGVyKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnJlcGxhY2UoTmUsIFwiPCQxPjwvJDI+XCIpO1xuICAgICAgICB9LCBjbG9uZTogZnVuY3Rpb24gY2xvbmUoZSwgdCwgbikge1xuICAgICAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgcyA9IGUuY2xvbmVOb2RlKCEwKSxcbiAgICAgICAgICAgICAgICB1ID0gdy5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsIGUpO2lmICghKGgubm9DbG9uZUNoZWNrZWQgfHwgMSAhPT0gZS5ub2RlVHlwZSAmJiAxMSAhPT0gZS5ub2RlVHlwZSB8fCB3LmlzWE1MRG9jKGUpKSkgZm9yIChhID0geWUocyksIHIgPSAwLCBpID0gKG8gPSB5ZShlKSkubGVuZ3RoOyByIDwgaTsgcisrKSB7XG4gICAgICAgICAgICAgICAgTWUob1tyXSwgYVtyXSk7XG4gICAgICAgICAgICB9aWYgKHQpIGlmIChuKSBmb3IgKG8gPSBvIHx8IHllKGUpLCBhID0gYSB8fCB5ZShzKSwgciA9IDAsIGkgPSBvLmxlbmd0aDsgciA8IGk7IHIrKykge1xuICAgICAgICAgICAgICAgIFBlKG9bcl0sIGFbcl0pO1xuICAgICAgICAgICAgfSBlbHNlIFBlKGUsIHMpO3JldHVybiAoYSA9IHllKHMsIFwic2NyaXB0XCIpKS5sZW5ndGggPiAwICYmIHZlKGEsICF1ICYmIHllKGUsIFwic2NyaXB0XCIpKSwgcztcbiAgICAgICAgfSwgY2xlYW5EYXRhOiBmdW5jdGlvbiBjbGVhbkRhdGEoZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgdCwgbiwgciwgaSA9IHcuZXZlbnQuc3BlY2lhbCwgbyA9IDA7IHZvaWQgMCAhPT0gKG4gPSBlW29dKTsgbysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFkobikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPSBuW0ouZXhwYW5kb10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmV2ZW50cykgZm9yIChyIGluIHQuZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVtyXSA/IHcuZXZlbnQucmVtb3ZlKG4sIHIpIDogdy5yZW1vdmVFdmVudChuLCByLCB0LmhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9bltKLmV4cGFuZG9dID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICB9bltLLmV4cGFuZG9dICYmIChuW0suZXhwYW5kb10gPSB2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB9KSwgdy5mbi5leHRlbmQoeyBkZXRhY2g6IGZ1bmN0aW9uIGRldGFjaChlKSB7XG4gICAgICAgICAgICByZXR1cm4gSWUodGhpcywgZSwgITApO1xuICAgICAgICB9LCByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gSWUodGhpcywgZSk7XG4gICAgICAgIH0sIHRleHQ6IGZ1bmN0aW9uIHRleHQoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHoodGhpcywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBlID8gdy50ZXh0KHRoaXMpIDogdGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAxICE9PSB0aGlzLm5vZGVUeXBlICYmIDExICE9PSB0aGlzLm5vZGVUeXBlICYmIDkgIT09IHRoaXMubm9kZVR5cGUgfHwgKHRoaXMudGV4dENvbnRlbnQgPSBlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIG51bGwsIGUsIGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgICB9LCBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgMSAhPT0gdGhpcy5ub2RlVHlwZSAmJiAxMSAhPT0gdGhpcy5ub2RlVHlwZSAmJiA5ICE9PSB0aGlzLm5vZGVUeXBlIHx8IExlKHRoaXMsIGUpLmFwcGVuZENoaWxkKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmUodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmICgxID09PSB0aGlzLm5vZGVUeXBlIHx8IDExID09PSB0aGlzLm5vZGVUeXBlIHx8IDkgPT09IHRoaXMubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBMZSh0aGlzLCBlKTt0Lmluc2VydEJlZm9yZShlLCB0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZSh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSwgdGhpcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgYWZ0ZXI6IGZ1bmN0aW9uIGFmdGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLCB0aGlzLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBlLCB0ID0gMDsgbnVsbCAhPSAoZSA9IHRoaXNbdF0pOyB0KyspIHtcbiAgICAgICAgICAgICAgICAxID09PSBlLm5vZGVUeXBlICYmICh3LmNsZWFuRGF0YSh5ZShlLCAhMSkpLCBlLnRleHRDb250ZW50ID0gXCJcIik7XG4gICAgICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICAgIH0sIGNsb25lOiBmdW5jdGlvbiBjbG9uZShlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gZSA9IG51bGwgIT0gZSAmJiBlLCB0ID0gbnVsbCA9PSB0ID8gZSA6IHQsIHRoaXMubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdy5jbG9uZSh0aGlzLCBlLCB0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBodG1sOiBmdW5jdGlvbiBodG1sKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB6KHRoaXMsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzWzBdIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICBuID0gMCxcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMubGVuZ3RoO2lmICh2b2lkIDAgPT09IGUgJiYgMSA9PT0gdC5ub2RlVHlwZSkgcmV0dXJuIHQuaW5uZXJIVE1MO2lmIChcInN0cmluZ1wiID09IHR5cGVvZiBlICYmICFBZS50ZXN0KGUpICYmICFnZVsoZGUuZXhlYyhlKSB8fCBbXCJcIiwgXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSB3Lmh0bWxQcmVmaWx0ZXIoZSk7dHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBuIDwgcjsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMSA9PT0gKHQgPSB0aGlzW25dIHx8IHt9KS5ub2RlVHlwZSAmJiAody5jbGVhbkRhdGEoeWUodCwgITEpKSwgdC5pbm5lckhUTUwgPSBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH10ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgICAgICB9dCAmJiB0aGlzLmVtcHR5KCkuYXBwZW5kKGUpO1xuICAgICAgICAgICAgfSwgbnVsbCwgZSwgYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgICAgIH0sIHJlcGxhY2VXaXRoOiBmdW5jdGlvbiByZXBsYWNlV2l0aCgpIHtcbiAgICAgICAgICAgIHZhciBlID0gW107cmV0dXJuIFJlKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMucGFyZW50Tm9kZTt3LmluQXJyYXkodGhpcywgZSkgPCAwICYmICh3LmNsZWFuRGF0YSh5ZSh0aGlzKSksIG4gJiYgbi5yZXBsYWNlQ2hpbGQodCwgdGhpcykpO1xuICAgICAgICAgICAgfSwgZSk7XG4gICAgICAgIH0gfSksIHcuZWFjaCh7IGFwcGVuZFRvOiBcImFwcGVuZFwiLCBwcmVwZW5kVG86IFwicHJlcGVuZFwiLCBpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsIGluc2VydEFmdGVyOiBcImFmdGVyXCIsIHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIiB9LCBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB3LmZuW2VdID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4sIHIgPSBbXSwgaSA9IHcoZSksIG8gPSBpLmxlbmd0aCAtIDEsIGEgPSAwOyBhIDw9IG87IGErKykge1xuICAgICAgICAgICAgICAgIG4gPSBhID09PSBvID8gdGhpcyA6IHRoaXMuY2xvbmUoITApLCB3KGlbYV0pW3RdKG4pLCBzLmFwcGx5KHIsIG4uZ2V0KCkpO1xuICAgICAgICAgICAgfXJldHVybiB0aGlzLnB1c2hTdGFjayhyKTtcbiAgICAgICAgfTtcbiAgICB9KTt2YXIgV2UgPSBuZXcgUmVnRXhwKFwiXihcIiArIHJlICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIpLFxuICAgICAgICAkZSA9IGZ1bmN0aW9uICRlKHQpIHtcbiAgICAgICAgdmFyIG4gPSB0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIG4gJiYgbi5vcGVuZXIgfHwgKG4gPSBlKSwgbi5nZXRDb21wdXRlZFN0eWxlKHQpO1xuICAgIH0sXG4gICAgICAgIEJlID0gbmV3IFJlZ0V4cChvZS5qb2luKFwifFwiKSwgXCJpXCIpOyFmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgIGwuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O21hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiLCBjLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjYwJTt0b3A6MSVcIiwgYmUuYXBwZW5kQ2hpbGQobCkuYXBwZW5kQ2hpbGQoYyk7dmFyIHQgPSBlLmdldENvbXB1dGVkU3R5bGUoYyk7aSA9IFwiMSVcIiAhPT0gdC50b3AsIHUgPSAxMiA9PT0gbih0Lm1hcmdpbkxlZnQpLCBjLnN0eWxlLnJpZ2h0ID0gXCI2MCVcIiwgcyA9IDM2ID09PSBuKHQucmlnaHQpLCBvID0gMzYgPT09IG4odC53aWR0aCksIGMuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCIsIGEgPSAzNiA9PT0gYy5vZmZzZXRXaWR0aCB8fCBcImFic29sdXRlXCIsIGJlLnJlbW92ZUNoaWxkKGwpLCBjID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWZ1bmN0aW9uIG4oZSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocGFyc2VGbG9hdChlKSk7XG4gICAgICAgIH12YXIgaSxcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgcyxcbiAgICAgICAgICAgIHUsXG4gICAgICAgICAgICBsID0gci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICAgICAgYyA9IHIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLnN0eWxlICYmIChjLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiLCBjLmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiLCBoLmNsZWFyQ2xvbmVTdHlsZSA9IFwiY29udGVudC1ib3hcIiA9PT0gYy5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCwgdy5leHRlbmQoaCwgeyBib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24gYm94U2l6aW5nUmVsaWFibGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQoKSwgbztcbiAgICAgICAgICAgIH0sIHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbiBwaXhlbEJveFN0eWxlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCgpLCBzO1xuICAgICAgICAgICAgfSwgcGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24gcGl4ZWxQb3NpdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCgpLCBpO1xuICAgICAgICAgICAgfSwgcmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbiByZWxpYWJsZU1hcmdpbkxlZnQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQoKSwgdTtcbiAgICAgICAgICAgIH0sIHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uIHNjcm9sbGJveFNpemUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQoKSwgYTtcbiAgICAgICAgICAgIH0gfSkpO1xuICAgIH0oKTtmdW5jdGlvbiBGZShlLCB0LCBuKSB7XG4gICAgICAgIHZhciByLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG8sXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgcyA9IGUuc3R5bGU7cmV0dXJuIChuID0gbiB8fCAkZShlKSkgJiYgKFwiXCIgIT09IChhID0gbi5nZXRQcm9wZXJ0eVZhbHVlKHQpIHx8IG5bdF0pIHx8IHcuY29udGFpbnMoZS5vd25lckRvY3VtZW50LCBlKSB8fCAoYSA9IHcuc3R5bGUoZSwgdCkpLCAhaC5waXhlbEJveFN0eWxlcygpICYmIFdlLnRlc3QoYSkgJiYgQmUudGVzdCh0KSAmJiAociA9IHMud2lkdGgsIGkgPSBzLm1pbldpZHRoLCBvID0gcy5tYXhXaWR0aCwgcy5taW5XaWR0aCA9IHMubWF4V2lkdGggPSBzLndpZHRoID0gYSwgYSA9IG4ud2lkdGgsIHMud2lkdGggPSByLCBzLm1pbldpZHRoID0gaSwgcy5tYXhXaWR0aCA9IG8pKSwgdm9pZCAwICE9PSBhID8gYSArIFwiXCIgOiBhO1xuICAgIH1mdW5jdGlvbiBfZShlLCB0KSB7XG4gICAgICAgIHJldHVybiB7IGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIGlmICghZSgpKSByZXR1cm4gKHRoaXMuZ2V0ID0gdCkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtkZWxldGUgdGhpcy5nZXQ7XG4gICAgICAgICAgICB9IH07XG4gICAgfXZhciB6ZSA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcbiAgICAgICAgWGUgPSAvXi0tLyxcbiAgICAgICAgVWUgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuICAgICAgICBWZSA9IHsgbGV0dGVyU3BhY2luZzogXCIwXCIsIGZvbnRXZWlnaHQ6IFwiNDAwXCIgfSxcbiAgICAgICAgR2UgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXSxcbiAgICAgICAgWWUgPSByLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7ZnVuY3Rpb24gUWUoZSkge1xuICAgICAgICBpZiAoZSBpbiBZZSkgcmV0dXJuIGU7dmFyIHQgPSBlWzBdLnRvVXBwZXJDYXNlKCkgKyBlLnNsaWNlKDEpLFxuICAgICAgICAgICAgbiA9IEdlLmxlbmd0aDt3aGlsZSAobi0tKSB7XG4gICAgICAgICAgICBpZiAoKGUgPSBHZVtuXSArIHQpIGluIFllKSByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgIH1mdW5jdGlvbiBKZShlKSB7XG4gICAgICAgIHZhciB0ID0gdy5jc3NQcm9wc1tlXTtyZXR1cm4gdCB8fCAodCA9IHcuY3NzUHJvcHNbZV0gPSBRZShlKSB8fCBlKSwgdDtcbiAgICB9ZnVuY3Rpb24gS2UoZSwgdCwgbikge1xuICAgICAgICB2YXIgciA9IGllLmV4ZWModCk7cmV0dXJuIHIgPyBNYXRoLm1heCgwLCByWzJdIC0gKG4gfHwgMCkpICsgKHJbM10gfHwgXCJweFwiKSA6IHQ7XG4gICAgfWZ1bmN0aW9uIFplKGUsIHQsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgdmFyIGEgPSBcIndpZHRoXCIgPT09IHQgPyAxIDogMCxcbiAgICAgICAgICAgIHMgPSAwLFxuICAgICAgICAgICAgdSA9IDA7aWYgKG4gPT09IChyID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiKSkgcmV0dXJuIDA7Zm9yICg7IGEgPCA0OyBhICs9IDIpIHtcbiAgICAgICAgICAgIFwibWFyZ2luXCIgPT09IG4gJiYgKHUgKz0gdy5jc3MoZSwgbiArIG9lW2FdLCAhMCwgaSkpLCByID8gKFwiY29udGVudFwiID09PSBuICYmICh1IC09IHcuY3NzKGUsIFwicGFkZGluZ1wiICsgb2VbYV0sICEwLCBpKSksIFwibWFyZ2luXCIgIT09IG4gJiYgKHUgLT0gdy5jc3MoZSwgXCJib3JkZXJcIiArIG9lW2FdICsgXCJXaWR0aFwiLCAhMCwgaSkpKSA6ICh1ICs9IHcuY3NzKGUsIFwicGFkZGluZ1wiICsgb2VbYV0sICEwLCBpKSwgXCJwYWRkaW5nXCIgIT09IG4gPyB1ICs9IHcuY3NzKGUsIFwiYm9yZGVyXCIgKyBvZVthXSArIFwiV2lkdGhcIiwgITAsIGkpIDogcyArPSB3LmNzcyhlLCBcImJvcmRlclwiICsgb2VbYV0gKyBcIldpZHRoXCIsICEwLCBpKSk7XG4gICAgICAgIH1yZXR1cm4gIXIgJiYgbyA+PSAwICYmICh1ICs9IE1hdGgubWF4KDAsIE1hdGguY2VpbChlW1wib2Zmc2V0XCIgKyB0WzBdLnRvVXBwZXJDYXNlKCkgKyB0LnNsaWNlKDEpXSAtIG8gLSB1IC0gcyAtIC41KSkpLCB1O1xuICAgIH1mdW5jdGlvbiBldChlLCB0LCBuKSB7XG4gICAgICAgIHZhciByID0gJGUoZSksXG4gICAgICAgICAgICBpID0gRmUoZSwgdCwgciksXG4gICAgICAgICAgICBvID0gXCJib3JkZXItYm94XCIgPT09IHcuY3NzKGUsIFwiYm94U2l6aW5nXCIsICExLCByKSxcbiAgICAgICAgICAgIGEgPSBvO2lmIChXZS50ZXN0KGkpKSB7XG4gICAgICAgICAgICBpZiAoIW4pIHJldHVybiBpO2kgPSBcImF1dG9cIjtcbiAgICAgICAgfXJldHVybiBhID0gYSAmJiAoaC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGkgPT09IGUuc3R5bGVbdF0pLCAoXCJhdXRvXCIgPT09IGkgfHwgIXBhcnNlRmxvYXQoaSkgJiYgXCJpbmxpbmVcIiA9PT0gdy5jc3MoZSwgXCJkaXNwbGF5XCIsICExLCByKSkgJiYgKGkgPSBlW1wib2Zmc2V0XCIgKyB0WzBdLnRvVXBwZXJDYXNlKCkgKyB0LnNsaWNlKDEpXSwgYSA9ICEwKSwgKGkgPSBwYXJzZUZsb2F0KGkpIHx8IDApICsgWmUoZSwgdCwgbiB8fCAobyA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiksIGEsIHIsIGkpICsgXCJweFwiO1xuICAgIH13LmV4dGVuZCh7IGNzc0hvb2tzOiB7IG9wYWNpdHk6IHsgZ2V0OiBmdW5jdGlvbiBnZXQoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBGZShlLCBcIm9wYWNpdHlcIik7cmV0dXJuIFwiXCIgPT09IG4gPyBcIjFcIiA6IG47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IH0gfSwgY3NzTnVtYmVyOiB7IGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAhMCwgY29sdW1uQ291bnQ6ICEwLCBmaWxsT3BhY2l0eTogITAsIGZsZXhHcm93OiAhMCwgZmxleFNocmluazogITAsIGZvbnRXZWlnaHQ6ICEwLCBsaW5lSGVpZ2h0OiAhMCwgb3BhY2l0eTogITAsIG9yZGVyOiAhMCwgb3JwaGFuczogITAsIHdpZG93czogITAsIHpJbmRleDogITAsIHpvb206ICEwIH0sIGNzc1Byb3BzOiB7fSwgc3R5bGU6IGZ1bmN0aW9uIHN0eWxlKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgICAgIGlmIChlICYmIDMgIT09IGUubm9kZVR5cGUgJiYgOCAhPT0gZS5ub2RlVHlwZSAmJiBlLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgIHMgPSBHKHQpLFxuICAgICAgICAgICAgICAgICAgICB1ID0gWGUudGVzdCh0KSxcbiAgICAgICAgICAgICAgICAgICAgbCA9IGUuc3R5bGU7aWYgKHUgfHwgKHQgPSBKZShzKSksIGEgPSB3LmNzc0hvb2tzW3RdIHx8IHcuY3NzSG9va3Nbc10sIHZvaWQgMCA9PT0gbikgcmV0dXJuIGEgJiYgXCJnZXRcIiBpbiBhICYmIHZvaWQgMCAhPT0gKGkgPSBhLmdldChlLCAhMSwgcikpID8gaSA6IGxbdF07XCJzdHJpbmdcIiA9PSAobyA9IHR5cGVvZiBuID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YobikpICYmIChpID0gaWUuZXhlYyhuKSkgJiYgaVsxXSAmJiAobiA9IHVlKGUsIHQsIGkpLCBvID0gXCJudW1iZXJcIiksIG51bGwgIT0gbiAmJiBuID09PSBuICYmIChcIm51bWJlclwiID09PSBvICYmIChuICs9IGkgJiYgaVszXSB8fCAody5jc3NOdW1iZXJbc10gPyBcIlwiIDogXCJweFwiKSksIGguY2xlYXJDbG9uZVN0eWxlIHx8IFwiXCIgIT09IG4gfHwgMCAhPT0gdC5pbmRleE9mKFwiYmFja2dyb3VuZFwiKSB8fCAobFt0XSA9IFwiaW5oZXJpdFwiKSwgYSAmJiBcInNldFwiIGluIGEgJiYgdm9pZCAwID09PSAobiA9IGEuc2V0KGUsIG4sIHIpKSB8fCAodSA/IGwuc2V0UHJvcGVydHkodCwgbikgOiBsW3RdID0gbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjc3M6IGZ1bmN0aW9uIGNzcyhlLCB0LCBuLCByKSB7XG4gICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICBvLFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgcyA9IEcodCk7cmV0dXJuIFhlLnRlc3QodCkgfHwgKHQgPSBKZShzKSksIChhID0gdy5jc3NIb29rc1t0XSB8fCB3LmNzc0hvb2tzW3NdKSAmJiBcImdldFwiIGluIGEgJiYgKGkgPSBhLmdldChlLCAhMCwgbikpLCB2b2lkIDAgPT09IGkgJiYgKGkgPSBGZShlLCB0LCByKSksIFwibm9ybWFsXCIgPT09IGkgJiYgdCBpbiBWZSAmJiAoaSA9IFZlW3RdKSwgXCJcIiA9PT0gbiB8fCBuID8gKG8gPSBwYXJzZUZsb2F0KGkpLCAhMCA9PT0gbiB8fCBpc0Zpbml0ZShvKSA/IG8gfHwgMCA6IGkpIDogaTtcbiAgICAgICAgfSB9KSwgdy5lYWNoKFtcImhlaWdodFwiLCBcIndpZHRoXCJdLCBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB3LmNzc0hvb2tzW3RdID0geyBnZXQ6IGZ1bmN0aW9uIGdldChlLCBuLCByKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4pIHJldHVybiAhemUudGVzdCh3LmNzcyhlLCBcImRpc3BsYXlcIikpIHx8IGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggJiYgZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA/IGV0KGUsIHQsIHIpIDogc2UoZSwgVWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0KGUsIHQsIHIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgc2V0OiBmdW5jdGlvbiBzZXQoZSwgbiwgcikge1xuICAgICAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgICAgICBvID0gJGUoZSksXG4gICAgICAgICAgICAgICAgICAgIGEgPSBcImJvcmRlci1ib3hcIiA9PT0gdy5jc3MoZSwgXCJib3hTaXppbmdcIiwgITEsIG8pLFxuICAgICAgICAgICAgICAgICAgICBzID0gciAmJiBaZShlLCB0LCByLCBhLCBvKTtyZXR1cm4gYSAmJiBoLnNjcm9sbGJveFNpemUoKSA9PT0gby5wb3NpdGlvbiAmJiAocyAtPSBNYXRoLmNlaWwoZVtcIm9mZnNldFwiICsgdFswXS50b1VwcGVyQ2FzZSgpICsgdC5zbGljZSgxKV0gLSBwYXJzZUZsb2F0KG9bdF0pIC0gWmUoZSwgdCwgXCJib3JkZXJcIiwgITEsIG8pIC0gLjUpKSwgcyAmJiAoaSA9IGllLmV4ZWMobikpICYmIFwicHhcIiAhPT0gKGlbM10gfHwgXCJweFwiKSAmJiAoZS5zdHlsZVt0XSA9IG4sIG4gPSB3LmNzcyhlLCB0KSksIEtlKGUsIG4sIHMpO1xuICAgICAgICAgICAgfSB9O1xuICAgIH0pLCB3LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBfZShoLnJlbGlhYmxlTWFyZ2luTGVmdCwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgaWYgKHQpIHJldHVybiAocGFyc2VGbG9hdChGZShlLCBcIm1hcmdpbkxlZnRcIikpIHx8IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIHNlKGUsIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgICB9KSkgKyBcInB4XCI7XG4gICAgfSksIHcuZWFjaCh7IG1hcmdpbjogXCJcIiwgcGFkZGluZzogXCJcIiwgYm9yZGVyOiBcIldpZHRoXCIgfSwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdy5jc3NIb29rc1tlICsgdF0gPSB7IGV4cGFuZDogZnVuY3Rpb24gZXhwYW5kKG4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCwgaSA9IHt9LCBvID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgbiA/IG4uc3BsaXQoXCIgXCIpIDogW25dOyByIDwgNDsgcisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlbZSArIG9lW3JdICsgdF0gPSBvW3JdIHx8IG9bciAtIDJdIHx8IG9bMF07XG4gICAgICAgICAgICAgICAgfXJldHVybiBpO1xuICAgICAgICAgICAgfSB9LCBcIm1hcmdpblwiICE9PSBlICYmICh3LmNzc0hvb2tzW2UgKyB0XS5zZXQgPSBLZSk7XG4gICAgfSksIHcuZm4uZXh0ZW5kKHsgY3NzOiBmdW5jdGlvbiBjc3MoZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIHoodGhpcywgZnVuY3Rpb24gKGUsIHQsIG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgcixcbiAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBhID0gMDtpZiAoQXJyYXkuaXNBcnJheSh0KSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHIgPSAkZShlKSwgaSA9IHQubGVuZ3RoOyBhIDwgaTsgYSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvW3RbYV1dID0gdy5jc3MoZSwgdFthXSwgITEsIHIpO1xuICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIG87XG4gICAgICAgICAgICAgICAgfXJldHVybiB2b2lkIDAgIT09IG4gPyB3LnN0eWxlKGUsIHQsIG4pIDogdy5jc3MoZSwgdCk7XG4gICAgICAgICAgICB9LCBlLCB0LCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG4gICAgICAgIH0gfSk7ZnVuY3Rpb24gdHQoZSwgdCwgbiwgciwgaSkge1xuICAgICAgICByZXR1cm4gbmV3IHR0LnByb3RvdHlwZS5pbml0KGUsIHQsIG4sIHIsIGkpO1xuICAgIH13LlR3ZWVuID0gdHQsIHR0LnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IHR0LCBpbml0OiBmdW5jdGlvbiBpbml0KGUsIHQsIG4sIHIsIGksIG8pIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbSA9IGUsIHRoaXMucHJvcCA9IG4sIHRoaXMuZWFzaW5nID0gaSB8fCB3LmVhc2luZy5fZGVmYXVsdCwgdGhpcy5vcHRpb25zID0gdCwgdGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKSwgdGhpcy5lbmQgPSByLCB0aGlzLnVuaXQgPSBvIHx8ICh3LmNzc051bWJlcltuXSA/IFwiXCIgOiBcInB4XCIpO1xuICAgICAgICB9LCBjdXI6IGZ1bmN0aW9uIGN1cigpIHtcbiAgICAgICAgICAgIHZhciBlID0gdHQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIGUgJiYgZS5nZXQgPyBlLmdldCh0aGlzKSA6IHR0LnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyk7XG4gICAgICAgIH0sIHJ1bjogZnVuY3Rpb24gcnVuKGUpIHtcbiAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgIG4gPSB0dC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uID8gdGhpcy5wb3MgPSB0ID0gdy5lYXNpbmdbdGhpcy5lYXNpbmddKGUsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIGUsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvbikgOiB0aGlzLnBvcyA9IHQgPSBlLCB0aGlzLm5vdyA9ICh0aGlzLmVuZCAtIHRoaXMuc3RhcnQpICogdCArIHRoaXMuc3RhcnQsIHRoaXMub3B0aW9ucy5zdGVwICYmIHRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyksIG4gJiYgbi5zZXQgPyBuLnNldCh0aGlzKSA6IHR0LnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksIHRoaXM7XG4gICAgICAgIH0gfSwgdHQucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gdHQucHJvdG90eXBlLCB0dC5wcm9wSG9va3MgPSB7IF9kZWZhdWx0OiB7IGdldDogZnVuY3Rpb24gZ2V0KGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdDtyZXR1cm4gMSAhPT0gZS5lbGVtLm5vZGVUeXBlIHx8IG51bGwgIT0gZS5lbGVtW2UucHJvcF0gJiYgbnVsbCA9PSBlLmVsZW0uc3R5bGVbZS5wcm9wXSA/IGUuZWxlbVtlLnByb3BdIDogKHQgPSB3LmNzcyhlLmVsZW0sIGUucHJvcCwgXCJcIikpICYmIFwiYXV0b1wiICE9PSB0ID8gdCA6IDA7XG4gICAgICAgICAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldChlKSB7XG4gICAgICAgICAgICAgICAgdy5meC5zdGVwW2UucHJvcF0gPyB3LmZ4LnN0ZXBbZS5wcm9wXShlKSA6IDEgIT09IGUuZWxlbS5ub2RlVHlwZSB8fCBudWxsID09IGUuZWxlbS5zdHlsZVt3LmNzc1Byb3BzW2UucHJvcF1dICYmICF3LmNzc0hvb2tzW2UucHJvcF0gPyBlLmVsZW1bZS5wcm9wXSA9IGUubm93IDogdy5zdHlsZShlLmVsZW0sIGUucHJvcCwgZS5ub3cgKyBlLnVuaXQpO1xuICAgICAgICAgICAgfSB9IH0sIHR0LnByb3BIb29rcy5zY3JvbGxUb3AgPSB0dC5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHsgc2V0OiBmdW5jdGlvbiBzZXQoZSkge1xuICAgICAgICAgICAgZS5lbGVtLm5vZGVUeXBlICYmIGUuZWxlbS5wYXJlbnROb2RlICYmIChlLmVsZW1bZS5wcm9wXSA9IGUubm93KTtcbiAgICAgICAgfSB9LCB3LmVhc2luZyA9IHsgbGluZWFyOiBmdW5jdGlvbiBsaW5lYXIoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH0sIHN3aW5nOiBmdW5jdGlvbiBzd2luZyhlKSB7XG4gICAgICAgICAgICByZXR1cm4gLjUgLSBNYXRoLmNvcyhlICogTWF0aC5QSSkgLyAyO1xuICAgICAgICB9LCBfZGVmYXVsdDogXCJzd2luZ1wiIH0sIHcuZnggPSB0dC5wcm90b3R5cGUuaW5pdCwgdy5meC5zdGVwID0ge307dmFyIG50LFxuICAgICAgICBydCxcbiAgICAgICAgaXQgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG4gICAgICAgIG90ID0gL3F1ZXVlSG9va3MkLztmdW5jdGlvbiBhdCgpIHtcbiAgICAgICAgcnQgJiYgKCExID09PSByLmhpZGRlbiAmJiBlLnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IGUucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGF0KSA6IGUuc2V0VGltZW91dChhdCwgdy5meC5pbnRlcnZhbCksIHcuZngudGljaygpKTtcbiAgICB9ZnVuY3Rpb24gc3QoKSB7XG4gICAgICAgIHJldHVybiBlLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbnQgPSB2b2lkIDA7XG4gICAgICAgIH0pLCBudCA9IERhdGUubm93KCk7XG4gICAgfWZ1bmN0aW9uIHV0KGUsIHQpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICByID0gMCxcbiAgICAgICAgICAgIGkgPSB7IGhlaWdodDogZSB9O2ZvciAodCA9IHQgPyAxIDogMDsgciA8IDQ7IHIgKz0gMiAtIHQpIHtcbiAgICAgICAgICAgIGlbXCJtYXJnaW5cIiArIChuID0gb2Vbcl0pXSA9IGlbXCJwYWRkaW5nXCIgKyBuXSA9IGU7XG4gICAgICAgIH1yZXR1cm4gdCAmJiAoaS5vcGFjaXR5ID0gaS53aWR0aCA9IGUpLCBpO1xuICAgIH1mdW5jdGlvbiBsdChlLCB0LCBuKSB7XG4gICAgICAgIGZvciAodmFyIHIsIGkgPSAocHQudHdlZW5lcnNbdF0gfHwgW10pLmNvbmNhdChwdC50d2VlbmVyc1tcIipcIl0pLCBvID0gMCwgYSA9IGkubGVuZ3RoOyBvIDwgYTsgbysrKSB7XG4gICAgICAgICAgICBpZiAociA9IGlbb10uY2FsbChuLCB0LCBlKSkgcmV0dXJuIHI7XG4gICAgICAgIH1cbiAgICB9ZnVuY3Rpb24gY3QoZSwgdCwgbikge1xuICAgICAgICB2YXIgcixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICB1LFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGMsXG4gICAgICAgICAgICBmID0gXCJ3aWR0aFwiIGluIHQgfHwgXCJoZWlnaHRcIiBpbiB0LFxuICAgICAgICAgICAgcCA9IHRoaXMsXG4gICAgICAgICAgICBkID0ge30sXG4gICAgICAgICAgICBoID0gZS5zdHlsZSxcbiAgICAgICAgICAgIGcgPSBlLm5vZGVUeXBlICYmIGFlKGUpLFxuICAgICAgICAgICAgeSA9IEouZ2V0KGUsIFwiZnhzaG93XCIpO24ucXVldWUgfHwgKG51bGwgPT0gKGEgPSB3Ll9xdWV1ZUhvb2tzKGUsIFwiZnhcIikpLnVucXVldWVkICYmIChhLnVucXVldWVkID0gMCwgcyA9IGEuZW1wdHkuZmlyZSwgYS5lbXB0eS5maXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYS51bnF1ZXVlZCB8fCBzKCk7XG4gICAgICAgIH0pLCBhLnVucXVldWVkKyssIHAuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHAuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhLnVucXVldWVkLS0sIHcucXVldWUoZSwgXCJmeFwiKS5sZW5ndGggfHwgYS5lbXB0eS5maXJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO2ZvciAociBpbiB0KSB7XG4gICAgICAgICAgICBpZiAoaSA9IHRbcl0sIGl0LnRlc3QoaSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlIHRbcl0sIG8gPSBvIHx8IFwidG9nZ2xlXCIgPT09IGksIGkgPT09IChnID8gXCJoaWRlXCIgOiBcInNob3dcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic2hvd1wiICE9PSBpIHx8ICF5IHx8IHZvaWQgMCA9PT0geVtyXSkgY29udGludWU7ZyA9ICEwO1xuICAgICAgICAgICAgICAgIH1kW3JdID0geSAmJiB5W3JdIHx8IHcuc3R5bGUoZSwgcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1pZiAoKHUgPSAhdy5pc0VtcHR5T2JqZWN0KHQpKSB8fCAhdy5pc0VtcHR5T2JqZWN0KGQpKSB7XG4gICAgICAgICAgICBmICYmIDEgPT09IGUubm9kZVR5cGUgJiYgKG4ub3ZlcmZsb3cgPSBbaC5vdmVyZmxvdywgaC5vdmVyZmxvd1gsIGgub3ZlcmZsb3dZXSwgbnVsbCA9PSAobCA9IHkgJiYgeS5kaXNwbGF5KSAmJiAobCA9IEouZ2V0KGUsIFwiZGlzcGxheVwiKSksIFwibm9uZVwiID09PSAoYyA9IHcuY3NzKGUsIFwiZGlzcGxheVwiKSkgJiYgKGwgPyBjID0gbCA6IChmZShbZV0sICEwKSwgbCA9IGUuc3R5bGUuZGlzcGxheSB8fCBsLCBjID0gdy5jc3MoZSwgXCJkaXNwbGF5XCIpLCBmZShbZV0pKSksIChcImlubGluZVwiID09PSBjIHx8IFwiaW5saW5lLWJsb2NrXCIgPT09IGMgJiYgbnVsbCAhPSBsKSAmJiBcIm5vbmVcIiA9PT0gdy5jc3MoZSwgXCJmbG9hdFwiKSAmJiAodSB8fCAocC5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBoLmRpc3BsYXkgPSBsO1xuICAgICAgICAgICAgfSksIG51bGwgPT0gbCAmJiAoYyA9IGguZGlzcGxheSwgbCA9IFwibm9uZVwiID09PSBjID8gXCJcIiA6IGMpKSwgaC5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIikpLCBuLm92ZXJmbG93ICYmIChoLm92ZXJmbG93ID0gXCJoaWRkZW5cIiwgcC5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGgub3ZlcmZsb3cgPSBuLm92ZXJmbG93WzBdLCBoLm92ZXJmbG93WCA9IG4ub3ZlcmZsb3dbMV0sIGgub3ZlcmZsb3dZID0gbi5vdmVyZmxvd1syXTtcbiAgICAgICAgICAgIH0pKSwgdSA9ICExO2ZvciAociBpbiBkKSB7XG4gICAgICAgICAgICAgICAgdSB8fCAoeSA/IFwiaGlkZGVuXCIgaW4geSAmJiAoZyA9IHkuaGlkZGVuKSA6IHkgPSBKLmFjY2VzcyhlLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IGwgfSksIG8gJiYgKHkuaGlkZGVuID0gIWcpLCBnICYmIGZlKFtlXSwgITApLCBwLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBnIHx8IGZlKFtlXSksIEoucmVtb3ZlKGUsIFwiZnhzaG93XCIpO2ZvciAociBpbiBkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3LnN0eWxlKGUsIHIsIGRbcl0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpLCB1ID0gbHQoZyA/IHlbcl0gOiAwLCByLCBwKSwgciBpbiB5IHx8ICh5W3JdID0gdS5zdGFydCwgZyAmJiAodS5lbmQgPSB1LnN0YXJ0LCB1LnN0YXJ0ID0gMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfWZ1bmN0aW9uIGZ0KGUsIHQpIHtcbiAgICAgICAgdmFyIG4sIHIsIGksIG8sIGE7Zm9yIChuIGluIGUpIHtcbiAgICAgICAgICAgIGlmIChyID0gRyhuKSwgaSA9IHRbcl0sIG8gPSBlW25dLCBBcnJheS5pc0FycmF5KG8pICYmIChpID0gb1sxXSwgbyA9IGVbbl0gPSBvWzBdKSwgbiAhPT0gciAmJiAoZVtyXSA9IG8sIGRlbGV0ZSBlW25dKSwgKGEgPSB3LmNzc0hvb2tzW3JdKSAmJiBcImV4cGFuZFwiIGluIGEpIHtcbiAgICAgICAgICAgICAgICBvID0gYS5leHBhbmQobyksIGRlbGV0ZSBlW3JdO2ZvciAobiBpbiBvKSB7XG4gICAgICAgICAgICAgICAgICAgIG4gaW4gZSB8fCAoZVtuXSA9IG9bbl0sIHRbbl0gPSBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgdFtyXSA9IGk7XG4gICAgICAgIH1cbiAgICB9ZnVuY3Rpb24gcHQoZSwgdCwgbikge1xuICAgICAgICB2YXIgcixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvID0gMCxcbiAgICAgICAgICAgIGEgPSBwdC5wcmVmaWx0ZXJzLmxlbmd0aCxcbiAgICAgICAgICAgIHMgPSB3LkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB1LmVsZW07XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgdSA9IGZ1bmN0aW9uIHUoKSB7XG4gICAgICAgICAgICBpZiAoaSkgcmV0dXJuICExO2ZvciAodmFyIHQgPSBudCB8fCBzdCgpLCBuID0gTWF0aC5tYXgoMCwgbC5zdGFydFRpbWUgKyBsLmR1cmF0aW9uIC0gdCksIHIgPSAxIC0gKG4gLyBsLmR1cmF0aW9uIHx8IDApLCBvID0gMCwgYSA9IGwudHdlZW5zLmxlbmd0aDsgbyA8IGE7IG8rKykge1xuICAgICAgICAgICAgICAgIGwudHdlZW5zW29dLnJ1bihyKTtcbiAgICAgICAgICAgIH1yZXR1cm4gcy5ub3RpZnlXaXRoKGUsIFtsLCByLCBuXSksIHIgPCAxICYmIGEgPyBuIDogKGEgfHwgcy5ub3RpZnlXaXRoKGUsIFtsLCAxLCAwXSksIHMucmVzb2x2ZVdpdGgoZSwgW2xdKSwgITEpO1xuICAgICAgICB9LFxuICAgICAgICAgICAgbCA9IHMucHJvbWlzZSh7IGVsZW06IGUsIHByb3BzOiB3LmV4dGVuZCh7fSwgdCksIG9wdHM6IHcuZXh0ZW5kKCEwLCB7IHNwZWNpYWxFYXNpbmc6IHt9LCBlYXNpbmc6IHcuZWFzaW5nLl9kZWZhdWx0IH0sIG4pLCBvcmlnaW5hbFByb3BlcnRpZXM6IHQsIG9yaWdpbmFsT3B0aW9uczogbiwgc3RhcnRUaW1lOiBudCB8fCBzdCgpLCBkdXJhdGlvbjogbi5kdXJhdGlvbiwgdHdlZW5zOiBbXSwgY3JlYXRlVHdlZW46IGZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKHQsIG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHcuVHdlZW4oZSwgbC5vcHRzLCB0LCBuLCBsLm9wdHMuc3BlY2lhbEVhc2luZ1t0XSB8fCBsLm9wdHMuZWFzaW5nKTtyZXR1cm4gbC50d2VlbnMucHVzaChyKSwgcjtcbiAgICAgICAgICAgIH0sIHN0b3A6IGZ1bmN0aW9uIHN0b3AodCkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gMCxcbiAgICAgICAgICAgICAgICAgICAgciA9IHQgPyBsLnR3ZWVucy5sZW5ndGggOiAwO2lmIChpKSByZXR1cm4gdGhpcztmb3IgKGkgPSAhMDsgbiA8IHI7IG4rKykge1xuICAgICAgICAgICAgICAgICAgICBsLnR3ZWVuc1tuXS5ydW4oMSk7XG4gICAgICAgICAgICAgICAgfXJldHVybiB0ID8gKHMubm90aWZ5V2l0aChlLCBbbCwgMSwgMF0pLCBzLnJlc29sdmVXaXRoKGUsIFtsLCB0XSkpIDogcy5yZWplY3RXaXRoKGUsIFtsLCB0XSksIHRoaXM7XG4gICAgICAgICAgICB9IH0pLFxuICAgICAgICAgICAgYyA9IGwucHJvcHM7Zm9yIChmdChjLCBsLm9wdHMuc3BlY2lhbEVhc2luZyk7IG8gPCBhOyBvKyspIHtcbiAgICAgICAgICAgIGlmIChyID0gcHQucHJlZmlsdGVyc1tvXS5jYWxsKGwsIGUsIGMsIGwub3B0cykpIHJldHVybiBnKHIuc3RvcCkgJiYgKHcuX3F1ZXVlSG9va3MobC5lbGVtLCBsLm9wdHMucXVldWUpLnN0b3AgPSByLnN0b3AuYmluZChyKSksIHI7XG4gICAgICAgIH1yZXR1cm4gdy5tYXAoYywgbHQsIGwpLCBnKGwub3B0cy5zdGFydCkgJiYgbC5vcHRzLnN0YXJ0LmNhbGwoZSwgbCksIGwucHJvZ3Jlc3MobC5vcHRzLnByb2dyZXNzKS5kb25lKGwub3B0cy5kb25lLCBsLm9wdHMuY29tcGxldGUpLmZhaWwobC5vcHRzLmZhaWwpLmFsd2F5cyhsLm9wdHMuYWx3YXlzKSwgdy5meC50aW1lcih3LmV4dGVuZCh1LCB7IGVsZW06IGUsIGFuaW06IGwsIHF1ZXVlOiBsLm9wdHMucXVldWUgfSkpLCBsO1xuICAgIH13LkFuaW1hdGlvbiA9IHcuZXh0ZW5kKHB0LCB7IHR3ZWVuZXJzOiB7IFwiKlwiOiBbZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMuY3JlYXRlVHdlZW4oZSwgdCk7cmV0dXJuIHVlKG4uZWxlbSwgZSwgaWUuZXhlYyh0KSwgbiksIG47XG4gICAgICAgICAgICB9XSB9LCB0d2VlbmVyOiBmdW5jdGlvbiB0d2VlbmVyKGUsIHQpIHtcbiAgICAgICAgICAgIGcoZSkgPyAodCA9IGUsIGUgPSBbXCIqXCJdKSA6IGUgPSBlLm1hdGNoKE0pO2ZvciAodmFyIG4sIHIgPSAwLCBpID0gZS5sZW5ndGg7IHIgPCBpOyByKyspIHtcbiAgICAgICAgICAgICAgICBuID0gZVtyXSwgcHQudHdlZW5lcnNbbl0gPSBwdC50d2VlbmVyc1tuXSB8fCBbXSwgcHQudHdlZW5lcnNbbl0udW5zaGlmdCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgcHJlZmlsdGVyczogW2N0XSwgcHJlZmlsdGVyOiBmdW5jdGlvbiBwcmVmaWx0ZXIoZSwgdCkge1xuICAgICAgICAgICAgdCA/IHB0LnByZWZpbHRlcnMudW5zaGlmdChlKSA6IHB0LnByZWZpbHRlcnMucHVzaChlKTtcbiAgICAgICAgfSB9KSwgdy5zcGVlZCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7XG4gICAgICAgIHZhciByID0gZSAmJiBcIm9iamVjdFwiID09ICh0eXBlb2YgZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGUpKSA/IHcuZXh0ZW5kKHt9LCBlKSA6IHsgY29tcGxldGU6IG4gfHwgIW4gJiYgdCB8fCBnKGUpICYmIGUsIGR1cmF0aW9uOiBlLCBlYXNpbmc6IG4gJiYgdCB8fCB0ICYmICFnKHQpICYmIHQgfTtyZXR1cm4gdy5meC5vZmYgPyByLmR1cmF0aW9uID0gMCA6IFwibnVtYmVyXCIgIT0gdHlwZW9mIHIuZHVyYXRpb24gJiYgKHIuZHVyYXRpb24gaW4gdy5meC5zcGVlZHMgPyByLmR1cmF0aW9uID0gdy5meC5zcGVlZHNbci5kdXJhdGlvbl0gOiByLmR1cmF0aW9uID0gdy5meC5zcGVlZHMuX2RlZmF1bHQpLCBudWxsICE9IHIucXVldWUgJiYgITAgIT09IHIucXVldWUgfHwgKHIucXVldWUgPSBcImZ4XCIpLCByLm9sZCA9IHIuY29tcGxldGUsIHIuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnKHIub2xkKSAmJiByLm9sZC5jYWxsKHRoaXMpLCByLnF1ZXVlICYmIHcuZGVxdWV1ZSh0aGlzLCByLnF1ZXVlKTtcbiAgICAgICAgfSwgcjtcbiAgICB9LCB3LmZuLmV4dGVuZCh7IGZhZGVUbzogZnVuY3Rpb24gZmFkZVRvKGUsIHQsIG4sIHIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihhZSkuY3NzKFwib3BhY2l0eVwiLCAwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7IG9wYWNpdHk6IHQgfSwgZSwgbiwgcik7XG4gICAgICAgIH0sIGFuaW1hdGU6IGZ1bmN0aW9uIGFuaW1hdGUoZSwgdCwgbiwgcikge1xuICAgICAgICAgICAgdmFyIGkgPSB3LmlzRW1wdHlPYmplY3QoZSksXG4gICAgICAgICAgICAgICAgbyA9IHcuc3BlZWQodCwgbiwgciksXG4gICAgICAgICAgICAgICAgYSA9IGZ1bmN0aW9uIGEoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBwdCh0aGlzLCB3LmV4dGVuZCh7fSwgZSksIG8pOyhpIHx8IEouZ2V0KHRoaXMsIFwiZmluaXNoXCIpKSAmJiB0LnN0b3AoITApO1xuICAgICAgICAgICAgfTtyZXR1cm4gYS5maW5pc2ggPSBhLCBpIHx8ICExID09PSBvLnF1ZXVlID8gdGhpcy5lYWNoKGEpIDogdGhpcy5xdWV1ZShvLnF1ZXVlLCBhKTtcbiAgICAgICAgfSwgc3RvcDogZnVuY3Rpb24gc3RvcChlLCB0LCBuKSB7XG4gICAgICAgICAgICB2YXIgciA9IGZ1bmN0aW9uIHIoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZS5zdG9wO2RlbGV0ZSBlLnN0b3AsIHQobik7XG4gICAgICAgICAgICB9O3JldHVybiBcInN0cmluZ1wiICE9IHR5cGVvZiBlICYmIChuID0gdCwgdCA9IGUsIGUgPSB2b2lkIDApLCB0ICYmICExICE9PSBlICYmIHRoaXMucXVldWUoZSB8fCBcImZ4XCIsIFtdKSwgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9ICEwLFxuICAgICAgICAgICAgICAgICAgICBpID0gbnVsbCAhPSBlICYmIGUgKyBcInF1ZXVlSG9va3NcIixcbiAgICAgICAgICAgICAgICAgICAgbyA9IHcudGltZXJzLFxuICAgICAgICAgICAgICAgICAgICBhID0gSi5nZXQodGhpcyk7aWYgKGkpIGFbaV0gJiYgYVtpXS5zdG9wICYmIHIoYVtpXSk7ZWxzZSBmb3IgKGkgaW4gYSkge1xuICAgICAgICAgICAgICAgICAgICBhW2ldICYmIGFbaV0uc3RvcCAmJiBvdC50ZXN0KGkpICYmIHIoYVtpXSk7XG4gICAgICAgICAgICAgICAgfWZvciAoaSA9IG8ubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICAgIG9baV0uZWxlbSAhPT0gdGhpcyB8fCBudWxsICE9IGUgJiYgb1tpXS5xdWV1ZSAhPT0gZSB8fCAob1tpXS5hbmltLnN0b3AobiksIHQgPSAhMSwgby5zcGxpY2UoaSwgMSkpO1xuICAgICAgICAgICAgICAgIH0hdCAmJiBuIHx8IHcuZGVxdWV1ZSh0aGlzLCBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaChlKSB7XG4gICAgICAgICAgICByZXR1cm4gITEgIT09IGUgJiYgKGUgPSBlIHx8IFwiZnhcIiksIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgICAgIG4gPSBKLmdldCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgciA9IG5bZSArIFwicXVldWVcIl0sXG4gICAgICAgICAgICAgICAgICAgIGkgPSBuW2UgKyBcInF1ZXVlSG9va3NcIl0sXG4gICAgICAgICAgICAgICAgICAgIG8gPSB3LnRpbWVycyxcbiAgICAgICAgICAgICAgICAgICAgYSA9IHIgPyByLmxlbmd0aCA6IDA7Zm9yIChuLmZpbmlzaCA9ICEwLCB3LnF1ZXVlKHRoaXMsIGUsIFtdKSwgaSAmJiBpLnN0b3AgJiYgaS5zdG9wLmNhbGwodGhpcywgITApLCB0ID0gby5sZW5ndGg7IHQtLTspIHtcbiAgICAgICAgICAgICAgICAgICAgb1t0XS5lbGVtID09PSB0aGlzICYmIG9bdF0ucXVldWUgPT09IGUgJiYgKG9bdF0uYW5pbS5zdG9wKCEwKSwgby5zcGxpY2UodCwgMSkpO1xuICAgICAgICAgICAgICAgIH1mb3IgKHQgPSAwOyB0IDwgYTsgdCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJbdF0gJiYgclt0XS5maW5pc2ggJiYgclt0XS5maW5pc2guY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9ZGVsZXRlIG4uZmluaXNoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gfSksIHcuZWFjaChbXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiXSwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdmFyIG4gPSB3LmZuW3RdO3cuZm5bdF0gPSBmdW5jdGlvbiAoZSwgciwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSB8fCBcImJvb2xlYW5cIiA9PSB0eXBlb2YgZSA/IG4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRoaXMuYW5pbWF0ZSh1dCh0LCAhMCksIGUsIHIsIGkpO1xuICAgICAgICB9O1xuICAgIH0pLCB3LmVhY2goeyBzbGlkZURvd246IHV0KFwic2hvd1wiKSwgc2xpZGVVcDogdXQoXCJoaWRlXCIpLCBzbGlkZVRvZ2dsZTogdXQoXCJ0b2dnbGVcIiksIGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LCBmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sIGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9IH0sIGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHcuZm5bZV0gPSBmdW5jdGlvbiAoZSwgbiwgcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZSh0LCBlLCBuLCByKTtcbiAgICAgICAgfTtcbiAgICB9KSwgdy50aW1lcnMgPSBbXSwgdy5meC50aWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSxcbiAgICAgICAgICAgIHQgPSAwLFxuICAgICAgICAgICAgbiA9IHcudGltZXJzO2ZvciAobnQgPSBEYXRlLm5vdygpOyB0IDwgbi5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgKGUgPSBuW3RdKSgpIHx8IG5bdF0gIT09IGUgfHwgbi5zcGxpY2UodC0tLCAxKTtcbiAgICAgICAgfW4ubGVuZ3RoIHx8IHcuZnguc3RvcCgpLCBudCA9IHZvaWQgMDtcbiAgICB9LCB3LmZ4LnRpbWVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdy50aW1lcnMucHVzaChlKSwgdy5meC5zdGFydCgpO1xuICAgIH0sIHcuZnguaW50ZXJ2YWwgPSAxMywgdy5meC5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcnQgfHwgKHJ0ID0gITAsIGF0KCkpO1xuICAgIH0sIHcuZnguc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcnQgPSBudWxsO1xuICAgIH0sIHcuZnguc3BlZWRzID0geyBzbG93OiA2MDAsIGZhc3Q6IDIwMCwgX2RlZmF1bHQ6IDQwMCB9LCB3LmZuLmRlbGF5ID0gZnVuY3Rpb24gKHQsIG4pIHtcbiAgICAgICAgcmV0dXJuIHQgPSB3LmZ4ID8gdy5meC5zcGVlZHNbdF0gfHwgdCA6IHQsIG4gPSBuIHx8IFwiZnhcIiwgdGhpcy5xdWV1ZShuLCBmdW5jdGlvbiAobiwgcikge1xuICAgICAgICAgICAgdmFyIGkgPSBlLnNldFRpbWVvdXQobiwgdCk7ci5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGUuY2xlYXJUaW1lb3V0KGkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLFxuICAgICAgICAgICAgdCA9IHIuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKS5hcHBlbmRDaGlsZChyLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpO2UudHlwZSA9IFwiY2hlY2tib3hcIiwgaC5jaGVja09uID0gXCJcIiAhPT0gZS52YWx1ZSwgaC5vcHRTZWxlY3RlZCA9IHQuc2VsZWN0ZWQsIChlID0gci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnZhbHVlID0gXCJ0XCIsIGUudHlwZSA9IFwicmFkaW9cIiwgaC5yYWRpb1ZhbHVlID0gXCJ0XCIgPT09IGUudmFsdWU7XG4gICAgfSgpO3ZhciBkdCxcbiAgICAgICAgaHQgPSB3LmV4cHIuYXR0ckhhbmRsZTt3LmZuLmV4dGVuZCh7IGF0dHI6IGZ1bmN0aW9uIGF0dHIoZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIHoodGhpcywgdy5hdHRyLCBlLCB0LCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG4gICAgICAgIH0sIHJlbW92ZUF0dHI6IGZ1bmN0aW9uIHJlbW92ZUF0dHIoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdy5yZW1vdmVBdHRyKHRoaXMsIGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gfSksIHcuZXh0ZW5kKHsgYXR0cjogZnVuY3Rpb24gYXR0cihlLCB0LCBuKSB7XG4gICAgICAgICAgICB2YXIgcixcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG8gPSBlLm5vZGVUeXBlO2lmICgzICE9PSBvICYmIDggIT09IG8gJiYgMiAhPT0gbykgcmV0dXJuIFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGUuZ2V0QXR0cmlidXRlID8gdy5wcm9wKGUsIHQsIG4pIDogKDEgPT09IG8gJiYgdy5pc1hNTERvYyhlKSB8fCAoaSA9IHcuYXR0ckhvb2tzW3QudG9Mb3dlckNhc2UoKV0gfHwgKHcuZXhwci5tYXRjaC5ib29sLnRlc3QodCkgPyBkdCA6IHZvaWQgMCkpLCB2b2lkIDAgIT09IG4gPyBudWxsID09PSBuID8gdm9pZCB3LnJlbW92ZUF0dHIoZSwgdCkgOiBpICYmIFwic2V0XCIgaW4gaSAmJiB2b2lkIDAgIT09IChyID0gaS5zZXQoZSwgbiwgdCkpID8gciA6IChlLnNldEF0dHJpYnV0ZSh0LCBuICsgXCJcIiksIG4pIDogaSAmJiBcImdldFwiIGluIGkgJiYgbnVsbCAhPT0gKHIgPSBpLmdldChlLCB0KSkgPyByIDogbnVsbCA9PSAociA9IHcuZmluZC5hdHRyKGUsIHQpKSA/IHZvaWQgMCA6IHIpO1xuICAgICAgICB9LCBhdHRySG9va3M6IHsgdHlwZTogeyBzZXQ6IGZ1bmN0aW9uIHNldChlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaC5yYWRpb1ZhbHVlICYmIFwicmFkaW9cIiA9PT0gdCAmJiBOKGUsIFwiaW5wdXRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHQpLCBuICYmIChlLnZhbHVlID0gbiksIHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IH0gfSwgcmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cihlLCB0KSB7XG4gICAgICAgICAgICB2YXIgbixcbiAgICAgICAgICAgICAgICByID0gMCxcbiAgICAgICAgICAgICAgICBpID0gdCAmJiB0Lm1hdGNoKE0pO2lmIChpICYmIDEgPT09IGUubm9kZVR5cGUpIHdoaWxlIChuID0gaVtyKytdKSB7XG4gICAgICAgICAgICAgICAgZS5yZW1vdmVBdHRyaWJ1dGUobik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gfSksIGR0ID0geyBzZXQ6IGZ1bmN0aW9uIHNldChlLCB0LCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gITEgPT09IHQgPyB3LnJlbW92ZUF0dHIoZSwgbikgOiBlLnNldEF0dHJpYnV0ZShuLCBuKSwgbjtcbiAgICAgICAgfSB9LCB3LmVhY2gody5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLCBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2YXIgbiA9IGh0W3RdIHx8IHcuZmluZC5hdHRyO2h0W3RdID0gZnVuY3Rpb24gKGUsIHQsIHIpIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgYSA9IHQudG9Mb3dlckNhc2UoKTtyZXR1cm4gciB8fCAobyA9IGh0W2FdLCBodFthXSA9IGksIGkgPSBudWxsICE9IG4oZSwgdCwgcikgPyBhIDogbnVsbCwgaHRbYV0gPSBvKSwgaTtcbiAgICAgICAgfTtcbiAgICB9KTt2YXIgZ3QgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuICAgICAgICB5dCA9IC9eKD86YXxhcmVhKSQvaTt3LmZuLmV4dGVuZCh7IHByb3A6IGZ1bmN0aW9uIHByb3AoZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIHoodGhpcywgdy5wcm9wLCBlLCB0LCBhcmd1bWVudHMubGVuZ3RoID4gMSk7XG4gICAgICAgIH0sIHJlbW92ZVByb3A6IGZ1bmN0aW9uIHJlbW92ZVByb3AoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbdy5wcm9wRml4W2VdIHx8IGVdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gfSksIHcuZXh0ZW5kKHsgcHJvcDogZnVuY3Rpb24gcHJvcChlLCB0LCBuKSB7XG4gICAgICAgICAgICB2YXIgcixcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG8gPSBlLm5vZGVUeXBlO2lmICgzICE9PSBvICYmIDggIT09IG8gJiYgMiAhPT0gbykgcmV0dXJuIDEgPT09IG8gJiYgdy5pc1hNTERvYyhlKSB8fCAodCA9IHcucHJvcEZpeFt0XSB8fCB0LCBpID0gdy5wcm9wSG9va3NbdF0pLCB2b2lkIDAgIT09IG4gPyBpICYmIFwic2V0XCIgaW4gaSAmJiB2b2lkIDAgIT09IChyID0gaS5zZXQoZSwgbiwgdCkpID8gciA6IGVbdF0gPSBuIDogaSAmJiBcImdldFwiIGluIGkgJiYgbnVsbCAhPT0gKHIgPSBpLmdldChlLCB0KSkgPyByIDogZVt0XTtcbiAgICAgICAgfSwgcHJvcEhvb2tzOiB7IHRhYkluZGV4OiB7IGdldDogZnVuY3Rpb24gZ2V0KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB3LmZpbmQuYXR0cihlLCBcInRhYmluZGV4XCIpO3JldHVybiB0ID8gcGFyc2VJbnQodCwgMTApIDogZ3QudGVzdChlLm5vZGVOYW1lKSB8fCB5dC50ZXN0KGUubm9kZU5hbWUpICYmIGUuaHJlZiA/IDAgOiAtMTtcbiAgICAgICAgICAgICAgICB9IH0gfSwgcHJvcEZpeDogeyBcImZvclwiOiBcImh0bWxGb3JcIiwgXCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiIH0gfSksIGgub3B0U2VsZWN0ZWQgfHwgKHcucHJvcEhvb2tzLnNlbGVjdGVkID0geyBnZXQ6IGZ1bmN0aW9uIGdldChlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGUucGFyZW50Tm9kZTtyZXR1cm4gdCAmJiB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsIG51bGw7XG4gICAgICAgIH0sIHNldDogZnVuY3Rpb24gc2V0KGUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gZS5wYXJlbnROb2RlO3QgJiYgKHQuc2VsZWN0ZWRJbmRleCwgdC5wYXJlbnROb2RlICYmIHQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgfSB9KSwgdy5lYWNoKFtcInRhYkluZGV4XCIsIFwicmVhZE9ubHlcIiwgXCJtYXhMZW5ndGhcIiwgXCJjZWxsU3BhY2luZ1wiLCBcImNlbGxQYWRkaW5nXCIsIFwicm93U3BhblwiLCBcImNvbFNwYW5cIiwgXCJ1c2VNYXBcIiwgXCJmcmFtZUJvcmRlclwiLCBcImNvbnRlbnRFZGl0YWJsZVwiXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB3LnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXSA9IHRoaXM7XG4gICAgfSk7ZnVuY3Rpb24gdnQoZSkge1xuICAgICAgICByZXR1cm4gKGUubWF0Y2goTSkgfHwgW10pLmpvaW4oXCIgXCIpO1xuICAgIH1mdW5jdGlvbiBtdChlKSB7XG4gICAgICAgIHJldHVybiBlLmdldEF0dHJpYnV0ZSAmJiBlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCI7XG4gICAgfWZ1bmN0aW9uIHh0KGUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZSkgPyBlIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IGUubWF0Y2goTSkgfHwgW10gOiBbXTtcbiAgICB9dy5mbi5leHRlbmQoeyBhZGRDbGFzczogZnVuY3Rpb24gYWRkQ2xhc3MoZSkge1xuICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgdSA9IDA7aWYgKGcoZSkpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB3KHRoaXMpLmFkZENsYXNzKGUuY2FsbCh0aGlzLCB0LCBtdCh0aGlzKSkpO1xuICAgICAgICAgICAgfSk7aWYgKCh0ID0geHQoZSkpLmxlbmd0aCkgd2hpbGUgKG4gPSB0aGlzW3UrK10pIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9IG10KG4pLCByID0gMSA9PT0gbi5ub2RlVHlwZSAmJiBcIiBcIiArIHZ0KGkpICsgXCIgXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IDA7d2hpbGUgKG8gPSB0W2ErK10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuaW5kZXhPZihcIiBcIiArIG8gKyBcIiBcIikgPCAwICYmIChyICs9IG8gKyBcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1pICE9PSAocyA9IHZ0KHIpKSAmJiBuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgICAgfSwgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGUpIHtcbiAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHUgPSAwO2lmIChnKGUpKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdyh0aGlzKS5yZW1vdmVDbGFzcyhlLmNhbGwodGhpcywgdCwgbXQodGhpcykpKTtcbiAgICAgICAgICAgIH0pO2lmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsIFwiXCIpO2lmICgodCA9IHh0KGUpKS5sZW5ndGgpIHdoaWxlIChuID0gdGhpc1t1KytdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPSBtdChuKSwgciA9IDEgPT09IG4ubm9kZVR5cGUgJiYgXCIgXCIgKyB2dChpKSArIFwiIFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGEgPSAwO3doaWxlIChvID0gdFthKytdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5pbmRleE9mKFwiIFwiICsgbyArIFwiIFwiKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHIucmVwbGFjZShcIiBcIiArIG8gKyBcIiBcIiwgXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9aSAhPT0gKHMgPSB2dChyKSkgJiYgbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICAgIH0sIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlLCB0KSB7XG4gICAgICAgICAgICB2YXIgbiA9IHR5cGVvZiBlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZSksXG4gICAgICAgICAgICAgICAgciA9IFwic3RyaW5nXCIgPT09IG4gfHwgQXJyYXkuaXNBcnJheShlKTtyZXR1cm4gXCJib29sZWFuXCIgPT0gdHlwZW9mIHQgJiYgciA/IHQgPyB0aGlzLmFkZENsYXNzKGUpIDogdGhpcy5yZW1vdmVDbGFzcyhlKSA6IGcoZSkgPyB0aGlzLmVhY2goZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICB3KHRoaXMpLnRvZ2dsZUNsYXNzKGUuY2FsbCh0aGlzLCBuLCBtdCh0aGlzKSwgdCksIHQpO1xuICAgICAgICAgICAgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB0LCBpLCBvLCBhO2lmIChyKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSAwLCBvID0gdyh0aGlzKSwgYSA9IHh0KGUpO3doaWxlICh0ID0gYVtpKytdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvLmhhc0NsYXNzKHQpID8gby5yZW1vdmVDbGFzcyh0KSA6IG8uYWRkQ2xhc3ModCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Ugdm9pZCAwICE9PSBlICYmIFwiYm9vbGVhblwiICE9PSBuIHx8ICgodCA9IG10KHRoaXMpKSAmJiBKLnNldCh0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgdCksIHRoaXMuc2V0QXR0cmlidXRlICYmIHRoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdCB8fCAhMSA9PT0gZSA/IFwiXCIgOiBKLmdldCh0aGlzLCBcIl9fY2xhc3NOYW1lX19cIikgfHwgXCJcIikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGhhc0NsYXNzOiBmdW5jdGlvbiBoYXNDbGFzcyhlKSB7XG4gICAgICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgIHIgPSAwO3QgPSBcIiBcIiArIGUgKyBcIiBcIjt3aGlsZSAobiA9IHRoaXNbcisrXSkge1xuICAgICAgICAgICAgICAgIGlmICgxID09PSBuLm5vZGVUeXBlICYmIChcIiBcIiArIHZ0KG10KG4pKSArIFwiIFwiKS5pbmRleE9mKHQpID4gLTEpIHJldHVybiAhMDtcbiAgICAgICAgICAgIH1yZXR1cm4gITE7XG4gICAgICAgIH0gfSk7dmFyIGJ0ID0gL1xcci9nO3cuZm4uZXh0ZW5kKHsgdmFsOiBmdW5jdGlvbiB2YWwoZSkge1xuICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgIGkgPSB0aGlzWzBdO3tcbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHIgPSBnKGUpLCB0aGlzLmVhY2goZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7MSA9PT0gdGhpcy5ub2RlVHlwZSAmJiAobnVsbCA9PSAoaSA9IHIgPyBlLmNhbGwodGhpcywgbiwgdyh0aGlzKS52YWwoKSkgOiBlKSA/IGkgPSBcIlwiIDogXCJudW1iZXJcIiA9PSB0eXBlb2YgaSA/IGkgKz0gXCJcIiA6IEFycmF5LmlzQXJyYXkoaSkgJiYgKGkgPSB3Lm1hcChpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IFwiXCIgOiBlICsgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCAodCA9IHcudmFsSG9va3NbdGhpcy50eXBlXSB8fCB3LnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pICYmIFwic2V0XCIgaW4gdCAmJiB2b2lkIDAgIT09IHQuc2V0KHRoaXMsIGksIFwidmFsdWVcIikgfHwgKHRoaXMudmFsdWUgPSBpKSk7XG4gICAgICAgICAgICAgICAgfSk7aWYgKGkpIHJldHVybiAodCA9IHcudmFsSG9va3NbaS50eXBlXSB8fCB3LnZhbEhvb2tzW2kubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pICYmIFwiZ2V0XCIgaW4gdCAmJiB2b2lkIDAgIT09IChuID0gdC5nZXQoaSwgXCJ2YWx1ZVwiKSkgPyBuIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgKG4gPSBpLnZhbHVlKSA/IG4ucmVwbGFjZShidCwgXCJcIikgOiBudWxsID09IG4gPyBcIlwiIDogbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB9KSwgdy5leHRlbmQoeyB2YWxIb29rczogeyBvcHRpb246IHsgZ2V0OiBmdW5jdGlvbiBnZXQoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHcuZmluZC5hdHRyKGUsIFwidmFsdWVcIik7cmV0dXJuIG51bGwgIT0gdCA/IHQgOiB2dCh3LnRleHQoZSkpO1xuICAgICAgICAgICAgICAgIH0gfSwgc2VsZWN0OiB7IGdldDogZnVuY3Rpb24gZ2V0KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IFwic2VsZWN0LW9uZVwiID09PSBlLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gYSA/IG51bGwgOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBhID8gbyArIDEgOiBpLmxlbmd0aDtmb3IgKHIgPSBvIDwgMCA/IHUgOiBhID8gbyA6IDA7IHIgPCB1OyByKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKG4gPSBpW3JdKS5zZWxlY3RlZCB8fCByID09PSBvKSAmJiAhbi5kaXNhYmxlZCAmJiAoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhTihuLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPSB3KG4pLnZhbCgpLCBhKSByZXR1cm4gdDtzLnB1c2godCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1yZXR1cm4gcztcbiAgICAgICAgICAgICAgICB9LCBzZXQ6IGZ1bmN0aW9uIHNldChlLCB0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gdy5tYWtlQXJyYXkodCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gaS5sZW5ndGg7d2hpbGUgKGEtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKChyID0gaVthXSkuc2VsZWN0ZWQgPSB3LmluQXJyYXkody52YWxIb29rcy5vcHRpb24uZ2V0KHIpLCBvKSA+IC0xKSAmJiAobiA9ICEwKTtcbiAgICAgICAgICAgICAgICAgICAgfXJldHVybiBuIHx8IChlLnNlbGVjdGVkSW5kZXggPSAtMSksIG87XG4gICAgICAgICAgICAgICAgfSB9IH0gfSksIHcuZWFjaChbXCJyYWRpb1wiLCBcImNoZWNrYm94XCJdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHcudmFsSG9va3NbdGhpc10gPSB7IHNldDogZnVuY3Rpb24gc2V0KGUsIHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0KSkgcmV0dXJuIGUuY2hlY2tlZCA9IHcuaW5BcnJheSh3KGUpLnZhbCgpLCB0KSA+IC0xO1xuICAgICAgICAgICAgfSB9LCBoLmNoZWNrT24gfHwgKHcudmFsSG9va3NbdGhpc10uZ2V0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09PSBlLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID8gXCJvblwiIDogZS52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfSksIGguZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gZTt2YXIgd3QgPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG4gICAgICAgIFR0ID0gZnVuY3Rpb24gVHQoZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07dy5leHRlbmQody5ldmVudCwgeyB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKHQsIG4sIGksIG8pIHtcbiAgICAgICAgICAgIHZhciBhLFxuICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgdSxcbiAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAgICAgdiA9IFtpIHx8IHJdLFxuICAgICAgICAgICAgICAgIG0gPSBmLmNhbGwodCwgXCJ0eXBlXCIpID8gdC50eXBlIDogdCxcbiAgICAgICAgICAgICAgICB4ID0gZi5jYWxsKHQsIFwibmFtZXNwYWNlXCIpID8gdC5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpIDogW107aWYgKHMgPSBoID0gdSA9IGkgPSBpIHx8IHIsIDMgIT09IGkubm9kZVR5cGUgJiYgOCAhPT0gaS5ub2RlVHlwZSAmJiAhd3QudGVzdChtICsgdy5ldmVudC50cmlnZ2VyZWQpICYmIChtLmluZGV4T2YoXCIuXCIpID4gLTEgJiYgKG0gPSAoeCA9IG0uc3BsaXQoXCIuXCIpKS5zaGlmdCgpLCB4LnNvcnQoKSksIGMgPSBtLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyBtLCB0ID0gdFt3LmV4cGFuZG9dID8gdCA6IG5ldyB3LkV2ZW50KG0sIFwib2JqZWN0XCIgPT0gKHR5cGVvZiB0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodCkpICYmIHQpLCB0LmlzVHJpZ2dlciA9IG8gPyAyIDogMywgdC5uYW1lc3BhY2UgPSB4LmpvaW4oXCIuXCIpLCB0LnJuYW1lc3BhY2UgPSB0Lm5hbWVzcGFjZSA/IG5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIiArIHguam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIikgOiBudWxsLCB0LnJlc3VsdCA9IHZvaWQgMCwgdC50YXJnZXQgfHwgKHQudGFyZ2V0ID0gaSksIG4gPSBudWxsID09IG4gPyBbdF0gOiB3Lm1ha2VBcnJheShuLCBbdF0pLCBkID0gdy5ldmVudC5zcGVjaWFsW21dIHx8IHt9LCBvIHx8ICFkLnRyaWdnZXIgfHwgITEgIT09IGQudHJpZ2dlci5hcHBseShpLCBuKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8gJiYgIWQubm9CdWJibGUgJiYgIXkoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsID0gZC5kZWxlZ2F0ZVR5cGUgfHwgbSwgd3QudGVzdChsICsgbSkgfHwgKHMgPSBzLnBhcmVudE5vZGUpOyBzOyBzID0gcy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2LnB1c2gocyksIHUgPSBzO1xuICAgICAgICAgICAgICAgICAgICB9dSA9PT0gKGkub3duZXJEb2N1bWVudCB8fCByKSAmJiB2LnB1c2godS5kZWZhdWx0VmlldyB8fCB1LnBhcmVudFdpbmRvdyB8fCBlKTtcbiAgICAgICAgICAgICAgICB9YSA9IDA7d2hpbGUgKChzID0gdlthKytdKSAmJiAhdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGggPSBzLCB0LnR5cGUgPSBhID4gMSA/IGwgOiBkLmJpbmRUeXBlIHx8IG0sIChwID0gKEouZ2V0KHMsIFwiZXZlbnRzXCIpIHx8IHt9KVt0LnR5cGVdICYmIEouZ2V0KHMsIFwiaGFuZGxlXCIpKSAmJiBwLmFwcGx5KHMsIG4pLCAocCA9IGMgJiYgc1tjXSkgJiYgcC5hcHBseSAmJiBZKHMpICYmICh0LnJlc3VsdCA9IHAuYXBwbHkocywgbiksICExID09PSB0LnJlc3VsdCAmJiB0LnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgICAgICAgICAgIH1yZXR1cm4gdC50eXBlID0gbSwgbyB8fCB0LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGQuX2RlZmF1bHQgJiYgITEgIT09IGQuX2RlZmF1bHQuYXBwbHkodi5wb3AoKSwgbikgfHwgIVkoaSkgfHwgYyAmJiBnKGlbbV0pICYmICF5KGkpICYmICgodSA9IGlbY10pICYmIChpW2NdID0gbnVsbCksIHcuZXZlbnQudHJpZ2dlcmVkID0gbSwgdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICYmIGguYWRkRXZlbnRMaXN0ZW5lcihtLCBUdCksIGlbbV0oKSwgdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICYmIGgucmVtb3ZlRXZlbnRMaXN0ZW5lcihtLCBUdCksIHcuZXZlbnQudHJpZ2dlcmVkID0gdm9pZCAwLCB1ICYmIChpW2NdID0gdSkpLCB0LnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgc2ltdWxhdGU6IGZ1bmN0aW9uIHNpbXVsYXRlKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHZhciByID0gdy5leHRlbmQobmV3IHcuRXZlbnQoKSwgbiwgeyB0eXBlOiBlLCBpc1NpbXVsYXRlZDogITAgfSk7dy5ldmVudC50cmlnZ2VyKHIsIG51bGwsIHQpO1xuICAgICAgICB9IH0pLCB3LmZuLmV4dGVuZCh7IHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdy5ldmVudC50cmlnZ2VyKGUsIHQsIHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiB0cmlnZ2VySGFuZGxlcihlLCB0KSB7XG4gICAgICAgICAgICB2YXIgbiA9IHRoaXNbMF07aWYgKG4pIHJldHVybiB3LmV2ZW50LnRyaWdnZXIoZSwgdCwgbiwgITApO1xuICAgICAgICB9IH0pLCBoLmZvY3VzaW4gfHwgdy5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdmFyIG4gPSBmdW5jdGlvbiBuKGUpIHtcbiAgICAgICAgICAgIHcuZXZlbnQuc2ltdWxhdGUodCwgZS50YXJnZXQsIHcuZXZlbnQuZml4KGUpKTtcbiAgICAgICAgfTt3LmV2ZW50LnNwZWNpYWxbdF0gPSB7IHNldHVwOiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBpID0gSi5hY2Nlc3MociwgdCk7aSB8fCByLmFkZEV2ZW50TGlzdGVuZXIoZSwgbiwgITApLCBKLmFjY2VzcyhyLCB0LCAoaSB8fCAwKSArIDEpO1xuICAgICAgICAgICAgfSwgdGVhcmRvd246IGZ1bmN0aW9uIHRlYXJkb3duKCkge1xuICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGkgPSBKLmFjY2VzcyhyLCB0KSAtIDE7aSA/IEouYWNjZXNzKHIsIHQsIGkpIDogKHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCBuLCAhMCksIEoucmVtb3ZlKHIsIHQpKTtcbiAgICAgICAgICAgIH0gfTtcbiAgICB9KTt2YXIgQ3QgPSBlLmxvY2F0aW9uLFxuICAgICAgICBFdCA9IERhdGUubm93KCksXG4gICAgICAgIGt0ID0gL1xcPy87dy5wYXJzZVhNTCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBuO2lmICghdCB8fCBcInN0cmluZ1wiICE9IHR5cGVvZiB0KSByZXR1cm4gbnVsbDt0cnkge1xuICAgICAgICAgICAgbiA9IG5ldyBlLkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh0LCBcInRleHQveG1sXCIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBuID0gdm9pZCAwO1xuICAgICAgICB9cmV0dXJuIG4gJiYgIW4uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGggfHwgdy5lcnJvcihcIkludmFsaWQgWE1MOiBcIiArIHQpLCBuO1xuICAgIH07dmFyIFN0ID0gL1xcW1xcXSQvLFxuICAgICAgICBEdCA9IC9cXHI/XFxuL2csXG4gICAgICAgIE50ID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuICAgICAgICBBdCA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBqdChlLCB0LCBuLCByKSB7XG4gICAgICAgIHZhciBpO2lmIChBcnJheS5pc0FycmF5KHQpKSB3LmVhY2godCwgZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgICAgICAgIG4gfHwgU3QudGVzdChlKSA/IHIoZSwgaSkgOiBqdChlICsgXCJbXCIgKyAoXCJvYmplY3RcIiA9PSAodHlwZW9mIGkgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihpKSkgJiYgbnVsbCAhPSBpID8gdCA6IFwiXCIpICsgXCJdXCIsIGksIG4sIHIpO1xuICAgICAgICB9KTtlbHNlIGlmIChuIHx8IFwib2JqZWN0XCIgIT09IHgodCkpIHIoZSwgdCk7ZWxzZSBmb3IgKGkgaW4gdCkge1xuICAgICAgICAgICAganQoZSArIFwiW1wiICsgaSArIFwiXVwiLCB0W2ldLCBuLCByKTtcbiAgICAgICAgfVxuICAgIH13LnBhcmFtID0gZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdmFyIG4sXG4gICAgICAgICAgICByID0gW10sXG4gICAgICAgICAgICBpID0gZnVuY3Rpb24gaShlLCB0KSB7XG4gICAgICAgICAgICB2YXIgbiA9IGcodCkgPyB0KCkgOiB0O3Jbci5sZW5ndGhdID0gZW5jb2RlVVJJQ29tcG9uZW50KGUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQobnVsbCA9PSBuID8gXCJcIiA6IG4pO1xuICAgICAgICB9O2lmIChBcnJheS5pc0FycmF5KGUpIHx8IGUuanF1ZXJ5ICYmICF3LmlzUGxhaW5PYmplY3QoZSkpIHcuZWFjaChlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XG4gICAgICAgIH0pO2Vsc2UgZm9yIChuIGluIGUpIHtcbiAgICAgICAgICAgIGp0KG4sIGVbbl0sIHQsIGkpO1xuICAgICAgICB9cmV0dXJuIHIuam9pbihcIiZcIik7XG4gICAgfSwgdy5mbi5leHRlbmQoeyBzZXJpYWxpemU6IGZ1bmN0aW9uIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB3LnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSk7XG4gICAgICAgIH0sIHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbiBzZXJpYWxpemVBcnJheSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB3LnByb3AodGhpcywgXCJlbGVtZW50c1wiKTtyZXR1cm4gZSA/IHcubWFrZUFycmF5KGUpIDogdGhpcztcbiAgICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSAmJiAhdyh0aGlzKS5pcyhcIjpkaXNhYmxlZFwiKSAmJiBBdC50ZXN0KHRoaXMubm9kZU5hbWUpICYmICFOdC50ZXN0KGUpICYmICh0aGlzLmNoZWNrZWQgfHwgIXBlLnRlc3QoZSkpO1xuICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSB3KHRoaXMpLnZhbCgpO3JldHVybiBudWxsID09IG4gPyBudWxsIDogQXJyYXkuaXNBcnJheShuKSA/IHcubWFwKG4sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG5hbWU6IHQubmFtZSwgdmFsdWU6IGUucmVwbGFjZShEdCwgXCJcXHJcXG5cIikgfTtcbiAgICAgICAgICAgICAgICB9KSA6IHsgbmFtZTogdC5uYW1lLCB2YWx1ZTogbi5yZXBsYWNlKER0LCBcIlxcclxcblwiKSB9O1xuICAgICAgICAgICAgfSkuZ2V0KCk7XG4gICAgICAgIH0gfSk7dmFyIHF0ID0gLyUyMC9nLFxuICAgICAgICBMdCA9IC8jLiokLyxcbiAgICAgICAgSHQgPSAvKFs/Jl0pXz1bXiZdKi8sXG4gICAgICAgIE90ID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9nbSxcbiAgICAgICAgUHQgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcbiAgICAgICAgTXQgPSAvXig/OkdFVHxIRUFEKSQvLFxuICAgICAgICBSdCA9IC9eXFwvXFwvLyxcbiAgICAgICAgSXQgPSB7fSxcbiAgICAgICAgV3QgPSB7fSxcbiAgICAgICAgJHQgPSBcIiovXCIuY29uY2F0KFwiKlwiKSxcbiAgICAgICAgQnQgPSByLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO0J0LmhyZWYgPSBDdC5ocmVmO2Z1bmN0aW9uIEZ0KGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0LCBuKSB7XG4gICAgICAgICAgICBcInN0cmluZ1wiICE9IHR5cGVvZiB0ICYmIChuID0gdCwgdCA9IFwiKlwiKTt2YXIgcixcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICBvID0gdC50b0xvd2VyQ2FzZSgpLm1hdGNoKE0pIHx8IFtdO2lmIChnKG4pKSB3aGlsZSAociA9IG9baSsrXSkge1xuICAgICAgICAgICAgICAgIFwiK1wiID09PSByWzBdID8gKHIgPSByLnNsaWNlKDEpIHx8IFwiKlwiLCAoZVtyXSA9IGVbcl0gfHwgW10pLnVuc2hpZnQobikpIDogKGVbcl0gPSBlW3JdIHx8IFtdKS5wdXNoKG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1mdW5jdGlvbiBfdChlLCB0LCBuLCByKSB7XG4gICAgICAgIHZhciBpID0ge30sXG4gICAgICAgICAgICBvID0gZSA9PT0gV3Q7ZnVuY3Rpb24gYShzKSB7XG4gICAgICAgICAgICB2YXIgdTtyZXR1cm4gaVtzXSA9ICEwLCB3LmVhY2goZVtzXSB8fCBbXSwgZnVuY3Rpb24gKGUsIHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IHModCwgbiwgcik7cmV0dXJuIFwic3RyaW5nXCIgIT0gdHlwZW9mIGwgfHwgbyB8fCBpW2xdID8gbyA/ICEodSA9IGwpIDogdm9pZCAwIDogKHQuZGF0YVR5cGVzLnVuc2hpZnQobCksIGEobCksICExKTtcbiAgICAgICAgICAgIH0pLCB1O1xuICAgICAgICB9cmV0dXJuIGEodC5kYXRhVHlwZXNbMF0pIHx8ICFpW1wiKlwiXSAmJiBhKFwiKlwiKTtcbiAgICB9ZnVuY3Rpb24genQoZSwgdCkge1xuICAgICAgICB2YXIgbixcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBpID0gdy5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307Zm9yIChuIGluIHQpIHtcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gdFtuXSAmJiAoKGlbbl0gPyBlIDogciB8fCAociA9IHt9KSlbbl0gPSB0W25dKTtcbiAgICAgICAgfXJldHVybiByICYmIHcuZXh0ZW5kKCEwLCBlLCByKSwgZTtcbiAgICB9ZnVuY3Rpb24gWHQoZSwgdCwgbikge1xuICAgICAgICB2YXIgcixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvLFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIHMgPSBlLmNvbnRlbnRzLFxuICAgICAgICAgICAgdSA9IGUuZGF0YVR5cGVzO3doaWxlIChcIipcIiA9PT0gdVswXSkge1xuICAgICAgICAgICAgdS5zaGlmdCgpLCB2b2lkIDAgPT09IHIgJiYgKHIgPSBlLm1pbWVUeXBlIHx8IHQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO1xuICAgICAgICB9aWYgKHIpIGZvciAoaSBpbiBzKSB7XG4gICAgICAgICAgICBpZiAoc1tpXSAmJiBzW2ldLnRlc3QocikpIHtcbiAgICAgICAgICAgICAgICB1LnVuc2hpZnQoaSk7YnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1pZiAodVswXSBpbiBuKSBvID0gdVswXTtlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaSBpbiBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1WzBdIHx8IGUuY29udmVydGVyc1tpICsgXCIgXCIgKyB1WzBdXSkge1xuICAgICAgICAgICAgICAgICAgICBvID0gaTticmVhaztcbiAgICAgICAgICAgICAgICB9YSB8fCAoYSA9IGkpO1xuICAgICAgICAgICAgfW8gPSBvIHx8IGE7XG4gICAgICAgIH1pZiAobykgcmV0dXJuIG8gIT09IHVbMF0gJiYgdS51bnNoaWZ0KG8pLCBuW29dO1xuICAgIH1mdW5jdGlvbiBVdChlLCB0LCBuLCByKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgdSxcbiAgICAgICAgICAgIGwgPSB7fSxcbiAgICAgICAgICAgIGMgPSBlLmRhdGFUeXBlcy5zbGljZSgpO2lmIChjWzFdKSBmb3IgKGEgaW4gZS5jb252ZXJ0ZXJzKSB7XG4gICAgICAgICAgICBsW2EudG9Mb3dlckNhc2UoKV0gPSBlLmNvbnZlcnRlcnNbYV07XG4gICAgICAgIH1vID0gYy5zaGlmdCgpO3doaWxlIChvKSB7XG4gICAgICAgICAgICBpZiAoZS5yZXNwb25zZUZpZWxkc1tvXSAmJiAobltlLnJlc3BvbnNlRmllbGRzW29dXSA9IHQpLCAhdSAmJiByICYmIGUuZGF0YUZpbHRlciAmJiAodCA9IGUuZGF0YUZpbHRlcih0LCBlLmRhdGFUeXBlKSksIHUgPSBvLCBvID0gYy5zaGlmdCgpKSBpZiAoXCIqXCIgPT09IG8pIG8gPSB1O2Vsc2UgaWYgKFwiKlwiICE9PSB1ICYmIHUgIT09IG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhID0gbFt1ICsgXCIgXCIgKyBvXSB8fCBsW1wiKiBcIiArIG9dKSkgZm9yIChpIGluIGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChzID0gaS5zcGxpdChcIiBcIikpWzFdID09PSBvICYmIChhID0gbFt1ICsgXCIgXCIgKyBzWzBdXSB8fCBsW1wiKiBcIiArIHNbMF1dKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgITAgPT09IGEgPyBhID0gbFtpXSA6ICEwICE9PSBsW2ldICYmIChvID0gc1swXSwgYy51bnNoaWZ0KHNbMV0pKTticmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1pZiAoITAgIT09IGEpIGlmIChhICYmIGVbXCJ0aHJvd3NcIl0pIHQgPSBhKHQpO2Vsc2UgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdCA9IGEodCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogYSA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHUgKyBcIiB0byBcIiArIG8gfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHQgfTtcbiAgICB9dy5leHRlbmQoeyBhY3RpdmU6IDAsIGxhc3RNb2RpZmllZDoge30sIGV0YWc6IHt9LCBhamF4U2V0dGluZ3M6IHsgdXJsOiBDdC5ocmVmLCB0eXBlOiBcIkdFVFwiLCBpc0xvY2FsOiBQdC50ZXN0KEN0LnByb3RvY29sKSwgZ2xvYmFsOiAhMCwgcHJvY2Vzc0RhdGE6ICEwLCBhc3luYzogITAsIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLCBhY2NlcHRzOiB7IFwiKlwiOiAkdCwgdGV4dDogXCJ0ZXh0L3BsYWluXCIsIGh0bWw6IFwidGV4dC9odG1sXCIsIHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsIGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCIgfSwgY29udGVudHM6IHsgeG1sOiAvXFxieG1sXFxiLywgaHRtbDogL1xcYmh0bWwvLCBqc29uOiAvXFxianNvblxcYi8gfSwgcmVzcG9uc2VGaWVsZHM6IHsgeG1sOiBcInJlc3BvbnNlWE1MXCIsIHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsIGpzb246IFwicmVzcG9uc2VKU09OXCIgfSwgY29udmVydGVyczogeyBcIiogdGV4dFwiOiBTdHJpbmcsIFwidGV4dCBodG1sXCI6ICEwLCBcInRleHQganNvblwiOiBKU09OLnBhcnNlLCBcInRleHQgeG1sXCI6IHcucGFyc2VYTUwgfSwgZmxhdE9wdGlvbnM6IHsgdXJsOiAhMCwgY29udGV4dDogITAgfSB9LCBhamF4U2V0dXA6IGZ1bmN0aW9uIGFqYXhTZXR1cChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCA/IHp0KHp0KGUsIHcuYWpheFNldHRpbmdzKSwgdCkgOiB6dCh3LmFqYXhTZXR0aW5ncywgZSk7XG4gICAgICAgIH0sIGFqYXhQcmVmaWx0ZXI6IEZ0KEl0KSwgYWpheFRyYW5zcG9ydDogRnQoV3QpLCBhamF4OiBmdW5jdGlvbiBhamF4KHQsIG4pIHtcbiAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gKHR5cGVvZiB0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodCkpICYmIChuID0gdCwgdCA9IHZvaWQgMCksIG4gPSBuIHx8IHt9O3ZhciBpLFxuICAgICAgICAgICAgICAgIG8sXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgIHUsXG4gICAgICAgICAgICAgICAgbCxcbiAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgIGYsXG4gICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgIGggPSB3LmFqYXhTZXR1cCh7fSwgbiksXG4gICAgICAgICAgICAgICAgZyA9IGguY29udGV4dCB8fCBoLFxuICAgICAgICAgICAgICAgIHkgPSBoLmNvbnRleHQgJiYgKGcubm9kZVR5cGUgfHwgZy5qcXVlcnkpID8gdyhnKSA6IHcuZXZlbnQsXG4gICAgICAgICAgICAgICAgdiA9IHcuRGVmZXJyZWQoKSxcbiAgICAgICAgICAgICAgICBtID0gdy5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcbiAgICAgICAgICAgICAgICB4ID0gaC5zdGF0dXNDb2RlIHx8IHt9LFxuICAgICAgICAgICAgICAgIGIgPSB7fSxcbiAgICAgICAgICAgICAgICBUID0ge30sXG4gICAgICAgICAgICAgICAgQyA9IFwiY2FuY2VsZWRcIixcbiAgICAgICAgICAgICAgICBFID0geyByZWFkeVN0YXRlOiAwLCBnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24gZ2V0UmVzcG9uc2VIZWFkZXIoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdDtpZiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHt9O3doaWxlICh0ID0gT3QuZXhlYyhhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzW3RbMV0udG9Mb3dlckNhc2UoKV0gPSB0WzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH10ID0gc1tlLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIG51bGwgPT0gdCA/IG51bGwgOiB0O1xuICAgICAgICAgICAgICAgIH0sIGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24gZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA/IGEgOiBudWxsO1xuICAgICAgICAgICAgICAgIH0sIHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIoZSwgdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBjICYmIChlID0gVFtlLnRvTG93ZXJDYXNlKCldID0gVFtlLnRvTG93ZXJDYXNlKCldIHx8IGUsIGJbZV0gPSB0KSwgdGhpcztcbiAgICAgICAgICAgICAgICB9LCBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiBvdmVycmlkZU1pbWVUeXBlKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gYyAmJiAoaC5taW1lVHlwZSA9IGUpLCB0aGlzO1xuICAgICAgICAgICAgICAgIH0sIHN0YXR1c0NvZGU6IGZ1bmN0aW9uIHN0YXR1c0NvZGUoZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdDtpZiAoZSkgaWYgKGMpIEUuYWx3YXlzKGVbRS5zdGF0dXNdKTtlbHNlIGZvciAodCBpbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4W3RdID0gW3hbdF0sIGVbdF1dO1xuICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSwgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBlIHx8IEM7cmV0dXJuIGkgJiYgaS5hYm9ydCh0KSwgaygwLCB0KSwgdGhpcztcbiAgICAgICAgICAgICAgICB9IH07aWYgKHYucHJvbWlzZShFKSwgaC51cmwgPSAoKHQgfHwgaC51cmwgfHwgQ3QuaHJlZikgKyBcIlwiKS5yZXBsYWNlKFJ0LCBDdC5wcm90b2NvbCArIFwiLy9cIiksIGgudHlwZSA9IG4ubWV0aG9kIHx8IG4udHlwZSB8fCBoLm1ldGhvZCB8fCBoLnR5cGUsIGguZGF0YVR5cGVzID0gKGguZGF0YVR5cGUgfHwgXCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2goTSkgfHwgW1wiXCJdLCBudWxsID09IGguY3Jvc3NEb21haW4pIHtcbiAgICAgICAgICAgICAgICBsID0gci5jcmVhdGVFbGVtZW50KFwiYVwiKTt0cnkge1xuICAgICAgICAgICAgICAgICAgICBsLmhyZWYgPSBoLnVybCwgbC5ocmVmID0gbC5ocmVmLCBoLmNyb3NzRG9tYWluID0gQnQucHJvdG9jb2wgKyBcIi8vXCIgKyBCdC5ob3N0ICE9IGwucHJvdG9jb2wgKyBcIi8vXCIgKyBsLmhvc3Q7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBoLmNyb3NzRG9tYWluID0gITA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWlmIChoLmRhdGEgJiYgaC5wcm9jZXNzRGF0YSAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiBoLmRhdGEgJiYgKGguZGF0YSA9IHcucGFyYW0oaC5kYXRhLCBoLnRyYWRpdGlvbmFsKSksIF90KEl0LCBoLCBuLCBFKSwgYykgcmV0dXJuIEU7KGYgPSB3LmV2ZW50ICYmIGguZ2xvYmFsKSAmJiAwID09IHcuYWN0aXZlKysgJiYgdy5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpLCBoLnR5cGUgPSBoLnR5cGUudG9VcHBlckNhc2UoKSwgaC5oYXNDb250ZW50ID0gIU10LnRlc3QoaC50eXBlKSwgbyA9IGgudXJsLnJlcGxhY2UoTHQsIFwiXCIpLCBoLmhhc0NvbnRlbnQgPyBoLmRhdGEgJiYgaC5wcm9jZXNzRGF0YSAmJiAwID09PSAoaC5jb250ZW50VHlwZSB8fCBcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIChoLmRhdGEgPSBoLmRhdGEucmVwbGFjZShxdCwgXCIrXCIpKSA6IChkID0gaC51cmwuc2xpY2Uoby5sZW5ndGgpLCBoLmRhdGEgJiYgKGgucHJvY2Vzc0RhdGEgfHwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgaC5kYXRhKSAmJiAobyArPSAoa3QudGVzdChvKSA/IFwiJlwiIDogXCI/XCIpICsgaC5kYXRhLCBkZWxldGUgaC5kYXRhKSwgITEgPT09IGguY2FjaGUgJiYgKG8gPSBvLnJlcGxhY2UoSHQsIFwiJDFcIiksIGQgPSAoa3QudGVzdChvKSA/IFwiJlwiIDogXCI/XCIpICsgXCJfPVwiICsgRXQrKyArIGQpLCBoLnVybCA9IG8gKyBkKSwgaC5pZk1vZGlmaWVkICYmICh3Lmxhc3RNb2RpZmllZFtvXSAmJiBFLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCB3Lmxhc3RNb2RpZmllZFtvXSksIHcuZXRhZ1tvXSAmJiBFLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsIHcuZXRhZ1tvXSkpLCAoaC5kYXRhICYmIGguaGFzQ29udGVudCAmJiAhMSAhPT0gaC5jb250ZW50VHlwZSB8fCBuLmNvbnRlbnRUeXBlKSAmJiBFLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgaC5jb250ZW50VHlwZSksIEUuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBoLmRhdGFUeXBlc1swXSAmJiBoLmFjY2VwdHNbaC5kYXRhVHlwZXNbMF1dID8gaC5hY2NlcHRzW2guZGF0YVR5cGVzWzBdXSArIChcIipcIiAhPT0gaC5kYXRhVHlwZXNbMF0gPyBcIiwgXCIgKyAkdCArIFwiOyBxPTAuMDFcIiA6IFwiXCIpIDogaC5hY2NlcHRzW1wiKlwiXSk7Zm9yIChwIGluIGguaGVhZGVycykge1xuICAgICAgICAgICAgICAgIEUuc2V0UmVxdWVzdEhlYWRlcihwLCBoLmhlYWRlcnNbcF0pO1xuICAgICAgICAgICAgfWlmIChoLmJlZm9yZVNlbmQgJiYgKCExID09PSBoLmJlZm9yZVNlbmQuY2FsbChnLCBFLCBoKSB8fCBjKSkgcmV0dXJuIEUuYWJvcnQoKTtpZiAoQyA9IFwiYWJvcnRcIiwgbS5hZGQoaC5jb21wbGV0ZSksIEUuZG9uZShoLnN1Y2Nlc3MpLCBFLmZhaWwoaC5lcnJvciksIGkgPSBfdChXdCwgaCwgbiwgRSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoRS5yZWFkeVN0YXRlID0gMSwgZiAmJiB5LnRyaWdnZXIoXCJhamF4U2VuZFwiLCBbRSwgaF0pLCBjKSByZXR1cm4gRTtoLmFzeW5jICYmIGgudGltZW91dCA+IDAgJiYgKHUgPSBlLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBFLmFib3J0KFwidGltZW91dFwiKTtcbiAgICAgICAgICAgICAgICB9LCBoLnRpbWVvdXQpKTt0cnkge1xuICAgICAgICAgICAgICAgICAgICBjID0gITEsIGkuc2VuZChiLCBrKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjKSB0aHJvdyBlO2soLTEsIGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBrKC0xLCBcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiBrKHQsIG4sIHIsIHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCxcbiAgICAgICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgYixcbiAgICAgICAgICAgICAgICAgICAgVCxcbiAgICAgICAgICAgICAgICAgICAgQyA9IG47YyB8fCAoYyA9ICEwLCB1ICYmIGUuY2xlYXJUaW1lb3V0KHUpLCBpID0gdm9pZCAwLCBhID0gcyB8fCBcIlwiLCBFLnJlYWR5U3RhdGUgPSB0ID4gMCA/IDQgOiAwLCBsID0gdCA+PSAyMDAgJiYgdCA8IDMwMCB8fCAzMDQgPT09IHQsIHIgJiYgKGIgPSBYdChoLCBFLCByKSksIGIgPSBVdChoLCBiLCBFLCBsKSwgbCA/IChoLmlmTW9kaWZpZWQgJiYgKChUID0gRS5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIikpICYmICh3Lmxhc3RNb2RpZmllZFtvXSA9IFQpLCAoVCA9IEUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSAmJiAody5ldGFnW29dID0gVCkpLCAyMDQgPT09IHQgfHwgXCJIRUFEXCIgPT09IGgudHlwZSA/IEMgPSBcIm5vY29udGVudFwiIDogMzA0ID09PSB0ID8gQyA9IFwibm90bW9kaWZpZWRcIiA6IChDID0gYi5zdGF0ZSwgcCA9IGIuZGF0YSwgbCA9ICEoZCA9IGIuZXJyb3IpKSkgOiAoZCA9IEMsICF0ICYmIEMgfHwgKEMgPSBcImVycm9yXCIsIHQgPCAwICYmICh0ID0gMCkpKSwgRS5zdGF0dXMgPSB0LCBFLnN0YXR1c1RleHQgPSAobiB8fCBDKSArIFwiXCIsIGwgPyB2LnJlc29sdmVXaXRoKGcsIFtwLCBDLCBFXSkgOiB2LnJlamVjdFdpdGgoZywgW0UsIEMsIGRdKSwgRS5zdGF0dXNDb2RlKHgpLCB4ID0gdm9pZCAwLCBmICYmIHkudHJpZ2dlcihsID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIiwgW0UsIGgsIGwgPyBwIDogZF0pLCBtLmZpcmVXaXRoKGcsIFtFLCBDXSksIGYgJiYgKHkudHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLCBbRSwgaF0pLCAtLXcuYWN0aXZlIHx8IHcuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSk7XG4gICAgICAgICAgICB9cmV0dXJuIEU7XG4gICAgICAgIH0sIGdldEpTT046IGZ1bmN0aW9uIGdldEpTT04oZSwgdCwgbikge1xuICAgICAgICAgICAgcmV0dXJuIHcuZ2V0KGUsIHQsIG4sIFwianNvblwiKTtcbiAgICAgICAgfSwgZ2V0U2NyaXB0OiBmdW5jdGlvbiBnZXRTY3JpcHQoZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIHcuZ2V0KGUsIHZvaWQgMCwgdCwgXCJzY3JpcHRcIik7XG4gICAgICAgIH0gfSksIHcuZWFjaChbXCJnZXRcIiwgXCJwb3N0XCJdLCBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB3W3RdID0gZnVuY3Rpb24gKGUsIG4sIHIsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBnKG4pICYmIChpID0gaSB8fCByLCByID0gbiwgbiA9IHZvaWQgMCksIHcuYWpheCh3LmV4dGVuZCh7IHVybDogZSwgdHlwZTogdCwgZGF0YVR5cGU6IGksIGRhdGE6IG4sIHN1Y2Nlc3M6IHIgfSwgdy5pc1BsYWluT2JqZWN0KGUpICYmIGUpKTtcbiAgICAgICAgfTtcbiAgICB9KSwgdy5fZXZhbFVybCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB3LmFqYXgoeyB1cmw6IGUsIHR5cGU6IFwiR0VUXCIsIGRhdGFUeXBlOiBcInNjcmlwdFwiLCBjYWNoZTogITAsIGFzeW5jOiAhMSwgZ2xvYmFsOiAhMSwgXCJ0aHJvd3NcIjogITAgfSk7XG4gICAgfSwgdy5mbi5leHRlbmQoeyB3cmFwQWxsOiBmdW5jdGlvbiB3cmFwQWxsKGUpIHtcbiAgICAgICAgICAgIHZhciB0O3JldHVybiB0aGlzWzBdICYmIChnKGUpICYmIChlID0gZS5jYWxsKHRoaXNbMF0pKSwgdCA9IHcoZSwgdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksIHRoaXNbMF0ucGFyZW50Tm9kZSAmJiB0Lmluc2VydEJlZm9yZSh0aGlzWzBdKSwgdC5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBlID0gdGhpczt3aGlsZSAoZS5maXJzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBlID0gZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICAgICAgICB9cmV0dXJuIGU7XG4gICAgICAgICAgICB9KS5hcHBlbmQodGhpcykpLCB0aGlzO1xuICAgICAgICB9LCB3cmFwSW5uZXI6IGZ1bmN0aW9uIHdyYXBJbm5lcihlKSB7XG4gICAgICAgICAgICByZXR1cm4gZyhlKSA/IHRoaXMuZWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHcodGhpcykud3JhcElubmVyKGUuY2FsbCh0aGlzLCB0KSk7XG4gICAgICAgICAgICB9KSA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB3KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBuID0gdC5jb250ZW50cygpO24ubGVuZ3RoID8gbi53cmFwQWxsKGUpIDogdC5hcHBlbmQoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgd3JhcDogZnVuY3Rpb24gd3JhcChlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGcoZSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgIHcodGhpcykud3JhcEFsbCh0ID8gZS5jYWxsKHRoaXMsIG4pIDogZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdW53cmFwOiBmdW5jdGlvbiB1bndyYXAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50KGUpLm5vdChcImJvZHlcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdyh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpO1xuICAgICAgICAgICAgfSksIHRoaXM7XG4gICAgICAgIH0gfSksIHcuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiAhdy5leHByLnBzZXVkb3MudmlzaWJsZShlKTtcbiAgICB9LCB3LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuICEhKGUub2Zmc2V0V2lkdGggfHwgZS5vZmZzZXRIZWlnaHQgfHwgZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCk7XG4gICAgfSwgdy5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBlLlhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfTt2YXIgVnQgPSB7IDA6IDIwMCwgMTIyMzogMjA0IH0sXG4gICAgICAgIEd0ID0gdy5hamF4U2V0dGluZ3MueGhyKCk7aC5jb3JzID0gISFHdCAmJiBcIndpdGhDcmVkZW50aWFsc1wiIGluIEd0LCBoLmFqYXggPSBHdCA9ICEhR3QsIHcuYWpheFRyYW5zcG9ydChmdW5jdGlvbiAodCkge1xuICAgICAgICB2YXIgX24sIHI7aWYgKGguY29ycyB8fCBHdCAmJiAhdC5jcm9zc0RvbWFpbikgcmV0dXJuIHsgc2VuZDogZnVuY3Rpb24gc2VuZChpLCBvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEsXG4gICAgICAgICAgICAgICAgICAgIHMgPSB0LnhocigpO2lmIChzLm9wZW4odC50eXBlLCB0LnVybCwgdC5hc3luYywgdC51c2VybmFtZSwgdC5wYXNzd29yZCksIHQueGhyRmllbGRzKSBmb3IgKGEgaW4gdC54aHJGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgc1thXSA9IHQueGhyRmllbGRzW2FdO1xuICAgICAgICAgICAgICAgIH10Lm1pbWVUeXBlICYmIHMub3ZlcnJpZGVNaW1lVHlwZSAmJiBzLm92ZXJyaWRlTWltZVR5cGUodC5taW1lVHlwZSksIHQuY3Jvc3NEb21haW4gfHwgaVtcIlgtUmVxdWVzdGVkLVdpdGhcIl0gfHwgKGlbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiKTtmb3IgKGEgaW4gaSkge1xuICAgICAgICAgICAgICAgICAgICBzLnNldFJlcXVlc3RIZWFkZXIoYSwgaVthXSk7XG4gICAgICAgICAgICAgICAgfV9uID0gZnVuY3Rpb24gbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbiAmJiAoX24gPSByID0gcy5vbmxvYWQgPSBzLm9uZXJyb3IgPSBzLm9uYWJvcnQgPSBzLm9udGltZW91dCA9IHMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbCwgXCJhYm9ydFwiID09PSBlID8gcy5hYm9ydCgpIDogXCJlcnJvclwiID09PSBlID8gXCJudW1iZXJcIiAhPSB0eXBlb2Ygcy5zdGF0dXMgPyBvKDAsIFwiZXJyb3JcIikgOiBvKHMuc3RhdHVzLCBzLnN0YXR1c1RleHQpIDogbyhWdFtzLnN0YXR1c10gfHwgcy5zdGF0dXMsIHMuc3RhdHVzVGV4dCwgXCJ0ZXh0XCIgIT09IChzLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIikgfHwgXCJzdHJpbmdcIiAhPSB0eXBlb2Ygcy5yZXNwb25zZVRleHQgPyB7IGJpbmFyeTogcy5yZXNwb25zZSB9IDogeyB0ZXh0OiBzLnJlc3BvbnNlVGV4dCB9LCBzLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSwgcy5vbmxvYWQgPSBfbigpLCByID0gcy5vbmVycm9yID0gcy5vbnRpbWVvdXQgPSBfbihcImVycm9yXCIpLCB2b2lkIDAgIT09IHMub25hYm9ydCA/IHMub25hYm9ydCA9IHIgOiBzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgNCA9PT0gcy5yZWFkeVN0YXRlICYmIGUuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbiAmJiByKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIF9uID0gX24oXCJhYm9ydFwiKTt0cnkge1xuICAgICAgICAgICAgICAgICAgICBzLnNlbmQodC5oYXNDb250ZW50ICYmIHQuZGF0YSB8fCBudWxsKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfbikgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgICAgICAgX24gJiYgX24oKTtcbiAgICAgICAgICAgIH0gfTtcbiAgICB9KSwgdy5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuY3Jvc3NEb21haW4gJiYgKGUuY29udGVudHMuc2NyaXB0ID0gITEpO1xuICAgIH0pLCB3LmFqYXhTZXR1cCh7IGFjY2VwdHM6IHsgc2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCIgfSwgY29udGVudHM6IHsgc2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi8gfSwgY29udmVydGVyczogeyBcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uIHRleHRTY3JpcHQoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3Lmdsb2JhbEV2YWwoZSksIGU7XG4gICAgICAgICAgICB9IH0gfSksIHcuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2b2lkIDAgPT09IGUuY2FjaGUgJiYgKGUuY2FjaGUgPSAhMSksIGUuY3Jvc3NEb21haW4gJiYgKGUudHlwZSA9IFwiR0VUXCIpO1xuICAgIH0pLCB3LmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGUuY3Jvc3NEb21haW4pIHtcbiAgICAgICAgICAgIHZhciB0LCBfbjI7cmV0dXJuIHsgc2VuZDogZnVuY3Rpb24gc2VuZChpLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSB3KFwiPHNjcmlwdD5cIikucHJvcCh7IGNoYXJzZXQ6IGUuc2NyaXB0Q2hhcnNldCwgc3JjOiBlLnVybCB9KS5vbihcImxvYWQgZXJyb3JcIiwgX24yID0gZnVuY3Rpb24gbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZSgpLCBfbjIgPSBudWxsLCBlICYmIG8oXCJlcnJvclwiID09PSBlLnR5cGUgPyA0MDQgOiAyMDAsIGUudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCByLmhlYWQuYXBwZW5kQ2hpbGQodFswXSk7XG4gICAgICAgICAgICAgICAgfSwgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICAgICAgICAgICAgICBfbjIgJiYgX24yKCk7XG4gICAgICAgICAgICAgICAgfSB9O1xuICAgICAgICB9XG4gICAgfSk7dmFyIFl0ID0gW10sXG4gICAgICAgIFF0ID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/Lzt3LmFqYXhTZXR1cCh7IGpzb25wOiBcImNhbGxiYWNrXCIsIGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uIGpzb25wQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICB2YXIgZSA9IFl0LnBvcCgpIHx8IHcuZXhwYW5kbyArIFwiX1wiICsgRXQrKztyZXR1cm4gdGhpc1tlXSA9ICEwLCBlO1xuICAgICAgICB9IH0pLCB3LmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uICh0LCBuLCByKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBzID0gITEgIT09IHQuanNvbnAgJiYgKFF0LnRlc3QodC51cmwpID8gXCJ1cmxcIiA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIHQuZGF0YSAmJiAwID09PSAodC5jb250ZW50VHlwZSB8fCBcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIFF0LnRlc3QodC5kYXRhKSAmJiBcImRhdGFcIik7aWYgKHMgfHwgXCJqc29ucFwiID09PSB0LmRhdGFUeXBlc1swXSkgcmV0dXJuIGkgPSB0Lmpzb25wQ2FsbGJhY2sgPSBnKHQuanNvbnBDYWxsYmFjaykgPyB0Lmpzb25wQ2FsbGJhY2soKSA6IHQuanNvbnBDYWxsYmFjaywgcyA/IHRbc10gPSB0W3NdLnJlcGxhY2UoUXQsIFwiJDFcIiArIGkpIDogITEgIT09IHQuanNvbnAgJiYgKHQudXJsICs9IChrdC50ZXN0KHQudXJsKSA/IFwiJlwiIDogXCI/XCIpICsgdC5qc29ucCArIFwiPVwiICsgaSksIHQuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGEgfHwgdy5lcnJvcihpICsgXCIgd2FzIG5vdCBjYWxsZWRcIiksIGFbMF07XG4gICAgICAgIH0sIHQuZGF0YVR5cGVzWzBdID0gXCJqc29uXCIsIG8gPSBlW2ldLCBlW2ldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYSA9IGFyZ3VtZW50cztcbiAgICAgICAgfSwgci5hbHdheXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdm9pZCAwID09PSBvID8gdyhlKS5yZW1vdmVQcm9wKGkpIDogZVtpXSA9IG8sIHRbaV0gJiYgKHQuanNvbnBDYWxsYmFjayA9IG4uanNvbnBDYWxsYmFjaywgWXQucHVzaChpKSksIGEgJiYgZyhvKSAmJiBvKGFbMF0pLCBhID0gbyA9IHZvaWQgMDtcbiAgICAgICAgfSksIFwic2NyaXB0XCI7XG4gICAgfSksIGguY3JlYXRlSFRNTERvY3VtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHIuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHk7cmV0dXJuIGUuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiLCAyID09PSBlLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgIH0oKSwgdy5wYXJzZUhUTUwgPSBmdW5jdGlvbiAoZSwgdCwgbikge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSkgcmV0dXJuIFtdO1wiYm9vbGVhblwiID09IHR5cGVvZiB0ICYmIChuID0gdCwgdCA9ICExKTt2YXIgaSwgbywgYTtyZXR1cm4gdCB8fCAoaC5jcmVhdGVIVE1MRG9jdW1lbnQgPyAoKGkgPSAodCA9IHIuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpKS5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKSkuaHJlZiA9IHIubG9jYXRpb24uaHJlZiwgdC5oZWFkLmFwcGVuZENoaWxkKGkpKSA6IHQgPSByKSwgbyA9IEEuZXhlYyhlKSwgYSA9ICFuICYmIFtdLCBvID8gW3QuY3JlYXRlRWxlbWVudChvWzFdKV0gOiAobyA9IHhlKFtlXSwgdCwgYSksIGEgJiYgYS5sZW5ndGggJiYgdyhhKS5yZW1vdmUoKSwgdy5tZXJnZShbXSwgby5jaGlsZE5vZGVzKSk7XG4gICAgfSwgdy5mbi5sb2FkID0gZnVuY3Rpb24gKGUsIHQsIG4pIHtcbiAgICAgICAgdmFyIHIsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbyxcbiAgICAgICAgICAgIGEgPSB0aGlzLFxuICAgICAgICAgICAgcyA9IGUuaW5kZXhPZihcIiBcIik7cmV0dXJuIHMgPiAtMSAmJiAociA9IHZ0KGUuc2xpY2UocykpLCBlID0gZS5zbGljZSgwLCBzKSksIGcodCkgPyAobiA9IHQsIHQgPSB2b2lkIDApIDogdCAmJiBcIm9iamVjdFwiID09ICh0eXBlb2YgdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHQpKSAmJiAoaSA9IFwiUE9TVFwiKSwgYS5sZW5ndGggPiAwICYmIHcuYWpheCh7IHVybDogZSwgdHlwZTogaSB8fCBcIkdFVFwiLCBkYXRhVHlwZTogXCJodG1sXCIsIGRhdGE6IHQgfSkuZG9uZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgbyA9IGFyZ3VtZW50cywgYS5odG1sKHIgPyB3KFwiPGRpdj5cIikuYXBwZW5kKHcucGFyc2VIVE1MKGUpKS5maW5kKHIpIDogZSk7XG4gICAgICAgIH0pLmFsd2F5cyhuICYmIGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICBhLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG4uYXBwbHkodGhpcywgbyB8fCBbZS5yZXNwb25zZVRleHQsIHQsIGVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSwgdGhpcztcbiAgICB9LCB3LmVhY2goW1wiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCJdLCBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB3LmZuW3RdID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uKHQsIGUpO1xuICAgICAgICB9O1xuICAgIH0pLCB3LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB3LmdyZXAody50aW1lcnMsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gZSA9PT0gdC5lbGVtO1xuICAgICAgICB9KS5sZW5ndGg7XG4gICAgfSwgdy5vZmZzZXQgPSB7IHNldE9mZnNldDogZnVuY3Rpb24gc2V0T2Zmc2V0KGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHZhciByLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgdSxcbiAgICAgICAgICAgICAgICBsLFxuICAgICAgICAgICAgICAgIGMgPSB3LmNzcyhlLCBcInBvc2l0aW9uXCIpLFxuICAgICAgICAgICAgICAgIGYgPSB3KGUpLFxuICAgICAgICAgICAgICAgIHAgPSB7fTtcInN0YXRpY1wiID09PSBjICYmIChlLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiKSwgcyA9IGYub2Zmc2V0KCksIG8gPSB3LmNzcyhlLCBcInRvcFwiKSwgdSA9IHcuY3NzKGUsIFwibGVmdFwiKSwgKGwgPSAoXCJhYnNvbHV0ZVwiID09PSBjIHx8IFwiZml4ZWRcIiA9PT0gYykgJiYgKG8gKyB1KS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xKSA/IChhID0gKHIgPSBmLnBvc2l0aW9uKCkpLnRvcCwgaSA9IHIubGVmdCkgOiAoYSA9IHBhcnNlRmxvYXQobykgfHwgMCwgaSA9IHBhcnNlRmxvYXQodSkgfHwgMCksIGcodCkgJiYgKHQgPSB0LmNhbGwoZSwgbiwgdy5leHRlbmQoe30sIHMpKSksIG51bGwgIT0gdC50b3AgJiYgKHAudG9wID0gdC50b3AgLSBzLnRvcCArIGEpLCBudWxsICE9IHQubGVmdCAmJiAocC5sZWZ0ID0gdC5sZWZ0IC0gcy5sZWZ0ICsgaSksIFwidXNpbmdcIiBpbiB0ID8gdC51c2luZy5jYWxsKGUsIHApIDogZi5jc3MocCk7XG4gICAgICAgIH0gfSwgdy5mbi5leHRlbmQoeyBvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChlKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZvaWQgMCA9PT0gZSA/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB3Lm9mZnNldC5zZXRPZmZzZXQodGhpcywgZSwgdCk7XG4gICAgICAgICAgICB9KTt2YXIgdCxcbiAgICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICAgIHIgPSB0aGlzWzBdO2lmIChyKSByZXR1cm4gci5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA/ICh0ID0gci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbiA9IHIub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldywgeyB0b3A6IHQudG9wICsgbi5wYWdlWU9mZnNldCwgbGVmdDogdC5sZWZ0ICsgbi5wYWdlWE9mZnNldCB9KSA6IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gICAgICAgIH0sIHBvc2l0aW9uOiBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzWzBdKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUsXG4gICAgICAgICAgICAgICAgICAgIHQsXG4gICAgICAgICAgICAgICAgICAgIG4sXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzWzBdLFxuICAgICAgICAgICAgICAgICAgICBpID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtpZiAoXCJmaXhlZFwiID09PSB3LmNzcyhyLCBcInBvc2l0aW9uXCIpKSB0ID0gci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHRoaXMub2Zmc2V0KCksIG4gPSByLm93bmVyRG9jdW1lbnQsIGUgPSByLm9mZnNldFBhcmVudCB8fCBuLmRvY3VtZW50RWxlbWVudDt3aGlsZSAoZSAmJiAoZSA9PT0gbi5ib2R5IHx8IGUgPT09IG4uZG9jdW1lbnRFbGVtZW50KSAmJiBcInN0YXRpY1wiID09PSB3LmNzcyhlLCBcInBvc2l0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICB9ZSAmJiBlICE9PSByICYmIDEgPT09IGUubm9kZVR5cGUgJiYgKChpID0gdyhlKS5vZmZzZXQoKSkudG9wICs9IHcuY3NzKGUsIFwiYm9yZGVyVG9wV2lkdGhcIiwgITApLCBpLmxlZnQgKz0gdy5jc3MoZSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgITApKTtcbiAgICAgICAgICAgICAgICB9cmV0dXJuIHsgdG9wOiB0LnRvcCAtIGkudG9wIC0gdy5jc3MociwgXCJtYXJnaW5Ub3BcIiwgITApLCBsZWZ0OiB0LmxlZnQgLSBpLmxlZnQgLSB3LmNzcyhyLCBcIm1hcmdpbkxlZnRcIiwgITApIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9mZnNldFBhcmVudDogZnVuY3Rpb24gb2Zmc2V0UGFyZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMub2Zmc2V0UGFyZW50O3doaWxlIChlICYmIFwic3RhdGljXCIgPT09IHcuY3NzKGUsIFwicG9zaXRpb25cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IGUub2Zmc2V0UGFyZW50O1xuICAgICAgICAgICAgICAgIH1yZXR1cm4gZSB8fCBiZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IH0pLCB3LmVhY2goeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHZhciBuID0gXCJwYWdlWU9mZnNldFwiID09PSB0O3cuZm5bZV0gPSBmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHoodGhpcywgZnVuY3Rpb24gKGUsIHIsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbztpZiAoeShlKSA/IG8gPSBlIDogOSA9PT0gZS5ub2RlVHlwZSAmJiAobyA9IGUuZGVmYXVsdFZpZXcpLCB2b2lkIDAgPT09IGkpIHJldHVybiBvID8gb1t0XSA6IGVbcl07byA/IG8uc2Nyb2xsVG8obiA/IG8ucGFnZVhPZmZzZXQgOiBpLCBuID8gaSA6IG8ucGFnZVlPZmZzZXQpIDogZVtyXSA9IGk7XG4gICAgICAgICAgICB9LCBlLCByLCBhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgICAgfTtcbiAgICB9KSwgdy5lYWNoKFtcInRvcFwiLCBcImxlZnRcIl0sIGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgIHcuY3NzSG9va3NbdF0gPSBfZShoLnBpeGVsUG9zaXRpb24sIGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgICAgICBpZiAobikgcmV0dXJuIG4gPSBGZShlLCB0KSwgV2UudGVzdChuKSA/IHcoZSkucG9zaXRpb24oKVt0XSArIFwicHhcIiA6IG47XG4gICAgICAgIH0pO1xuICAgIH0pLCB3LmVhY2goeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdy5lYWNoKHsgcGFkZGluZzogXCJpbm5lclwiICsgZSwgY29udGVudDogdCwgXCJcIjogXCJvdXRlclwiICsgZSB9LCBmdW5jdGlvbiAobiwgcikge1xuICAgICAgICAgICAgdy5mbltyXSA9IGZ1bmN0aW9uIChpLCBvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHMubGVuZ3RoICYmIChuIHx8IFwiYm9vbGVhblwiICE9IHR5cGVvZiBpKSxcbiAgICAgICAgICAgICAgICAgICAgcyA9IG4gfHwgKCEwID09PSBpIHx8ICEwID09PSBvID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIpO3JldHVybiB6KHRoaXMsIGZ1bmN0aW9uICh0LCBuLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvO3JldHVybiB5KHQpID8gMCA9PT0gci5pbmRleE9mKFwib3V0ZXJcIikgPyB0W1wiaW5uZXJcIiArIGVdIDogdC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIGVdIDogOSA9PT0gdC5ub2RlVHlwZSA/IChvID0gdC5kb2N1bWVudEVsZW1lbnQsIE1hdGgubWF4KHQuYm9keVtcInNjcm9sbFwiICsgZV0sIG9bXCJzY3JvbGxcIiArIGVdLCB0LmJvZHlbXCJvZmZzZXRcIiArIGVdLCBvW1wib2Zmc2V0XCIgKyBlXSwgb1tcImNsaWVudFwiICsgZV0pKSA6IHZvaWQgMCA9PT0gaSA/IHcuY3NzKHQsIG4sIHMpIDogdy5zdHlsZSh0LCBuLCBpLCBzKTtcbiAgICAgICAgICAgICAgICB9LCB0LCBhID8gaSA6IHZvaWQgMCwgYSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KSwgdy5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24gKGUsIHQpIHtcbiAgICAgICAgdy5mblt0XSA9IGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyB0aGlzLm9uKHQsIG51bGwsIGUsIG4pIDogdGhpcy50cmlnZ2VyKHQpO1xuICAgICAgICB9O1xuICAgIH0pLCB3LmZuLmV4dGVuZCh7IGhvdmVyOiBmdW5jdGlvbiBob3ZlcihlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb3VzZWVudGVyKGUpLm1vdXNlbGVhdmUodCB8fCBlKTtcbiAgICAgICAgfSB9KSwgdy5mbi5leHRlbmQoeyBiaW5kOiBmdW5jdGlvbiBiaW5kKGUsIHQsIG4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uKGUsIG51bGwsIHQsIG4pO1xuICAgICAgICB9LCB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZChlLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vZmYoZSwgbnVsbCwgdCk7XG4gICAgICAgIH0sIGRlbGVnYXRlOiBmdW5jdGlvbiBkZWxlZ2F0ZShlLCB0LCBuLCByKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vbih0LCBlLCBuLCByKTtcbiAgICAgICAgfSwgdW5kZWxlZ2F0ZTogZnVuY3Rpb24gdW5kZWxlZ2F0ZShlLCB0LCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gMSA9PT0gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMub2ZmKGUsIFwiKipcIikgOiB0aGlzLm9mZih0LCBlIHx8IFwiKipcIiwgbik7XG4gICAgICAgIH0gfSksIHcucHJveHkgPSBmdW5jdGlvbiAoZSwgdCkge1xuICAgICAgICB2YXIgbiwgciwgaTtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiAobiA9IGVbdF0sIHQgPSBlLCBlID0gbiksIGcoZSkpIHJldHVybiByID0gby5jYWxsKGFyZ3VtZW50cywgMiksIGkgPSBmdW5jdGlvbiBpKCkge1xuICAgICAgICAgICAgcmV0dXJuIGUuYXBwbHkodCB8fCB0aGlzLCByLmNvbmNhdChvLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICB9LCBpLmd1aWQgPSBlLmd1aWQgPSBlLmd1aWQgfHwgdy5ndWlkKyssIGk7XG4gICAgfSwgdy5ob2xkUmVhZHkgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlID8gdy5yZWFkeVdhaXQrKyA6IHcucmVhZHkoITApO1xuICAgIH0sIHcuaXNBcnJheSA9IEFycmF5LmlzQXJyYXksIHcucGFyc2VKU09OID0gSlNPTi5wYXJzZSwgdy5ub2RlTmFtZSA9IE4sIHcuaXNGdW5jdGlvbiA9IGcsIHcuaXNXaW5kb3cgPSB5LCB3LmNhbWVsQ2FzZSA9IEcsIHcudHlwZSA9IHgsIHcubm93ID0gRGF0ZS5ub3csIHcuaXNOdW1lcmljID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHQgPSB3LnR5cGUoZSk7cmV0dXJuIChcIm51bWJlclwiID09PSB0IHx8IFwic3RyaW5nXCIgPT09IHQpICYmICFpc05hTihlIC0gcGFyc2VGbG9hdChlKSk7XG4gICAgfSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCAmJiBkZWZpbmUoXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHc7XG4gICAgfSk7dmFyIEp0ID0gZS5qUXVlcnksXG4gICAgICAgIEt0ID0gZS4kO3JldHVybiB3Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZS4kID09PSB3ICYmIChlLiQgPSBLdCksIHQgJiYgZS5qUXVlcnkgPT09IHcgJiYgKGUualF1ZXJ5ID0gSnQpLCB3O1xuICAgIH0sIHQgfHwgKGUualF1ZXJ5ID0gZS4kID0gdyksIHc7XG59KTtcblxuLypcbioganF1ZXJ5LW1hdGNoLWhlaWdodCAwLjcuMiBieSBAbGlhYnJ1XG4qIGh0dHA6Ly9icm0uaW8vanF1ZXJ5LW1hdGNoLWhlaWdodC9cbiogTGljZW5zZSBNSVRcbiovXG4hZnVuY3Rpb24gKHQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFtcImpxdWVyeVwiXSwgdCkgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IHQocmVxdWlyZShcImpxdWVyeVwiKSkgOiB0KGpRdWVyeSk7XG59KGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGUgPSAtMSxcbiAgICAgICAgbyA9IC0xLFxuICAgICAgICBuID0gZnVuY3Rpb24gbih0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHQpIHx8IDA7XG4gICAgfSxcbiAgICAgICAgYSA9IGZ1bmN0aW9uIGEoZSkge1xuICAgICAgICB2YXIgbyA9IDEsXG4gICAgICAgICAgICBhID0gdChlKSxcbiAgICAgICAgICAgIGkgPSBudWxsLFxuICAgICAgICAgICAgciA9IFtdO3JldHVybiBhLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0KHRoaXMpLFxuICAgICAgICAgICAgICAgIGEgPSBlLm9mZnNldCgpLnRvcCAtIG4oZS5jc3MoXCJtYXJnaW4tdG9wXCIpKSxcbiAgICAgICAgICAgICAgICBzID0gci5sZW5ndGggPiAwID8gcltyLmxlbmd0aCAtIDFdIDogbnVsbDtudWxsID09PSBzID8gci5wdXNoKGUpIDogTWF0aC5mbG9vcihNYXRoLmFicyhpIC0gYSkpIDw9IG8gPyByW3IubGVuZ3RoIC0gMV0gPSBzLmFkZChlKSA6IHIucHVzaChlKSwgaSA9IGE7XG4gICAgICAgIH0pLCByO1xuICAgIH0sXG4gICAgICAgIGkgPSBmdW5jdGlvbiBpKGUpIHtcbiAgICAgICAgdmFyIG8gPSB7XG4gICAgICAgICAgICBieVJvdzogITAsIHByb3BlcnR5OiBcImhlaWdodFwiLCB0YXJnZXQ6IG51bGwsIHJlbW92ZTogITEgfTtyZXR1cm4gXCJvYmplY3RcIiA9PSAodHlwZW9mIGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihlKSkgPyB0LmV4dGVuZChvLCBlKSA6IChcImJvb2xlYW5cIiA9PSB0eXBlb2YgZSA/IG8uYnlSb3cgPSBlIDogXCJyZW1vdmVcIiA9PT0gZSAmJiAoby5yZW1vdmUgPSAhMCksIG8pO1xuICAgIH0sXG4gICAgICAgIHIgPSB0LmZuLm1hdGNoSGVpZ2h0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIG8gPSBpKGUpO2lmIChvLnJlbW92ZSkge1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzO3JldHVybiB0aGlzLmNzcyhvLnByb3BlcnR5LCBcIlwiKSwgdC5lYWNoKHIuX2dyb3VwcywgZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgICAgICAgICBlLmVsZW1lbnRzID0gZS5lbGVtZW50cy5ub3Qobik7XG4gICAgICAgICAgICB9KSwgdGhpcztcbiAgICAgICAgfXJldHVybiB0aGlzLmxlbmd0aCA8PSAxICYmICFvLnRhcmdldCA/IHRoaXMgOiAoci5fZ3JvdXBzLnB1c2goeyBlbGVtZW50czogdGhpcywgb3B0aW9uczogbyB9KSwgci5fYXBwbHkodGhpcywgbyksIHRoaXMpO1xuICAgIH07ci52ZXJzaW9uID0gXCIwLjcuMlwiLCByLl9ncm91cHMgPSBbXSwgci5fdGhyb3R0bGUgPSA4MCwgci5fbWFpbnRhaW5TY3JvbGwgPSAhMSwgci5fYmVmb3JlVXBkYXRlID0gbnVsbCwgci5fYWZ0ZXJVcGRhdGUgPSBudWxsLCByLl9yb3dzID0gYSwgci5fcGFyc2UgPSBuLCByLl9wYXJzZU9wdGlvbnMgPSBpLCByLl9hcHBseSA9IGZ1bmN0aW9uIChlLCBvKSB7XG4gICAgICAgIHZhciBzID0gaShvKSxcbiAgICAgICAgICAgIGggPSB0KGUpLFxuICAgICAgICAgICAgbCA9IFtoXSxcbiAgICAgICAgICAgIGMgPSB0KHdpbmRvdykuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICBwID0gdChcImh0bWxcIikub3V0ZXJIZWlnaHQoITApLFxuICAgICAgICAgICAgdSA9IGgucGFyZW50cygpLmZpbHRlcihcIjpoaWRkZW5cIik7cmV0dXJuIHUuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHQodGhpcyk7ZS5kYXRhKFwic3R5bGUtY2FjaGVcIiwgZS5hdHRyKFwic3R5bGVcIikpO1xuICAgICAgICB9KSwgdS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIiksIHMuYnlSb3cgJiYgIXMudGFyZ2V0ICYmIChoLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0KHRoaXMpLFxuICAgICAgICAgICAgICAgIG8gPSBlLmNzcyhcImRpc3BsYXlcIik7XCJpbmxpbmUtYmxvY2tcIiAhPT0gbyAmJiBcImZsZXhcIiAhPT0gbyAmJiBcImlubGluZS1mbGV4XCIgIT09IG8gJiYgKG8gPSBcImJsb2NrXCIpLCBlLmRhdGEoXCJzdHlsZS1jYWNoZVwiLCBlLmF0dHIoXCJzdHlsZVwiKSksIGUuY3NzKHsgZGlzcGxheTogbywgXCJwYWRkaW5nLXRvcFwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMFwiLCBcIm1hcmdpbi10b3BcIjogXCIwXCIsIFwibWFyZ2luLWJvdHRvbVwiOiBcIjBcIiwgXCJib3JkZXItdG9wLXdpZHRoXCI6IFwiMFwiLCBcImJvcmRlci1ib3R0b20td2lkdGhcIjogXCIwXCIsIGhlaWdodDogXCIxMDBweFwiLCBvdmVyZmxvdzogXCJoaWRkZW5cIiB9KTtcbiAgICAgICAgfSksIGwgPSBhKGgpLCBoLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0KHRoaXMpO2UuYXR0cihcInN0eWxlXCIsIGUuZGF0YShcInN0eWxlLWNhY2hlXCIpIHx8IFwiXCIpO1xuICAgICAgICB9KSksIHQuZWFjaChsLCBmdW5jdGlvbiAoZSwgbykge1xuICAgICAgICAgICAgdmFyIGEgPSB0KG8pLFxuICAgICAgICAgICAgICAgIGkgPSAwO2lmIChzLnRhcmdldCkgaSA9IHMudGFyZ2V0Lm91dGVySGVpZ2h0KCExKTtlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocy5ieVJvdyAmJiBhLmxlbmd0aCA8PSAxKSByZXR1cm4gdm9pZCBhLmNzcyhzLnByb3BlcnR5LCBcIlwiKTthLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gZS5hdHRyKFwic3R5bGVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gZS5jc3MoXCJkaXNwbGF5XCIpO1wiaW5saW5lLWJsb2NrXCIgIT09IG4gJiYgXCJmbGV4XCIgIT09IG4gJiYgXCJpbmxpbmUtZmxleFwiICE9PSBuICYmIChuID0gXCJibG9ja1wiKTt2YXIgYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IG4gfTthW3MucHJvcGVydHldID0gXCJcIiwgZS5jc3MoYSksIGUub3V0ZXJIZWlnaHQoITEpID4gaSAmJiAoaSA9IGUub3V0ZXJIZWlnaHQoITEpKSwgbyA/IGUuYXR0cihcInN0eWxlXCIsIG8pIDogZS5jc3MoXCJkaXNwbGF5XCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfWEuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB0KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBvID0gMDtzLnRhcmdldCAmJiBlLmlzKHMudGFyZ2V0KSB8fCAoXCJib3JkZXItYm94XCIgIT09IGUuY3NzKFwiYm94LXNpemluZ1wiKSAmJiAobyArPSBuKGUuY3NzKFwiYm9yZGVyLXRvcC13aWR0aFwiKSkgKyBuKGUuY3NzKFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiKSksIG8gKz0gbihlLmNzcyhcInBhZGRpbmctdG9wXCIpKSArIG4oZS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiKSkpLCBlLmNzcyhzLnByb3BlcnR5LCBpIC0gbyArIFwicHhcIikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLCB1LmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB0KHRoaXMpO2UuYXR0cihcInN0eWxlXCIsIGUuZGF0YShcInN0eWxlLWNhY2hlXCIpIHx8IG51bGwpO1xuICAgICAgICB9KSwgci5fbWFpbnRhaW5TY3JvbGwgJiYgdCh3aW5kb3cpLnNjcm9sbFRvcChjIC8gcCAqIHQoXCJodG1sXCIpLm91dGVySGVpZ2h0KCEwKSksIHRoaXM7XG4gICAgfSwgci5fYXBwbHlEYXRhQXBpID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZSA9IHt9O3QoXCJbZGF0YS1tYXRjaC1oZWlnaHRdLCBbZGF0YS1taF1cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbyA9IHQodGhpcyksXG4gICAgICAgICAgICAgICAgbiA9IG8uYXR0cihcImRhdGEtbWhcIikgfHwgby5hdHRyKFwiZGF0YS1tYXRjaC1oZWlnaHRcIik7biBpbiBlID8gZVtuXSA9IGVbbl0uYWRkKG8pIDogZVtuXSA9IG87XG4gICAgICAgIH0pLCB0LmVhY2goZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5tYXRjaEhlaWdodCghMCk7XG4gICAgICAgIH0pO1xuICAgIH07dmFyIHMgPSBmdW5jdGlvbiBzKGUpIHtcbiAgICAgICAgci5fYmVmb3JlVXBkYXRlICYmIHIuX2JlZm9yZVVwZGF0ZShlLCByLl9ncm91cHMpLCB0LmVhY2goci5fZ3JvdXBzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByLl9hcHBseSh0aGlzLmVsZW1lbnRzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9KSwgci5fYWZ0ZXJVcGRhdGUgJiYgci5fYWZ0ZXJVcGRhdGUoZSwgci5fZ3JvdXBzKTtcbiAgICB9O3IuX3VwZGF0ZSA9IGZ1bmN0aW9uIChuLCBhKSB7XG4gICAgICAgIGlmIChhICYmIFwicmVzaXplXCIgPT09IGEudHlwZSkge1xuICAgICAgICAgICAgdmFyIGkgPSB0KHdpbmRvdykud2lkdGgoKTtpZiAoaSA9PT0gZSkgcmV0dXJuO2UgPSBpO1xuICAgICAgICB9biA/IG8gPT09IC0xICYmIChvID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzKGEpLCBvID0gLTE7XG4gICAgICAgIH0sIHIuX3Rocm90dGxlKSkgOiBzKGEpO1xuICAgIH0sIHQoci5fYXBwbHlEYXRhQXBpKTt2YXIgaCA9IHQuZm4ub24gPyBcIm9uXCIgOiBcImJpbmRcIjt0KHdpbmRvdylbaF0oXCJsb2FkXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHIuX3VwZGF0ZSghMSwgdCk7XG4gICAgfSksIHQod2luZG93KVtoXShcInJlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZVwiLCBmdW5jdGlvbiAodCkge1xuICAgICAgICByLl91cGRhdGUoITAsIHQpO1xuICAgIH0pO1xufSk7XG4vKlxuICAgIGpRdWVyeSBNYXNrZWQgSW5wdXQgUGx1Z2luXG4gICAgQ29weXJpZ2h0IChjKSAyMDA3IC0gMjAxNSBKb3NoIEJ1c2ggKGRpZ2l0YWxidXNoLmNvbSlcbiAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly9kaWdpdGFsYnVzaC5jb20vcHJvamVjdHMvbWFza2VkLWlucHV0LXBsdWdpbi8jbGljZW5zZSlcbiAgICBWZXJzaW9uOiAxLjQuMVxuKi9cbiFmdW5jdGlvbiAoYSkge1xuICAgIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoW1wianF1ZXJ5XCJdLCBhKSA6IGEoXCJvYmplY3RcIiA9PSAodHlwZW9mIGV4cG9ydHMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihleHBvcnRzKSkgPyByZXF1aXJlKFwianF1ZXJ5XCIpIDogalF1ZXJ5KTtcbn0oZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgYixcbiAgICAgICAgYyA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgIGQgPSAvaXBob25lL2kudGVzdChjKSxcbiAgICAgICAgZSA9IC9jaHJvbWUvaS50ZXN0KGMpLFxuICAgICAgICBmID0gL2FuZHJvaWQvaS50ZXN0KGMpO2EubWFzayA9IHsgZGVmaW5pdGlvbnM6IHsgOTogXCJbMC05XVwiLCBhOiBcIltBLVphLXpdXCIsIFwiKlwiOiBcIltBLVphLXowLTldXCIgfSwgYXV0b2NsZWFyOiAhMCwgZGF0YU5hbWU6IFwicmF3TWFza0ZuXCIsIHBsYWNlaG9sZGVyOiBcIl9cIiB9LCBhLmZuLmV4dGVuZCh7IGNhcmV0OiBmdW5jdGlvbiBjYXJldChhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYztpZiAoMCAhPT0gdGhpcy5sZW5ndGggJiYgIXRoaXMuaXMoXCI6aGlkZGVuXCIpKSByZXR1cm4gXCJudW1iZXJcIiA9PSB0eXBlb2YgYSA/IChiID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgYiA/IGIgOiBhLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9uUmFuZ2UgPyB0aGlzLnNldFNlbGVjdGlvblJhbmdlKGEsIGIpIDogdGhpcy5jcmVhdGVUZXh0UmFuZ2UgJiYgKGMgPSB0aGlzLmNyZWF0ZVRleHRSYW5nZSgpLCBjLmNvbGxhcHNlKCEwKSwgYy5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsIGIpLCBjLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCBhKSwgYy5zZWxlY3QoKSk7XG4gICAgICAgICAgICB9KSkgOiAodGhpc1swXS5zZXRTZWxlY3Rpb25SYW5nZSA/IChhID0gdGhpc1swXS5zZWxlY3Rpb25TdGFydCwgYiA9IHRoaXNbMF0uc2VsZWN0aW9uRW5kKSA6IGRvY3VtZW50LnNlbGVjdGlvbiAmJiBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UgJiYgKGMgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKSwgYSA9IDAgLSBjLmR1cGxpY2F0ZSgpLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCAtMWU1KSwgYiA9IGEgKyBjLnRleHQubGVuZ3RoKSwgeyBiZWdpbjogYSwgZW5kOiBiIH0pO1xuICAgICAgICB9LCB1bm1hc2s6IGZ1bmN0aW9uIHVubWFzaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJ1bm1hc2tcIik7XG4gICAgICAgIH0sIG1hc2s6IGZ1bmN0aW9uIG1hc2soYywgZykge1xuICAgICAgICAgICAgdmFyIGgsIGksIGosIGssIGwsIG0sIG4sIG87aWYgKCFjICYmIHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGggPSBhKHRoaXNbMF0pO3ZhciBwID0gaC5kYXRhKGEubWFzay5kYXRhTmFtZSk7cmV0dXJuIHAgPyBwKCkgOiB2b2lkIDA7XG4gICAgICAgICAgICB9cmV0dXJuIGcgPSBhLmV4dGVuZCh7IGF1dG9jbGVhcjogYS5tYXNrLmF1dG9jbGVhciwgcGxhY2Vob2xkZXI6IGEubWFzay5wbGFjZWhvbGRlciwgY29tcGxldGVkOiBudWxsIH0sIGcpLCBpID0gYS5tYXNrLmRlZmluaXRpb25zLCBqID0gW10sIGsgPSBuID0gYy5sZW5ndGgsIGwgPSBudWxsLCBhLmVhY2goYy5zcGxpdChcIlwiKSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICBcIj9cIiA9PSBiID8gKG4tLSwgayA9IGEpIDogaVtiXSA/IChqLnB1c2gobmV3IFJlZ0V4cChpW2JdKSksIG51bGwgPT09IGwgJiYgKGwgPSBqLmxlbmd0aCAtIDEpLCBrID4gYSAmJiAobSA9IGoubGVuZ3RoIC0gMSkpIDogai5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfSksIHRoaXMudHJpZ2dlcihcInVubWFza1wiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZy5jb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSBsOyBtID49IGE7IGErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqW2FdICYmIENbYV0gPT09IHAoYSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1nLmNvbXBsZXRlZC5jYWxsKEIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWZ1bmN0aW9uIHAoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZy5wbGFjZWhvbGRlci5jaGFyQXQoYSA8IGcucGxhY2Vob2xkZXIubGVuZ3RoID8gYSA6IDApO1xuICAgICAgICAgICAgICAgIH1mdW5jdGlvbiBxKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7ICsrYSA8IG4gJiYgIWpbYV07KSB7fXJldHVybiBhO1xuICAgICAgICAgICAgICAgIH1mdW5jdGlvbiByKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IC0tYSA+PSAwICYmICFqW2FdOykge31yZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9ZnVuY3Rpb24gcyhhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjLCBkO2lmICghKDAgPiBhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjID0gYSwgZCA9IHEoYik7IG4gPiBjOyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaltjXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShuID4gZCAmJiBqW2NdLnRlc3QoQ1tkXSkpKSBicmVhaztDW2NdID0gQ1tkXSwgQ1tkXSA9IHAoZCksIGQgPSBxKGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH16KCksIEIuY2FyZXQoTWF0aC5tYXgobCwgYSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWZ1bmN0aW9uIHQoYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYiwgYywgZCwgZTtmb3IgKGIgPSBhLCBjID0gcChhKTsgbiA+IGI7IGIrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpbYl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA9IHEoYiksIGUgPSBDW2JdLCBDW2JdID0gYywgIShuID4gZCAmJiBqW2RdLnRlc3QoZSkpKSBicmVhaztjID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1mdW5jdGlvbiB1KCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IEIudmFsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gQi5jYXJldCgpO2lmIChvICYmIG8ubGVuZ3RoICYmIG8ubGVuZ3RoID4gYS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoQSghMCk7IGIuYmVnaW4gPiAwICYmICFqW2IuYmVnaW4gLSAxXTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmJlZ2luLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9aWYgKDAgPT09IGIuYmVnaW4pIGZvciAoOyBiLmJlZ2luIDwgbCAmJiAhaltiLmJlZ2luXTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmJlZ2luKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9Qi5jYXJldChiLmJlZ2luLCBiLmJlZ2luKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoQSghMCk7IGIuYmVnaW4gPCBuICYmICFqW2IuYmVnaW5dOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIuYmVnaW4rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1CLmNhcmV0KGIuYmVnaW4sIGIuYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICB9aCgpO1xuICAgICAgICAgICAgICAgIH1mdW5jdGlvbiB2KCkge1xuICAgICAgICAgICAgICAgICAgICBBKCksIEIudmFsKCkgIT0gRSAmJiBCLmNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIH1mdW5jdGlvbiB3KGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFCLnByb3AoXCJyZWFkb25seVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBhLndoaWNoIHx8IGEua2V5Q29kZTtvID0gQi52YWwoKSwgOCA9PT0gZiB8fCA0NiA9PT0gZiB8fCBkICYmIDEyNyA9PT0gZiA/IChiID0gQi5jYXJldCgpLCBjID0gYi5iZWdpbiwgZSA9IGIuZW5kLCBlIC0gYyA9PT0gMCAmJiAoYyA9IDQ2ICE9PSBmID8gcihjKSA6IGUgPSBxKGMgLSAxKSwgZSA9IDQ2ID09PSBmID8gcShlKSA6IGUpLCB5KGMsIGUpLCBzKGMsIGUgLSAxKSwgYS5wcmV2ZW50RGVmYXVsdCgpKSA6IDEzID09PSBmID8gdi5jYWxsKHRoaXMsIGEpIDogMjcgPT09IGYgJiYgKEIudmFsKEUpLCBCLmNhcmV0KDAsIEEoKSksIGEucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZnVuY3Rpb24geChiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghQi5wcm9wKFwicmVhZG9ubHlcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gYi53aGljaCB8fCBiLmtleUNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IEIuY2FyZXQoKTtpZiAoIShiLmN0cmxLZXkgfHwgYi5hbHRLZXkgfHwgYi5tZXRhS2V5IHx8IDMyID4gZykgJiYgZyAmJiAxMyAhPT0gZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmVuZCAtIGkuYmVnaW4gIT09IDAgJiYgKHkoaS5iZWdpbiwgaS5lbmQpLCBzKGkuYmVnaW4sIGkuZW5kIC0gMSkpLCBjID0gcShpLmJlZ2luIC0gMSksIG4gPiBjICYmIChkID0gU3RyaW5nLmZyb21DaGFyQ29kZShnKSwgaltjXS50ZXN0KGQpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodChjKSwgQ1tjXSA9IGQsIHooKSwgZSA9IHEoYyksIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrID0gZnVuY3Rpb24gaygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnByb3h5KGEuZm4uY2FyZXQsIEIsIGUpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O3NldFRpbWVvdXQoaywgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBCLmNhcmV0KGUpO2kuYmVnaW4gPD0gbSAmJiBoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1mdW5jdGlvbiB5KGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGM7Zm9yIChjID0gYTsgYiA+IGMgJiYgbiA+IGM7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaltjXSAmJiAoQ1tjXSA9IHAoYykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWZ1bmN0aW9uIHooKSB7XG4gICAgICAgICAgICAgICAgICAgIEIudmFsKEMuam9pbihcIlwiKSk7XG4gICAgICAgICAgICAgICAgfWZ1bmN0aW9uIEEoYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYixcbiAgICAgICAgICAgICAgICAgICAgICAgIGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IEIudmFsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gLTE7Zm9yIChiID0gMCwgZCA9IDA7IG4gPiBiOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqW2JdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChDW2JdID0gcChiKTsgZCsrIDwgZS5sZW5ndGg7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID0gZS5jaGFyQXQoZCAtIDEpLCBqW2JdLnRlc3QoYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENbYl0gPSBjLCBmID0gYjticmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAoZCA+IGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkoYiArIDEsIG4pO2JyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBDW2JdID09PSBlLmNoYXJBdChkKSAmJiBkKyssIGsgPiBiICYmIChmID0gYik7XG4gICAgICAgICAgICAgICAgICAgIH1yZXR1cm4gYSA/IHooKSA6IGsgPiBmICsgMSA/IGcuYXV0b2NsZWFyIHx8IEMuam9pbihcIlwiKSA9PT0gRCA/IChCLnZhbCgpICYmIEIudmFsKFwiXCIpLCB5KDAsIG4pKSA6IHooKSA6ICh6KCksIEIudmFsKEIudmFsKCkuc3Vic3RyaW5nKDAsIGYgKyAxKSkpLCBrID8gYiA6IGw7XG4gICAgICAgICAgICAgICAgfXZhciBCID0gYSh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgQyA9IGEubWFwKGMuc3BsaXQoXCJcIiksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj9cIiAhPSBhID8gaVthXSA/IHAoYikgOiBhIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBEID0gQy5qb2luKFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICBFID0gQi52YWwoKTtCLmRhdGEoYS5tYXNrLmRhdGFOYW1lLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLm1hcChDLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpbYl0gJiYgYSAhPSBwKGIpID8gYSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfSksIEIub25lKFwidW5tYXNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgQi5vZmYoXCIubWFza1wiKS5yZW1vdmVEYXRhKGEubWFzay5kYXRhTmFtZSk7XG4gICAgICAgICAgICAgICAgfSkub24oXCJmb2N1cy5tYXNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFCLnByb3AoXCJyZWFkb25seVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGIpO3ZhciBhO0UgPSBCLnZhbCgpLCBhID0gQSgpLCBiID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQi5nZXQoMCkgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKHooKSwgYSA9PSBjLnJlcGxhY2UoXCI/XCIsIFwiXCIpLmxlbmd0aCA/IEIuY2FyZXQoMCwgYSkgOiBCLmNhcmV0KGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLm9uKFwiYmx1ci5tYXNrXCIsIHYpLm9uKFwia2V5ZG93bi5tYXNrXCIsIHcpLm9uKFwia2V5cHJlc3MubWFza1wiLCB4KS5vbihcImlucHV0Lm1hc2sgcGFzdGUubWFza1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIEIucHJvcChcInJlYWRvbmx5XCIpIHx8IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBBKCEwKTtCLmNhcmV0KGEpLCBoKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH0pLCBlICYmIGYgJiYgQi5vZmYoXCJpbnB1dC5tYXNrXCIpLm9uKFwiaW5wdXQubWFza1wiLCB1KSwgQSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gfSk7XG59KTtcbi8qIGpRdWVyeSBGb3JtIFN0eWxlciB2Mi4wLjIgfCAoYykgRGltb3ggfCBodHRwczovL2dpdGh1Yi5jb20vRGltb3gvalF1ZXJ5Rm9ybVN0eWxlciAqL1xuIWZ1bmN0aW9uIChlKSB7XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbXCJqcXVlcnlcIl0sIGUpIDogXCJvYmplY3RcIiA9PSAodHlwZW9mIGV4cG9ydHMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihleHBvcnRzKSkgPyBtb2R1bGUuZXhwb3J0cyA9IGUoJCB8fCByZXF1aXJlKFwianF1ZXJ5XCIpKSA6IGUoalF1ZXJ5KTtcbn0oZnVuY3Rpb24gKGUpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBmdW5jdGlvbiB0KHQsIHMpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdCwgdGhpcy5vcHRpb25zID0gZS5leHRlbmQoe30sIGwsIHMpO3ZhciBpID0gdGhpcy5vcHRpb25zLmxvY2FsZTt2b2lkIDAgIT09IHRoaXMub3B0aW9ucy5sb2NhbGVzW2ldICYmIGUuZXh0ZW5kKHRoaXMub3B0aW9ucywgdGhpcy5vcHRpb25zLmxvY2FsZXNbaV0pLCB0aGlzLmluaXQoKTtcbiAgICB9ZnVuY3Rpb24gcyh0KSB7XG4gICAgICAgIGlmICghZSh0LnRhcmdldCkucGFyZW50cygpLmhhc0NsYXNzKFwianEtc2VsZWN0Ym94XCIpICYmIFwiT1BUSU9OXCIgIT0gdC50YXJnZXQubm9kZU5hbWUgJiYgZShcImRpdi5qcS1zZWxlY3Rib3gub3BlbmVkXCIpLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHMgPSBlKFwiZGl2LmpxLXNlbGVjdGJveC5vcGVuZWRcIiksXG4gICAgICAgICAgICAgICAgbCA9IGUoXCJkaXYuanEtc2VsZWN0Ym94X19zZWFyY2ggaW5wdXRcIiwgcyksXG4gICAgICAgICAgICAgICAgbyA9IGUoXCJkaXYuanEtc2VsZWN0Ym94X19kcm9wZG93blwiLCBzKTtzLmZpbmQoXCJzZWxlY3RcIikuZGF0YShcIl9cIiArIGkpLm9wdGlvbnMub25TZWxlY3RDbG9zZWQuY2FsbChzKSwgbC5sZW5ndGggJiYgbC52YWwoXCJcIikua2V5dXAoKSwgby5oaWRlKCkuZmluZChcImxpLnNlbFwiKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpLCBzLnJlbW92ZUNsYXNzKFwiZm9jdXNlZCBvcGVuZWQgZHJvcHVwIGRyb3Bkb3duXCIpO1xuICAgICAgICB9XG4gICAgfXZhciBpID0gXCJzdHlsZXJcIixcbiAgICAgICAgbCA9IHsgaWRTdWZmaXg6IFwiLXN0eWxlclwiLCBmaWxlUGxhY2Vob2xkZXI6IFwi0KTQsNC50Lsg0L3QtSDQstGL0LHRgNCw0L1cIiwgZmlsZUJyb3dzZTogXCLQntCx0LfQvtGALi4uXCIsIGZpbGVOdW1iZXI6IFwi0JLRi9Cx0YDQsNC90L4g0YTQsNC50LvQvtCyOiAlc1wiLCBzZWxlY3RQbGFjZWhvbGRlcjogXCLQktGL0LHQtdGA0LjRgtC1Li4uXCIsIHNlbGVjdFNlYXJjaDogITEsIHNlbGVjdFNlYXJjaExpbWl0OiAxMCwgc2VsZWN0U2VhcmNoTm90Rm91bmQ6IFwi0KHQvtCy0L/QsNC00LXQvdC40Lkg0L3QtSDQvdCw0LnQtNC10L3QvlwiLCBzZWxlY3RTZWFyY2hQbGFjZWhvbGRlcjogXCLQn9C+0LjRgdC6Li4uXCIsIHNlbGVjdFZpc2libGVPcHRpb25zOiAwLCBzZWxlY3RTbWFydFBvc2l0aW9uaW5nOiAhMCwgbG9jYWxlOiBcInJ1XCIsIGxvY2FsZXM6IHsgZW46IHsgZmlsZVBsYWNlaG9sZGVyOiBcIk5vIGZpbGUgc2VsZWN0ZWRcIiwgZmlsZUJyb3dzZTogXCJCcm93c2UuLi5cIiwgZmlsZU51bWJlcjogXCJTZWxlY3RlZCBmaWxlczogJXNcIiwgc2VsZWN0UGxhY2Vob2xkZXI6IFwiU2VsZWN0Li4uXCIsIHNlbGVjdFNlYXJjaE5vdEZvdW5kOiBcIk5vIG1hdGNoZXMgZm91bmRcIiwgc2VsZWN0U2VhcmNoUGxhY2Vob2xkZXI6IFwiU2VhcmNoLi4uXCIgfSB9LCBvblNlbGVjdE9wZW5lZDogZnVuY3Rpb24gb25TZWxlY3RPcGVuZWQoKSB7fSwgb25TZWxlY3RDbG9zZWQ6IGZ1bmN0aW9uIG9uU2VsZWN0Q2xvc2VkKCkge30sIG9uRm9ybVN0eWxlZDogZnVuY3Rpb24gb25Gb3JtU3R5bGVkKCkge30gfTt0LnByb3RvdHlwZSA9IHsgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSBpLmF0dHIoXCJpZFwiKSAmJiBcIlwiICE9PSBpLmF0dHIoXCJpZFwiKSAmJiAodGhpcy5pZCA9IGkuYXR0cihcImlkXCIpICsgbC5pZFN1ZmZpeCksIHRoaXMudGl0bGUgPSBpLmF0dHIoXCJ0aXRsZVwiKSwgdGhpcy5jbGFzc2VzID0gaS5hdHRyKFwiY2xhc3NcIiksIHRoaXMuZGF0YSA9IGkuZGF0YSgpO1xuICAgICAgICAgICAgfXZhciBpID0gZSh0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGwgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgbyA9ICEoIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhpUGFkfGlQaG9uZXxpUG9kKS9pKSB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8oV2luZG93c1xcc1Bob25lKS9pKSksXG4gICAgICAgICAgICAgICAgYSA9ICEoIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSkgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKFdpbmRvd3NcXHNQaG9uZSkvaSkpO2lmIChpLmlzKFwiOmNoZWNrYm94XCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBmdW5jdGlvbiBkKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG5ldyB0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gZSgnPGRpdiBjbGFzcz1cImpxLWNoZWNrYm94XCI+PGRpdiBjbGFzcz1cImpxLWNoZWNrYm94X19kaXZcIj48L2Rpdj48L2Rpdj4nKS5hdHRyKHsgaWQ6IHMuaWQsIHRpdGxlOiBzLnRpdGxlIH0pLmFkZENsYXNzKHMuY2xhc3NlcykuZGF0YShzLmRhdGEpO2kuYWZ0ZXIobCkucHJlcGVuZFRvKGwpLCBpLmlzKFwiOmNoZWNrZWRcIikgJiYgbC5hZGRDbGFzcyhcImNoZWNrZWRcIiksIGkuaXMoXCI6ZGlzYWJsZWRcIikgJiYgbC5hZGRDbGFzcyhcImRpc2FibGVkXCIpLCBsLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCksIGkudHJpZ2dlckhhbmRsZXIoXCJjbGlja1wiKSwgbC5pcyhcIi5kaXNhYmxlZFwiKSB8fCAoaS5pcyhcIjpjaGVja2VkXCIpID8gKGkucHJvcChcImNoZWNrZWRcIiwgITEpLCBsLnJlbW92ZUNsYXNzKFwiY2hlY2tlZFwiKSkgOiAoaS5wcm9wKFwiY2hlY2tlZFwiLCAhMCksIGwuYWRkQ2xhc3MoXCJjaGVja2VkXCIpKSwgaS5mb2N1cygpLmNoYW5nZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGkuY2xvc2VzdChcImxhYmVsXCIpLmFkZCgnbGFiZWxbZm9yPVwiJyArIGkuYXR0cihcImlkXCIpICsgJ1wiXScpLm9uKFwiY2xpY2suc3R5bGVyXCIsIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlKHQudGFyZ2V0KS5pcyhcImFcIikgfHwgZSh0LnRhcmdldCkuY2xvc2VzdChsKS5sZW5ndGggfHwgKGwudHJpZ2dlckhhbmRsZXIoXCJjbGlja1wiKSwgdC5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGkub24oXCJjaGFuZ2Uuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuaXMoXCI6Y2hlY2tlZFwiKSA/IGwuYWRkQ2xhc3MoXCJjaGVja2VkXCIpIDogbC5yZW1vdmVDbGFzcyhcImNoZWNrZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKFwia2V5ZG93bi5zdHlsZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIDMyID09IGUud2hpY2ggJiYgbC5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9KS5vbihcImZvY3VzLnN0eWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsLmlzKFwiLmRpc2FibGVkXCIpIHx8IGwuYWRkQ2xhc3MoXCJmb2N1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KS5vbihcImJsdXIuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwucmVtb3ZlQ2xhc3MoXCJmb2N1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O2QoKSwgaS5vbihcInJlZnJlc2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpLmNsb3Nlc3QoXCJsYWJlbFwiKS5hZGQoJ2xhYmVsW2Zvcj1cIicgKyBpLmF0dHIoXCJpZFwiKSArICdcIl0nKS5vZmYoXCIuc3R5bGVyXCIpLCBpLm9mZihcIi5zdHlsZXJcIikucGFyZW50KCkuYmVmb3JlKGkpLnJlbW92ZSgpLCBkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkuaXMoXCI6cmFkaW9cIikpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGZ1bmN0aW9uIHIoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBlKCc8ZGl2IGNsYXNzPVwianEtcmFkaW9cIj48ZGl2IGNsYXNzPVwianEtcmFkaW9fX2RpdlwiPjwvZGl2PjwvZGl2PicpLmF0dHIoeyBpZDogcy5pZCwgdGl0bGU6IHMudGl0bGUgfSkuYWRkQ2xhc3Mocy5jbGFzc2VzKS5kYXRhKHMuZGF0YSk7aS5hZnRlcihsKS5wcmVwZW5kVG8obCksIGkuaXMoXCI6Y2hlY2tlZFwiKSAmJiBsLmFkZENsYXNzKFwiY2hlY2tlZFwiKSwgaS5pcyhcIjpkaXNhYmxlZFwiKSAmJiBsLmFkZENsYXNzKFwiZGlzYWJsZWRcIiksIGUuZm4uY29tbW9uUGFyZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcztyZXR1cm4gdC5maXJzdCgpLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMpLmZpbmQodCkubGVuZ3RoID09PSB0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBlLmZuLmNvbW1vblBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHRoaXMpLmNvbW1vblBhcmVudHMoKS5maXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBsLmNsaWNrKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5wcmV2ZW50RGVmYXVsdCgpLCBpLnRyaWdnZXJIYW5kbGVyKFwiY2xpY2tcIiksICFsLmlzKFwiLmRpc2FibGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBlKCdpbnB1dFtuYW1lPVwiJyArIGkuYXR0cihcIm5hbWVcIikgKyAnXCJdJyk7cy5jb21tb25QYXJlbnQoKS5maW5kKHMpLnByb3AoXCJjaGVja2VkXCIsICExKS5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcImNoZWNrZWRcIiksIGkucHJvcChcImNoZWNrZWRcIiwgITApLnBhcmVudCgpLmFkZENsYXNzKFwiY2hlY2tlZFwiKSwgaS5mb2N1cygpLmNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSwgaS5jbG9zZXN0KFwibGFiZWxcIikuYWRkKCdsYWJlbFtmb3I9XCInICsgaS5hdHRyKFwiaWRcIikgKyAnXCJdJykub24oXCJjbGljay5zdHlsZXJcIiwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUodC50YXJnZXQpLmlzKFwiYVwiKSB8fCBlKHQudGFyZ2V0KS5jbG9zZXN0KGwpLmxlbmd0aCB8fCAobC50cmlnZ2VySGFuZGxlcihcImNsaWNrXCIpLCB0LnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9KSwgaS5vbihcImNoYW5nZS5zdHlsZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaS5wYXJlbnQoKS5hZGRDbGFzcyhcImNoZWNrZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKFwiZm9jdXMuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuaXMoXCIuZGlzYWJsZWRcIikgfHwgbC5hZGRDbGFzcyhcImZvY3VzZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKFwiYmx1ci5zdHlsZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbC5yZW1vdmVDbGFzcyhcImZvY3VzZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07cigpLCBpLm9uKFwicmVmcmVzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGkuY2xvc2VzdChcImxhYmVsXCIpLmFkZCgnbGFiZWxbZm9yPVwiJyArIGkuYXR0cihcImlkXCIpICsgJ1wiXScpLm9mZihcIi5zdHlsZXJcIiksIGkub2ZmKFwiLnN0eWxlclwiKS5wYXJlbnQoKS5iZWZvcmUoaSkucmVtb3ZlKCksIHIoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaS5pcyhcIjpmaWxlXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBmdW5jdGlvbiBjKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG5ldyB0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gaS5kYXRhKFwicGxhY2Vob2xkZXJcIik7dm9pZCAwID09PSBvICYmIChvID0gbC5maWxlUGxhY2Vob2xkZXIpO3ZhciBhID0gaS5kYXRhKFwiYnJvd3NlXCIpO3ZvaWQgMCAhPT0gYSAmJiBcIlwiICE9PSBhIHx8IChhID0gbC5maWxlQnJvd3NlKTt2YXIgZCA9IGUoJzxkaXYgY2xhc3M9XCJqcS1maWxlXCI+PGRpdiBjbGFzcz1cImpxLWZpbGVfX25hbWVcIj4nICsgbyArICc8L2Rpdj48ZGl2IGNsYXNzPVwianEtZmlsZV9fYnJvd3NlXCI+JyArIGEgKyBcIjwvZGl2PjwvZGl2PlwiKS5hdHRyKHsgaWQ6IHMuaWQsIHRpdGxlOiBzLnRpdGxlIH0pLmFkZENsYXNzKHMuY2xhc3NlcykuZGF0YShzLmRhdGEpO2kuYWZ0ZXIoZCkuYXBwZW5kVG8oZCksIGkuaXMoXCI6ZGlzYWJsZWRcIikgJiYgZC5hZGRDbGFzcyhcImRpc2FibGVkXCIpO3ZhciByID0gaS52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBlKFwiZGl2LmpxLWZpbGVfX25hbWVcIiwgZCk7ciAmJiBjLnRleHQoci5yZXBsYWNlKC8uK1tcXFxcXFwvXS8sIFwiXCIpKSwgaS5vbihcImNoYW5nZS5zdHlsZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBpLnZhbCgpO2lmIChpLmlzKFwiW211bHRpcGxlXVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBcIlwiO3ZhciB0ID0gaVswXS5maWxlcy5sZW5ndGg7aWYgKHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gaS5kYXRhKFwibnVtYmVyXCIpO3ZvaWQgMCA9PT0gcyAmJiAocyA9IGwuZmlsZU51bWJlciksIHMgPSBzLnJlcGxhY2UoXCIlc1wiLCB0KSwgZSA9IHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfWMudGV4dChlLnJlcGxhY2UoLy4rW1xcXFxcXC9dLywgXCJcIikpLCBcIlwiID09PSBlID8gKGMudGV4dChvKSwgZC5yZW1vdmVDbGFzcyhcImNoYW5nZWRcIikpIDogZC5hZGRDbGFzcyhcImNoYW5nZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKFwiZm9jdXMuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuYWRkQ2xhc3MoXCJmb2N1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KS5vbihcImJsdXIuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVtb3ZlQ2xhc3MoXCJmb2N1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KS5vbihcImNsaWNrLnN0eWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlbW92ZUNsYXNzKFwiZm9jdXNlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtjKCksIGkub24oXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaS5vZmYoXCIuc3R5bGVyXCIpLnBhcmVudCgpLmJlZm9yZShpKS5yZW1vdmUoKSwgYygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpLmlzKCdpbnB1dFt0eXBlPVwibnVtYmVyXCJdJykpIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gbmV3IHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBlKCc8ZGl2IGNsYXNzPVwianEtbnVtYmVyXCI+PGRpdiBjbGFzcz1cImpxLW51bWJlcl9fc3BpbiBtaW51c1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJqcS1udW1iZXJfX3NwaW4gcGx1c1wiPjwvZGl2PjwvZGl2PicpLmF0dHIoeyBpZDogcy5pZCwgdGl0bGU6IHMudGl0bGUgfSkuYWRkQ2xhc3Mocy5jbGFzc2VzKS5kYXRhKHMuZGF0YSk7aS5hZnRlcihsKS5wcmVwZW5kVG8obCkud3JhcCgnPGRpdiBjbGFzcz1cImpxLW51bWJlcl9fZmllbGRcIj48L2Rpdj4nKSwgaS5pcyhcIjpkaXNhYmxlZFwiKSAmJiBsLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7dmFyIG8sXG4gICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IG51bGw7dm9pZCAwICE9PSBpLmF0dHIoXCJtaW5cIikgJiYgKG8gPSBpLmF0dHIoXCJtaW5cIikpLCB2b2lkIDAgIT09IGkuYXR0cihcIm1heFwiKSAmJiAoYSA9IGkuYXR0cihcIm1heFwiKSksIGQgPSB2b2lkIDAgIT09IGkuYXR0cihcInN0ZXBcIikgJiYgZS5pc051bWVyaWMoaS5hdHRyKFwic3RlcFwiKSkgPyBOdW1iZXIoaS5hdHRyKFwic3RlcFwiKSkgOiBOdW1iZXIoMSk7dmFyIG4gPSBmdW5jdGlvbiBuKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBpLnZhbCgpO2UuaXNOdW1lcmljKGwpIHx8IChsID0gMCwgaS52YWwoXCIwXCIpKSwgdC5pcyhcIi5taW51c1wiKSA/IHMgPSBOdW1iZXIobCkgLSBkIDogdC5pcyhcIi5wbHVzXCIpICYmIChzID0gTnVtYmVyKGwpICsgZCk7dmFyIHIgPSAoZC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBbXSkubGVuZ3RoO2lmIChyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSBcIjFcIjsgYy5sZW5ndGggPD0gcjspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyArPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9cyA9IE1hdGgucm91bmQocyAqIGMpIC8gYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lLmlzTnVtZXJpYyhvKSAmJiBlLmlzTnVtZXJpYyhhKSA/IHMgPj0gbyAmJiBzIDw9IGEgJiYgaS52YWwocykgOiBlLmlzTnVtZXJpYyhvKSAmJiAhZS5pc051bWVyaWMoYSkgPyBzID49IG8gJiYgaS52YWwocykgOiAhZS5pc051bWVyaWMobykgJiYgZS5pc051bWVyaWMoYSkgPyBzIDw9IGEgJiYgaS52YWwocykgOiBpLnZhbChzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtsLmlzKFwiLmRpc2FibGVkXCIpIHx8IChsLm9uKFwibW91c2Vkb3duXCIsIFwiZGl2LmpxLW51bWJlcl9fc3BpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUodGhpcyk7bih0KSwgciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4odCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzUwKTtcbiAgICAgICAgICAgICAgICAgICAgfSkub24oXCJtb3VzZXVwIG1vdXNlb3V0XCIsIFwiZGl2LmpxLW51bWJlcl9fc3BpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQociksIGNsZWFySW50ZXJ2YWwoYyk7XG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKFwibW91c2V1cFwiLCBcImRpdi5qcS1udW1iZXJfX3NwaW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaS5jaGFuZ2UoKS50cmlnZ2VyKFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBpLm9uKFwiZm9jdXMuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuYWRkQ2xhc3MoXCJmb2N1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KS5vbihcImJsdXIuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwucmVtb3ZlQ2xhc3MoXCJmb2N1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfTtuKCksIGkub24oXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaS5vZmYoXCIuc3R5bGVyXCIpLmNsb3Nlc3QoXCIuanEtbnVtYmVyXCIpLmJlZm9yZShpKS5yZW1vdmUoKSwgbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpLmlzKFwic2VsZWN0XCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZS5wcm9wKFwic2Nyb2xsSGVpZ2h0XCIpIC0gZS5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBudWxsO2Uub2ZmKFwibW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbFwiKS5vbihcIm1vdXNld2hlZWwgRE9NTW91c2VTY3JvbGxcIiwgZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gbC5vcmlnaW5hbEV2ZW50LmRldGFpbCA8IDAgfHwgbC5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGEgPiAwID8gMSA6IC0xLCAoKGkgPSBlLnNjcm9sbFRvcCgpKSA+PSB0ICYmIHMgPCAwIHx8IGkgPD0gMCAmJiBzID4gMCkgJiYgKGwuc3RvcFByb3BhZ2F0aW9uKCksIGwucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfWZ1bmN0aW9uIHIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IGMubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGMuZXEoZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IFwiXCI7dC5wcm9wKFwic2VsZWN0ZWRcIikgJiYgKGkgPSBcInNlbGVjdGVkIHNlbFwiKSwgdC5pcyhcIjpkaXNhYmxlZFwiKSAmJiAoaSA9IFwiZGlzYWJsZWRcIiksIHQuaXMoXCI6c2VsZWN0ZWQ6ZGlzYWJsZWRcIikgJiYgKGkgPSBcInNlbGVjdGVkIHNlbCBkaXNhYmxlZFwiKSwgdm9pZCAwICE9PSB0LmF0dHIoXCJpZFwiKSAmJiBcIlwiICE9PSB0LmF0dHIoXCJpZFwiKSAmJiAoYSA9ICcgaWQ9XCInICsgdC5hdHRyKFwiaWRcIikgKyBsLmlkU3VmZml4ICsgJ1wiJyksIHZvaWQgMCAhPT0gdC5hdHRyKFwidGl0bGVcIikgJiYgXCJcIiAhPT0gYy5hdHRyKFwidGl0bGVcIikgJiYgKGQgPSAnIHRpdGxlPVwiJyArIHQuYXR0cihcInRpdGxlXCIpICsgJ1wiJyksIHZvaWQgMCAhPT0gdC5hdHRyKFwiY2xhc3NcIikgJiYgKGYgPSBcIiBcIiArIHQuYXR0cihcImNsYXNzXCIpLCB1ID0gJyBkYXRhLWpxZnMtY2xhc3M9XCInICsgdC5hdHRyKFwiY2xhc3NcIikgKyAnXCInKTt2YXIgcCA9IHQuZGF0YSgpO2ZvciAodmFyIHYgaW4gcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiICE9PSBwW3ZdICYmIChyICs9IFwiIGRhdGEtXCIgKyB2ICsgJz1cIicgKyBwW3ZdICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWkgKyBmICE9PSBcIlwiICYmIChvID0gJyBjbGFzcz1cIicgKyBpICsgZiArICdcIicpLCBzID0gXCI8bGlcIiArIHUgKyByICsgbyArIGQgKyBhICsgXCI+XCIgKyB0Lmh0bWwoKSArIFwiPC9saT5cIiwgdC5wYXJlbnQoKS5pcyhcIm9wdGdyb3VwXCIpICYmICh2b2lkIDAgIT09IHQucGFyZW50KCkuYXR0cihcImNsYXNzXCIpICYmIChoID0gXCIgXCIgKyB0LnBhcmVudCgpLmF0dHIoXCJjbGFzc1wiKSksIHMgPSBcIjxsaVwiICsgdSArIHIgKyAnIGNsYXNzPVwiJyArIGkgKyBmICsgXCIgb3B0aW9uXCIgKyBoICsgJ1wiJyArIGQgKyBhICsgXCI+XCIgKyB0Lmh0bWwoKSArIFwiPC9saT5cIiwgdC5pcyhcIjpmaXJzdC1jaGlsZFwiKSAmJiAocyA9ICc8bGkgY2xhc3M9XCJvcHRncm91cCcgKyBoICsgJ1wiPicgKyB0LnBhcmVudCgpLmF0dHIoXCJsYWJlbFwiKSArIFwiPC9saT5cIiArIHMpKSwgbiArPSBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9dmFyIGMgPSBlKFwib3B0aW9uXCIsIGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IFwiXCI7aWYgKGkuaXMoXCJbbXVsdGlwbGVdXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSB8fCBvKSByZXR1cm47IWZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG5ldyB0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBlKCc8ZGl2IGNsYXNzPVwianEtc2VsZWN0LW11bHRpcGxlIGpxc2VsZWN0XCI+PC9kaXY+JykuYXR0cih7IGlkOiBzLmlkLCB0aXRsZTogcy50aXRsZSB9KS5hZGRDbGFzcyhzLmNsYXNzZXMpLmRhdGEocy5kYXRhKTtpLmFmdGVyKGwpLCByKCksIGwuYXBwZW5kKFwiPHVsPlwiICsgbiArIFwiPC91bD5cIik7dmFyIG8gPSBlKFwidWxcIiwgbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBlKFwibGlcIiwgbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBpLmF0dHIoXCJzaXplXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gby5vdXRlckhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gYS5vdXRlckhlaWdodCgpO3ZvaWQgMCAhPT0gZiAmJiBmID4gMCA/IG8uY3NzKHsgaGVpZ2h0OiB1ICogZiB9KSA6IG8uY3NzKHsgaGVpZ2h0OiA0ICogdSB9KSwgaCA+IGwuaGVpZ2h0KCkgJiYgKG8uY3NzKFwib3ZlcmZsb3dZXCIsIFwic2Nyb2xsXCIpLCBkKG8pLCBhLmZpbHRlcihcIi5zZWxlY3RlZFwiKS5sZW5ndGggJiYgby5zY3JvbGxUb3Aoby5zY3JvbGxUb3AoKSArIGEuZmlsdGVyKFwiLnNlbGVjdGVkXCIpLnBvc2l0aW9uKCkudG9wKSksIGkucHJlcGVuZFRvKGwpLCBpLmlzKFwiOmRpc2FibGVkXCIpID8gKGwuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSwgYy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0aGlzKS5pcyhcIjpzZWxlY3RlZFwiKSAmJiBhLmVxKGUodGhpcykuaW5kZXgoKSkuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkgOiAoYS5maWx0ZXIoXCI6bm90KC5kaXNhYmxlZCk6bm90KC5vcHRncm91cClcIikuY2xpY2soZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5mb2N1cygpO3ZhciBzID0gZSh0aGlzKTtpZiAodC5jdHJsS2V5IHx8IHQubWV0YUtleSB8fCBzLmFkZENsYXNzKFwic2VsZWN0ZWRcIiksIHQuc2hpZnRLZXkgfHwgcy5hZGRDbGFzcyhcImZpcnN0XCIpLCB0LmN0cmxLZXkgfHwgdC5tZXRhS2V5IHx8IHQuc2hpZnRLZXkgfHwgcy5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWQgZmlyc3RcIiksICh0LmN0cmxLZXkgfHwgdC5tZXRhS2V5KSAmJiAocy5pcyhcIi5zZWxlY3RlZFwiKSA/IHMucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZCBmaXJzdFwiKSA6IHMuYWRkQ2xhc3MoXCJzZWxlY3RlZCBmaXJzdFwiKSwgcy5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKFwiZmlyc3RcIikpLCB0LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9ICExLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSAhMTtzLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKS5zaWJsaW5ncyhcIi5maXJzdFwiKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpLCBzLnByZXZBbGwoKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKHRoaXMpLmlzKFwiLmZpcnN0XCIpICYmIChsID0gITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHMubmV4dEFsbCgpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuaXMoXCIuZmlyc3RcIikgJiYgKG8gPSAhMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgbCAmJiBzLnByZXZBbGwoKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSh0aGlzKS5pcyhcIi5zZWxlY3RlZFwiKSkgcmV0dXJuICExO2UodGhpcykubm90KFwiLmRpc2FibGVkLCAub3B0Z3JvdXBcIikuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBvICYmIHMubmV4dEFsbCgpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKHRoaXMpLmlzKFwiLnNlbGVjdGVkXCIpKSByZXR1cm4gITE7ZSh0aGlzKS5ub3QoXCIuZGlzYWJsZWQsIC5vcHRncm91cFwiKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIDEgPT0gYS5maWx0ZXIoXCIuc2VsZWN0ZWRcIikubGVuZ3RoICYmIHMuYWRkQ2xhc3MoXCJmaXJzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWMucHJvcChcInNlbGVjdGVkXCIsICExKSwgYS5maWx0ZXIoXCIuc2VsZWN0ZWRcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHQuaW5kZXgoKTt0LmlzKFwiLm9wdGlvblwiKSAmJiAocyAtPSB0LnByZXZBbGwoXCIub3B0Z3JvdXBcIikubGVuZ3RoKSwgYy5lcShzKS5wcm9wKFwic2VsZWN0ZWRcIiwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgaS5jaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgYy5lYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuZGF0YShcIm9wdGlvbkluZGV4XCIsIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBpLm9uKFwiY2hhbmdlLnN0eWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTt2YXIgdCA9IFtdO2MuZmlsdGVyKFwiOnNlbGVjdGVkXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wdXNoKGUodGhpcykuZGF0YShcIm9wdGlvbkluZGV4XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGEubm90KFwiLm9wdGdyb3VwXCIpLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuaW5BcnJheShzLCB0KSA+IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLm9uKFwiZm9jdXMuc3R5bGVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5hZGRDbGFzcyhcImZvY3VzZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkub24oXCJibHVyLnN0eWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwucmVtb3ZlQ2xhc3MoXCJmb2N1c2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBoID4gbC5oZWlnaHQoKSAmJiBpLm9uKFwia2V5ZG93bi5zdHlsZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzggIT0gZS53aGljaCAmJiAzNyAhPSBlLndoaWNoICYmIDMzICE9IGUud2hpY2ggfHwgby5zY3JvbGxUb3Aoby5zY3JvbGxUb3AoKSArIGEuZmlsdGVyKFwiLnNlbGVjdGVkXCIpLnBvc2l0aW9uKCkudG9wIC0gdSksIDQwICE9IGUud2hpY2ggJiYgMzkgIT0gZS53aGljaCAmJiAzNCAhPSBlLndoaWNoIHx8IG8uc2Nyb2xsVG9wKG8uc2Nyb2xsVG9wKCkgKyBhLmZpbHRlcihcIi5zZWxlY3RlZDpsYXN0XCIpLnBvc2l0aW9uKCkudG9wIC0gby5pbm5lckhlaWdodCgpICsgMiAqIHUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0oKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlICFmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG5ldyB0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGkuZGF0YShcInBsYWNlaG9sZGVyXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBpLmRhdGEoXCJzZWFyY2hcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGkuZGF0YShcInNlYXJjaC1saW1pdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gaS5kYXRhKFwic2VhcmNoLW5vdC1mb3VuZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gaS5kYXRhKFwic2VhcmNoLXBsYWNlaG9sZGVyXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBpLmRhdGEoXCJzbWFydC1wb3NpdGlvbmluZ1wiKTt2b2lkIDAgPT09IGggJiYgKGggPSBsLnNlbGVjdFBsYWNlaG9sZGVyKSwgdm9pZCAwICE9PSB1ICYmIFwiXCIgIT09IHUgfHwgKHUgPSBsLnNlbGVjdFNlYXJjaCksIHZvaWQgMCAhPT0gcCAmJiBcIlwiICE9PSBwIHx8IChwID0gbC5zZWxlY3RTZWFyY2hMaW1pdCksIHZvaWQgMCAhPT0gdiAmJiBcIlwiICE9PSB2IHx8ICh2ID0gbC5zZWxlY3RTZWFyY2hOb3RGb3VuZCksIHZvaWQgMCA9PT0gbSAmJiAobSA9IGwuc2VsZWN0U2VhcmNoUGxhY2Vob2xkZXIpLCB2b2lkIDAgIT09IGcgJiYgXCJcIiAhPT0gZyB8fCAoZyA9IGwuc2VsZWN0U21hcnRQb3NpdGlvbmluZyk7dmFyIGIgPSBlKCc8ZGl2IGNsYXNzPVwianEtc2VsZWN0Ym94IGpxc2VsZWN0XCI+PGRpdiBjbGFzcz1cImpxLXNlbGVjdGJveF9fc2VsZWN0XCI+PGRpdiBjbGFzcz1cImpxLXNlbGVjdGJveF9fc2VsZWN0LXRleHRcIj48L2Rpdj48ZGl2IGNsYXNzPVwianEtc2VsZWN0Ym94X190cmlnZ2VyXCI+PGRpdiBjbGFzcz1cImpxLXNlbGVjdGJveF9fdHJpZ2dlci1hcnJvd1wiPjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PicpLmF0dHIoeyBpZDogYS5pZCwgdGl0bGU6IGEudGl0bGUgfSkuYWRkQ2xhc3MoYS5jbGFzc2VzKS5kYXRhKGEuZGF0YSk7aS5hZnRlcihiKS5wcmVwZW5kVG8oYik7dmFyIEMgPSBiLmNzcyhcInotaW5kZXhcIik7QyA9IEMgPiAwID8gQyA6IDE7dmFyIHggPSBlKFwiZGl2LmpxLXNlbGVjdGJveF9fc2VsZWN0XCIsIGIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBlKFwiZGl2LmpxLXNlbGVjdGJveF9fc2VsZWN0LXRleHRcIiwgYiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IGMuZmlsdGVyKFwiOnNlbGVjdGVkXCIpO3IoKSwgdSAmJiAoZiA9ICc8ZGl2IGNsYXNzPVwianEtc2VsZWN0Ym94X19zZWFyY2hcIj48aW5wdXQgdHlwZT1cInNlYXJjaFwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHBsYWNlaG9sZGVyPVwiJyArIG0gKyAnXCI+PC9kaXY+PGRpdiBjbGFzcz1cImpxLXNlbGVjdGJveF9fbm90LWZvdW5kXCI+JyArIHYgKyBcIjwvZGl2PlwiKTt2YXIgcSA9IGUoJzxkaXYgY2xhc3M9XCJqcS1zZWxlY3Rib3hfX2Ryb3Bkb3duXCI+JyArIGYgKyBcIjx1bD5cIiArIG4gKyBcIjwvdWw+PC9kaXY+XCIpO2IuYXBwZW5kKHEpO3ZhciBfID0gZShcInVsXCIsIHEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSBlKFwibGlcIiwgcSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IGUoXCJpbnB1dFwiLCBxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTID0gZShcImRpdi5qcS1zZWxlY3Rib3hfX25vdC1mb3VuZFwiLCBxKS5oaWRlKCk7ai5sZW5ndGggPCBwICYmIGsucGFyZW50KCkuaGlkZSgpLCBcIlwiID09PSBjLmZpcnN0KCkudGV4dCgpICYmIGMuZmlyc3QoKS5pcyhcIjpzZWxlY3RlZFwiKSAmJiAhMSAhPT0gaCA/IHkudGV4dChoKS5hZGRDbGFzcyhcInBsYWNlaG9sZGVyXCIpIDogeS50ZXh0KHcudGV4dCgpKTt2YXIgVCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTiA9IDA7aWYgKGouY3NzKHsgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIiB9KSwgai5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUodGhpcyk7dC5pbm5lcldpZHRoKCkgPiBUICYmIChUID0gdC5pbm5lcldpZHRoKCksIE4gPSB0LndpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGouY3NzKHsgZGlzcGxheTogXCJcIiB9KSwgeS5pcyhcIi5wbGFjZWhvbGRlclwiKSAmJiB5LndpZHRoKCkgPiBUKSB5LndpZHRoKHkud2lkdGgoKSk7ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFAgPSBiLmNsb25lKCkuYXBwZW5kVG8oXCJib2R5XCIpLndpZHRoKFwiYXV0b1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSCA9IFAub3V0ZXJXaWR0aCgpO1AucmVtb3ZlKCksIEggPT0gYi5vdXRlcldpZHRoKCkgJiYgeS53aWR0aChOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1UID4gYi53aWR0aCgpICYmIHEud2lkdGgoVCksIFwiXCIgPT09IGMuZmlyc3QoKS50ZXh0KCkgJiYgXCJcIiAhPT0gaS5kYXRhKFwicGxhY2Vob2xkZXJcIikgJiYgai5maXJzdCgpLmhpZGUoKTt2YXIgQSA9IGIub3V0ZXJIZWlnaHQoITApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEQgPSBrLnBhcmVudCgpLm91dGVySGVpZ2h0KCEwKSB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkgPSBfLmNzcyhcIm1heC1oZWlnaHRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSyA9IGouZmlsdGVyKFwiLnNlbGVjdGVkXCIpO2lmIChLLmxlbmd0aCA8IDEgJiYgai5maXJzdCgpLmFkZENsYXNzKFwic2VsZWN0ZWQgc2VsXCIpLCB2b2lkIDAgPT09IGouZGF0YShcImxpLWhlaWdodFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBPID0gai5vdXRlckhlaWdodCgpOyExICE9PSBoICYmIChPID0gai5lcSgxKS5vdXRlckhlaWdodCgpKSwgai5kYXRhKFwibGktaGVpZ2h0XCIsIE8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfXZhciBNID0gcS5jc3MoXCJ0b3BcIik7aWYgKFwiYXV0b1wiID09IHEuY3NzKFwibGVmdFwiKSAmJiBxLmNzcyh7IGxlZnQ6IDAgfSksIFwiYXV0b1wiID09IHEuY3NzKFwidG9wXCIpICYmIChxLmNzcyh7IHRvcDogQSB9KSwgTSA9IEEpLCBxLmhpZGUoKSwgSy5sZW5ndGggJiYgKGMuZmlyc3QoKS50ZXh0KCkgIT0gdy50ZXh0KCkgJiYgYi5hZGRDbGFzcyhcImNoYW5nZWRcIiksIGIuZGF0YShcImpxZnMtY2xhc3NcIiwgSy5kYXRhKFwianFmcy1jbGFzc1wiKSksIGIuYWRkQ2xhc3MoSy5kYXRhKFwianFmcy1jbGFzc1wiKSkpLCBpLmlzKFwiOmRpc2FibGVkXCIpKSByZXR1cm4gYi5hZGRDbGFzcyhcImRpc2FibGVkXCIpLCAhMTt4LmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZShcImRpdi5qcS1zZWxlY3Rib3hcIikuZmlsdGVyKFwiLm9wZW5lZFwiKS5sZW5ndGggJiYgbC5vblNlbGVjdENsb3NlZC5jYWxsKGUoXCJkaXYuanEtc2VsZWN0Ym94XCIpLmZpbHRlcihcIi5vcGVuZWRcIikpLCBpLmZvY3VzKCksICFvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZSh3aW5kb3cpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGouZGF0YShcImxpLWhlaWdodFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBiLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0LmhlaWdodCgpIC0gQSAtIChhIC0gdC5zY3JvbGxUb3AoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gaS5kYXRhKFwidmlzaWJsZS1vcHRpb25zXCIpO3ZvaWQgMCAhPT0gbiAmJiBcIlwiICE9PSBuIHx8IChuID0gbC5zZWxlY3RWaXNpYmxlT3B0aW9ucyk7dmFyIGYgPSA1ICogcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBzICogbjtuID4gMCAmJiBuIDwgNiAmJiAoZiA9IGgpLCAwID09PSBuICYmIChoID0gXCJhdXRvXCIpO3ZhciB1ID0gZnVuY3Rpb24gdSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEuaGVpZ2h0KFwiYXV0b1wiKS5jc3MoeyBib3R0b206IFwiYXV0b1wiLCB0b3A6IE0gfSk7dmFyIGUgPSBmdW5jdGlvbiBlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3NzKFwibWF4LWhlaWdodFwiLCBNYXRoLmZsb29yKChyIC0gMjAgLSBEKSAvIHMpICogcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O2UoKSwgXy5jc3MoXCJtYXgtaGVpZ2h0XCIsIGgpLCBcIm5vbmVcIiAhPSBJICYmIF8uY3NzKFwibWF4LWhlaWdodFwiLCBJKSwgciA8IHEub3V0ZXJIZWlnaHQoKSArIDIwICYmIGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTshMCA9PT0gZyB8fCAxID09PSBnID8gciA+IGYgKyBEICsgMjAgPyAodSgpLCBiLnJlbW92ZUNsYXNzKFwiZHJvcHVwXCIpLmFkZENsYXNzKFwiZHJvcGRvd25cIikpIDogKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEuaGVpZ2h0KFwiYXV0b1wiKS5jc3MoeyB0b3A6IFwiYXV0b1wiLCBib3R0b206IE0gfSk7dmFyIGUgPSBmdW5jdGlvbiBlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3NzKFwibWF4LWhlaWdodFwiLCBNYXRoLmZsb29yKChhIC0gdC5zY3JvbGxUb3AoKSAtIDIwIC0gRCkgLyBzKSAqIHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtlKCksIF8uY3NzKFwibWF4LWhlaWdodFwiLCBoKSwgXCJub25lXCIgIT0gSSAmJiBfLmNzcyhcIm1heC1oZWlnaHRcIiwgSSksIGEgLSB0LnNjcm9sbFRvcCgpIC0gMjAgPCBxLm91dGVySGVpZ2h0KCkgKyAyMCAmJiBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSwgYi5yZW1vdmVDbGFzcyhcImRyb3Bkb3duXCIpLmFkZENsYXNzKFwiZHJvcHVwXCIpKSA6ICExID09PSBnIHx8IDAgPT09IGcgPyByID4gZiArIEQgKyAyMCAmJiAodSgpLCBiLnJlbW92ZUNsYXNzKFwiZHJvcHVwXCIpLmFkZENsYXNzKFwiZHJvcGRvd25cIikpIDogKHEuaGVpZ2h0KFwiYXV0b1wiKS5jc3MoeyBib3R0b206IFwiYXV0b1wiLCB0b3A6IE0gfSksIF8uY3NzKFwibWF4LWhlaWdodFwiLCBoKSwgXCJub25lXCIgIT0gSSAmJiBfLmNzcyhcIm1heC1oZWlnaHRcIiwgSSkpLCBiLm9mZnNldCgpLmxlZnQgKyBxLm91dGVyV2lkdGgoKSA+IHQud2lkdGgoKSAmJiBxLmNzcyh7IGxlZnQ6IFwiYXV0b1wiLCByaWdodDogMCB9KSwgZShcImRpdi5qcXNlbGVjdFwiKS5jc3MoeyB6SW5kZXg6IEMgLSAxIH0pLnJlbW92ZUNsYXNzKFwib3BlbmVkXCIpLCBiLmNzcyh7IHpJbmRleDogQyB9KSwgcS5pcyhcIjpoaWRkZW5cIikgPyAoZShcImRpdi5qcS1zZWxlY3Rib3hfX2Ryb3Bkb3duOnZpc2libGVcIikuaGlkZSgpLCBxLnNob3coKSwgYi5hZGRDbGFzcyhcIm9wZW5lZCBmb2N1c2VkXCIpLCBsLm9uU2VsZWN0T3BlbmVkLmNhbGwoYikpIDogKHEuaGlkZSgpLCBiLnJlbW92ZUNsYXNzKFwib3BlbmVkIGRyb3B1cCBkcm9wZG93blwiKSwgZShcImRpdi5qcS1zZWxlY3Rib3hcIikuZmlsdGVyKFwiLm9wZW5lZFwiKS5sZW5ndGggJiYgbC5vblNlbGVjdENsb3NlZC5jYWxsKGIpKSwgay5sZW5ndGggJiYgKGsudmFsKFwiXCIpLmtleXVwKCksIFMuaGlkZSgpLCBrLmtleXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZSh0aGlzKS52YWwoKTtqLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuaHRtbCgpLm1hdGNoKG5ldyBSZWdFeHAoXCIuKj9cIiArIHQgKyBcIi4qP1wiLCBcImlcIikpID8gZSh0aGlzKS5zaG93KCkgOiBlKHRoaXMpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBcIlwiID09PSBjLmZpcnN0KCkudGV4dCgpICYmIFwiXCIgIT09IGkuZGF0YShcInBsYWNlaG9sZGVyXCIpICYmIGouZmlyc3QoKS5oaWRlKCksIGouZmlsdGVyKFwiOnZpc2libGVcIikubGVuZ3RoIDwgMSA/IFMuc2hvdygpIDogUy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgai5maWx0ZXIoXCIuc2VsZWN0ZWRcIikubGVuZ3RoICYmIChcIlwiID09PSBpLnZhbCgpID8gXy5zY3JvbGxUb3AoMCkgOiAoXy5pbm5lckhlaWdodCgpIC8gcyAlIDIgIT0gMCAmJiAocyAvPSAyKSwgXy5zY3JvbGxUb3AoXy5zY3JvbGxUb3AoKSArIGouZmlsdGVyKFwiLnNlbGVjdGVkXCIpLnBvc2l0aW9uKCkudG9wIC0gXy5pbm5lckhlaWdodCgpIC8gMiArIHMpKSksIGQoXyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGouaG92ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcykuc2libGluZ3MoKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7dmFyIFcgPSBqLmZpbHRlcihcIi5zZWxlY3RlZFwiKS50ZXh0KCk7ai5maWx0ZXIoXCI6bm90KC5kaXNhYmxlZCk6bm90KC5vcHRncm91cClcIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZm9jdXMoKTt2YXIgdCA9IGUodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0LnRleHQoKTtpZiAoIXQuaXMoXCIuc2VsZWN0ZWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0LmluZGV4KCk7byAtPSB0LnByZXZBbGwoXCIub3B0Z3JvdXBcIikubGVuZ3RoLCB0LmFkZENsYXNzKFwic2VsZWN0ZWQgc2VsXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZCBzZWxcIiksIGMucHJvcChcInNlbGVjdGVkXCIsICExKS5lcShvKS5wcm9wKFwic2VsZWN0ZWRcIiwgITApLCBXID0gcywgeS50ZXh0KHMpLCBiLmRhdGEoXCJqcWZzLWNsYXNzXCIpICYmIGIucmVtb3ZlQ2xhc3MoYi5kYXRhKFwianFmcy1jbGFzc1wiKSksIGIuZGF0YShcImpxZnMtY2xhc3NcIiwgdC5kYXRhKFwianFmcy1jbGFzc1wiKSksIGIuYWRkQ2xhc3ModC5kYXRhKFwianFmcy1jbGFzc1wiKSksIGkuY2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfXEuaGlkZSgpLCBiLnJlbW92ZUNsYXNzKFwib3BlbmVkIGRyb3B1cCBkcm9wZG93blwiKSwgbC5vblNlbGVjdENsb3NlZC5jYWxsKGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIHEubW91c2VvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUoXCJsaS5zZWxcIiwgcSkuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBpLm9uKFwiY2hhbmdlLnN0eWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeS50ZXh0KGMuZmlsdGVyKFwiOnNlbGVjdGVkXCIpLnRleHQoKSkucmVtb3ZlQ2xhc3MoXCJwbGFjZWhvbGRlclwiKSwgai5yZW1vdmVDbGFzcyhcInNlbGVjdGVkIHNlbFwiKS5ub3QoXCIub3B0Z3JvdXBcIikuZXEoaVswXS5zZWxlY3RlZEluZGV4KS5hZGRDbGFzcyhcInNlbGVjdGVkIHNlbFwiKSwgYy5maXJzdCgpLnRleHQoKSAhPSBqLmZpbHRlcihcIi5zZWxlY3RlZFwiKS50ZXh0KCkgPyBiLmFkZENsYXNzKFwiY2hhbmdlZFwiKSA6IGIucmVtb3ZlQ2xhc3MoXCJjaGFuZ2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkub24oXCJmb2N1cy5zdHlsZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIuYWRkQ2xhc3MoXCJmb2N1c2VkXCIpLCBlKFwiZGl2Lmpxc2VsZWN0XCIpLm5vdChcIi5mb2N1c2VkXCIpLnJlbW92ZUNsYXNzKFwib3BlbmVkIGRyb3B1cCBkcm9wZG93blwiKS5maW5kKFwiZGl2LmpxLXNlbGVjdGJveF9fZHJvcGRvd25cIikuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkub24oXCJibHVyLnN0eWxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5yZW1vdmVDbGFzcyhcImZvY3VzZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5vbihcImtleWRvd24uc3R5bGVyIGtleXVwLnN0eWxlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gai5kYXRhKFwibGktaGVpZ2h0XCIpO1wiXCIgPT09IGkudmFsKCkgPyB5LnRleHQoaCkuYWRkQ2xhc3MoXCJwbGFjZWhvbGRlclwiKSA6IHkudGV4dChjLmZpbHRlcihcIjpzZWxlY3RlZFwiKS50ZXh0KCkpLCBqLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWQgc2VsXCIpLm5vdChcIi5vcHRncm91cFwiKS5lcShpWzBdLnNlbGVjdGVkSW5kZXgpLmFkZENsYXNzKFwic2VsZWN0ZWQgc2VsXCIpLCAzOCAhPSBlLndoaWNoICYmIDM3ICE9IGUud2hpY2ggJiYgMzMgIT0gZS53aGljaCAmJiAzNiAhPSBlLndoaWNoIHx8IChcIlwiID09PSBpLnZhbCgpID8gXy5zY3JvbGxUb3AoMCkgOiBfLnNjcm9sbFRvcChfLnNjcm9sbFRvcCgpICsgai5maWx0ZXIoXCIuc2VsZWN0ZWRcIikucG9zaXRpb24oKS50b3ApKSwgNDAgIT0gZS53aGljaCAmJiAzOSAhPSBlLndoaWNoICYmIDM0ICE9IGUud2hpY2ggJiYgMzUgIT0gZS53aGljaCB8fCBfLnNjcm9sbFRvcChfLnNjcm9sbFRvcCgpICsgai5maWx0ZXIoXCIuc2VsZWN0ZWRcIikucG9zaXRpb24oKS50b3AgLSBfLmlubmVySGVpZ2h0KCkgKyB0KSwgMTMgPT0gZS53aGljaCAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBxLmhpZGUoKSwgYi5yZW1vdmVDbGFzcyhcIm9wZW5lZCBkcm9wdXAgZHJvcGRvd25cIiksIGwub25TZWxlY3RDbG9zZWQuY2FsbChiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5vbihcImtleWRvd24uc3R5bGVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMzIgPT0gZS53aGljaCAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB4LmNsaWNrKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIHMucmVnaXN0ZXJlZCB8fCAoZShkb2N1bWVudCkub24oXCJjbGlja1wiLCBzKSwgcy5yZWdpc3RlcmVkID0gITApO1xuICAgICAgICAgICAgICAgICAgICB9KCk7XG4gICAgICAgICAgICAgICAgfTtmKCksIGkub24oXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaS5vZmYoXCIuc3R5bGVyXCIpLnBhcmVudCgpLmJlZm9yZShpKS5yZW1vdmUoKSwgZigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGkuaXMoXCI6cmVzZXRcIikgJiYgaS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaS5jbG9zZXN0KFwiZm9ybVwiKS5maW5kKFwiaW5wdXQsIHNlbGVjdFwiKS50cmlnZ2VyKFwicmVmcmVzaFwiKTtcbiAgICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXMuZWxlbWVudCk7dC5pcyhcIjpjaGVja2JveFwiKSB8fCB0LmlzKFwiOnJhZGlvXCIpID8gKHQucmVtb3ZlRGF0YShcIl9cIiArIGkpLm9mZihcIi5zdHlsZXIgcmVmcmVzaFwiKS5yZW1vdmVBdHRyKFwic3R5bGVcIikucGFyZW50KCkuYmVmb3JlKHQpLnJlbW92ZSgpLCB0LmNsb3Nlc3QoXCJsYWJlbFwiKS5hZGQoJ2xhYmVsW2Zvcj1cIicgKyB0LmF0dHIoXCJpZFwiKSArICdcIl0nKS5vZmYoXCIuc3R5bGVyXCIpKSA6IHQuaXMoJ2lucHV0W3R5cGU9XCJudW1iZXJcIl0nKSA/IHQucmVtb3ZlRGF0YShcIl9cIiArIGkpLm9mZihcIi5zdHlsZXIgcmVmcmVzaFwiKS5jbG9zZXN0KFwiLmpxLW51bWJlclwiKS5iZWZvcmUodCkucmVtb3ZlKCkgOiAodC5pcyhcIjpmaWxlXCIpIHx8IHQuaXMoXCJzZWxlY3RcIikpICYmIHQucmVtb3ZlRGF0YShcIl9cIiArIGkpLm9mZihcIi5zdHlsZXIgcmVmcmVzaFwiKS5yZW1vdmVBdHRyKFwic3R5bGVcIikucGFyZW50KCkuYmVmb3JlKHQpLnJlbW92ZSgpO1xuICAgICAgICB9IH0sIGUuZm5baV0gPSBmdW5jdGlvbiAocykge1xuICAgICAgICB2YXIgbCA9IGFyZ3VtZW50cztpZiAodm9pZCAwID09PSBzIHx8IFwib2JqZWN0XCIgPT0gKHR5cGVvZiBzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YocykpKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGUuZGF0YSh0aGlzLCBcIl9cIiArIGkpIHx8IGUuZGF0YSh0aGlzLCBcIl9cIiArIGksIG5ldyB0KHRoaXMsIHMpKTtcbiAgICAgICAgfSkucHJvbWlzZSgpLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHQgPSBlKHRoaXNbMF0pLmRhdGEoXCJfXCIgKyBpKTt0ICYmIHQub3B0aW9ucy5vbkZvcm1TdHlsZWQuY2FsbCgpO1xuICAgICAgICB9KSwgdGhpcztpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcyAmJiBcIl9cIiAhPT0gc1swXSAmJiBcImluaXRcIiAhPT0gcykge1xuICAgICAgICAgICAgdmFyIG87cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBlLmRhdGEodGhpcywgXCJfXCIgKyBpKTthIGluc3RhbmNlb2YgdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGFbc10gJiYgKG8gPSBhW3NdLmFwcGx5KGEsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGwsIDEpKSk7XG4gICAgICAgICAgICB9KSwgdm9pZCAwICE9PSBvID8gbyA6IHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCBzLnJlZ2lzdGVyZWQgPSAhMTtcbn0pOyJdfQ==
